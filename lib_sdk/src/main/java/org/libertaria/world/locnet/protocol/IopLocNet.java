// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopLocNet.proto

package org.libertaria.world.locnet.protocol;

public final class IopLocNet {
    private IopLocNet() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    /**
     * <pre>
     * Return codes to mark whether the operation completed successfully or which error occurred.
     * TODO should status codes be shared between projects and maybe separated into an IopCommon.proto?
     * NOTE value of common status codes are exactly the same as defined in IopProfileServer to make this easy.
     * </pre>
     * <p>
     * Protobuf enum {@code org.libertaria.world.locnet.protocol.Status}
     */
    public enum Status
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * General codes that can be returned to any message.
         * </pre>
         * <p>
         * <code>STATUS_OK = 0;</code>
         */
        STATUS_OK(0),
        /**
         * <pre>
         * The incoming request does not follow the protocol.
         * </pre>
         * <p>
         * <code>ERROR_PROTOCOL_VIOLATION = 1;</code>
         */
        ERROR_PROTOCOL_VIOLATION(1),
        /**
         * <pre>
         * The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
         * </pre>
         * <p>
         * <code>ERROR_UNSUPPORTED = 2;</code>
         */
        ERROR_UNSUPPORTED(2),
        /**
         * <pre>
         * Internal error occurred while processing the message.
         * </pre>
         * <p>
         * <code>ERROR_INTERNAL = 8;</code>
         */
        ERROR_INTERNAL(8),
        /**
         * <pre>
         * A field in the request contains an invalid value.
         * </pre>
         * <p>
         * <code>ERROR_INVALID_VALUE = 54;</code>
         */
        ERROR_INVALID_VALUE(54),
        UNRECOGNIZED(-1),;

        /**
         * <pre>
         * General codes that can be returned to any message.
         * </pre>
         * <p>
         * <code>STATUS_OK = 0;</code>
         */
        public static final int STATUS_OK_VALUE = 0;
        /**
         * <pre>
         * The incoming request does not follow the protocol.
         * </pre>
         * <p>
         * <code>ERROR_PROTOCOL_VIOLATION = 1;</code>
         */
        public static final int ERROR_PROTOCOL_VIOLATION_VALUE = 1;
        /**
         * <pre>
         * The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
         * </pre>
         * <p>
         * <code>ERROR_UNSUPPORTED = 2;</code>
         */
        public static final int ERROR_UNSUPPORTED_VALUE = 2;
        /**
         * <pre>
         * Internal error occurred while processing the message.
         * </pre>
         * <p>
         * <code>ERROR_INTERNAL = 8;</code>
         */
        public static final int ERROR_INTERNAL_VALUE = 8;
        /**
         * <pre>
         * A field in the request contains an invalid value.
         * </pre>
         * <p>
         * <code>ERROR_INVALID_VALUE = 54;</code>
         */
        public static final int ERROR_INVALID_VALUE_VALUE = 54;


        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Status valueOf(int value) {
            return forNumber(value);
        }

        public static Status forNumber(int value) {
            switch (value) {
                case 0:
                    return STATUS_OK;
                case 1:
                    return ERROR_PROTOCOL_VIOLATION;
                case 2:
                    return ERROR_UNSUPPORTED;
                case 8:
                    return ERROR_INTERNAL;
                case 54:
                    return ERROR_INVALID_VALUE;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Status>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                Status> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<Status>() {
                    public Status findValueByNumber(int number) {
                        return Status.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.getDescriptor().getEnumTypes().get(0);
        }

        private static final Status[] VALUES = values();

        public static Status valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private Status(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.libertaria.world.locnet.protocol.Status)
    }

    public interface ServiceInfoOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.ServiceInfo)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>string type = 1;</code>
         */
        java.lang.String getType();

        /**
         * <code>string type = 1;</code>
         */
        com.google.protobuf.ByteString
        getTypeBytes();

        /**
         * <pre>
         * Network port where service is reachable on this host.
         * </pre>
         * <p>
         * <code>uint32 port = 2;</code>
         */
        int getPort();

        /**
         * <pre>
         * Optional binary data that the service can share about itself. Has no predefined format, any custom data can be added here. Useful for e.g. sharing the profile server node ID. Must be no more than 1KB.
         * </pre>
         * <p>
         * <code>bytes service_data = 3;</code>
         */
        com.google.protobuf.ByteString getServiceData();
    }

    /**
     * <pre>
     * Describe a single service running on the same host. Fields and their formats are analogue to NodeInfo.
     * We assume that the service can be accessed on the same IP address as the location based network node.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.ServiceInfo}
     */
    public static final class ServiceInfo extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.ServiceInfo)
            ServiceInfoOrBuilder {
        // Use ServiceInfo.newBuilder() to construct.
        private ServiceInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private ServiceInfo() {
            type_ = "";
            port_ = 0;
            serviceData_ = com.google.protobuf.ByteString.EMPTY;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private ServiceInfo(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            java.lang.String s = input.readStringRequireUtf8();

                            type_ = s;
                            break;
                        }
                        case 16: {

                            port_ = input.readUInt32();
                            break;
                        }
                        case 26: {

                            serviceData_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.class, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder.class);
        }

        public static final int TYPE_FIELD_NUMBER = 1;
        private volatile java.lang.Object type_;

        /**
         * <code>string type = 1;</code>
         */
        public java.lang.String getType() {
            java.lang.Object ref = type_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                type_ = s;
                return s;
            }
        }

        /**
         * <code>string type = 1;</code>
         */
        public com.google.protobuf.ByteString
        getTypeBytes() {
            java.lang.Object ref = type_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                type_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int PORT_FIELD_NUMBER = 2;
        private int port_;

        /**
         * <pre>
         * Network port where service is reachable on this host.
         * </pre>
         * <p>
         * <code>uint32 port = 2;</code>
         */
        public int getPort() {
            return port_;
        }

        public static final int SERVICE_DATA_FIELD_NUMBER = 3;
        private com.google.protobuf.ByteString serviceData_;

        /**
         * <pre>
         * Optional binary data that the service can share about itself. Has no predefined format, any custom data can be added here. Useful for e.g. sharing the profile server node ID. Must be no more than 1KB.
         * </pre>
         * <p>
         * <code>bytes service_data = 3;</code>
         */
        public com.google.protobuf.ByteString getServiceData() {
            return serviceData_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getTypeBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, type_);
            }
            if (port_ != 0) {
                output.writeUInt32(2, port_);
            }
            if (!serviceData_.isEmpty()) {
                output.writeBytes(3, serviceData_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getTypeBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, type_);
            }
            if (port_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, port_);
            }
            if (!serviceData_.isEmpty()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(3, serviceData_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo other = (org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo) obj;

            boolean result = true;
            result = result && getType()
                    .equals(other.getType());
            result = result && (getPort()
                    == other.getPort());
            result = result && getServiceData()
                    .equals(other.getServiceData());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getType().hashCode();
            hash = (37 * hash) + PORT_FIELD_NUMBER;
            hash = (53 * hash) + getPort();
            hash = (37 * hash) + SERVICE_DATA_FIELD_NUMBER;
            hash = (53 * hash) + getServiceData().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Describe a single service running on the same host. Fields and their formats are analogue to NodeInfo.
         * We assume that the service can be accessed on the same IP address as the location based network node.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.ServiceInfo}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.ServiceInfo)
                org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.class, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                type_ = "";

                port_ = 0;

                serviceData_ = com.google.protobuf.ByteString.EMPTY;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo build() {
                org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo result = new org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo(this);
                result.type_ = type_;
                result.port_ = port_;
                result.serviceData_ = serviceData_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.getDefaultInstance())
                    return this;
                if (!other.getType().isEmpty()) {
                    type_ = other.type_;
                    onChanged();
                }
                if (other.getPort() != 0) {
                    setPort(other.getPort());
                }
                if (other.getServiceData() != com.google.protobuf.ByteString.EMPTY) {
                    setServiceData(other.getServiceData());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private java.lang.Object type_ = "";

            /**
             * <code>string type = 1;</code>
             */
            public java.lang.String getType() {
                java.lang.Object ref = type_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    type_ = s;
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <code>string type = 1;</code>
             */
            public com.google.protobuf.ByteString
            getTypeBytes() {
                java.lang.Object ref = type_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    type_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>string type = 1;</code>
             */
            public Builder setType(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                type_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>string type = 1;</code>
             */
            public Builder clearType() {

                type_ = getDefaultInstance().getType();
                onChanged();
                return this;
            }

            /**
             * <code>string type = 1;</code>
             */
            public Builder setTypeBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                type_ = value;
                onChanged();
                return this;
            }

            private int port_;

            /**
             * <pre>
             * Network port where service is reachable on this host.
             * </pre>
             * <p>
             * <code>uint32 port = 2;</code>
             */
            public int getPort() {
                return port_;
            }

            /**
             * <pre>
             * Network port where service is reachable on this host.
             * </pre>
             * <p>
             * <code>uint32 port = 2;</code>
             */
            public Builder setPort(int value) {

                port_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Network port where service is reachable on this host.
             * </pre>
             * <p>
             * <code>uint32 port = 2;</code>
             */
            public Builder clearPort() {

                port_ = 0;
                onChanged();
                return this;
            }

            private com.google.protobuf.ByteString serviceData_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <pre>
             * Optional binary data that the service can share about itself. Has no predefined format, any custom data can be added here. Useful for e.g. sharing the profile server node ID. Must be no more than 1KB.
             * </pre>
             * <p>
             * <code>bytes service_data = 3;</code>
             */
            public com.google.protobuf.ByteString getServiceData() {
                return serviceData_;
            }

            /**
             * <pre>
             * Optional binary data that the service can share about itself. Has no predefined format, any custom data can be added here. Useful for e.g. sharing the profile server node ID. Must be no more than 1KB.
             * </pre>
             * <p>
             * <code>bytes service_data = 3;</code>
             */
            public Builder setServiceData(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                serviceData_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Optional binary data that the service can share about itself. Has no predefined format, any custom data can be added here. Useful for e.g. sharing the profile server node ID. Must be no more than 1KB.
             * </pre>
             * <p>
             * <code>bytes service_data = 3;</code>
             */
            public Builder clearServiceData() {

                serviceData_ = getDefaultInstance().getServiceData();
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.ServiceInfo)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.ServiceInfo)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ServiceInfo>
                PARSER = new com.google.protobuf.AbstractParser<ServiceInfo>() {
            public ServiceInfo parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new ServiceInfo(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<ServiceInfo> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ServiceInfo> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GpsLocationOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GpsLocation)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>sfixed32 latitude = 1;</code>
         */
        int getLatitude();

        /**
         * <code>sfixed32 longitude = 2;</code>
         */
        int getLongitude();
    }

    /**
     * <pre>
     * GpsLocation represents a 2D GPS position without height.
     * Latitude and longitude coordinates use a signed integer stored as type decimal(9,6),
     * which means that a floating point value of the latitude or longitude is multiplied by 1,000,000
     * and converted to integer (cutting any digits right of the decimal point without rounding).
     * To get the floating point value back, simply divide the integer value by 1,000,000.
     * For latitudes, valid values are in range [-90,000,000;90,000,000], for longitudes the range is
     * [-179,999,999;180,000,000].
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GpsLocation}
     */
    public static final class GpsLocation extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GpsLocation)
            GpsLocationOrBuilder {
        // Use GpsLocation.newBuilder() to construct.
        private GpsLocation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GpsLocation() {
            latitude_ = 0;
            longitude_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GpsLocation(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 13: {

                            latitude_ = input.readSFixed32();
                            break;
                        }
                        case 21: {

                            longitude_ = input.readSFixed32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GpsLocation_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GpsLocation_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.class, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder.class);
        }

        public static final int LATITUDE_FIELD_NUMBER = 1;
        private int latitude_;

        /**
         * <code>sfixed32 latitude = 1;</code>
         */
        public int getLatitude() {
            return latitude_;
        }

        public static final int LONGITUDE_FIELD_NUMBER = 2;
        private int longitude_;

        /**
         * <code>sfixed32 longitude = 2;</code>
         */
        public int getLongitude() {
            return longitude_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (latitude_ != 0) {
                output.writeSFixed32(1, latitude_);
            }
            if (longitude_ != 0) {
                output.writeSFixed32(2, longitude_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (latitude_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeSFixed32Size(1, latitude_);
            }
            if (longitude_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeSFixed32Size(2, longitude_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation other = (org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation) obj;

            boolean result = true;
            result = result && (getLatitude()
                    == other.getLatitude());
            result = result && (getLongitude()
                    == other.getLongitude());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + LATITUDE_FIELD_NUMBER;
            hash = (53 * hash) + getLatitude();
            hash = (37 * hash) + LONGITUDE_FIELD_NUMBER;
            hash = (53 * hash) + getLongitude();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * GpsLocation represents a 2D GPS position without height.
         * Latitude and longitude coordinates use a signed integer stored as type decimal(9,6),
         * which means that a floating point value of the latitude or longitude is multiplied by 1,000,000
         * and converted to integer (cutting any digits right of the decimal point without rounding).
         * To get the floating point value back, simply divide the integer value by 1,000,000.
         * For latitudes, valid values are in range [-90,000,000;90,000,000], for longitudes the range is
         * [-179,999,999;180,000,000].
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GpsLocation}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GpsLocation)
                org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GpsLocation_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GpsLocation_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.class, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                latitude_ = 0;

                longitude_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GpsLocation_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation result = new org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation(this);
                result.latitude_ = latitude_;
                result.longitude_ = longitude_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance())
                    return this;
                if (other.getLatitude() != 0) {
                    setLatitude(other.getLatitude());
                }
                if (other.getLongitude() != 0) {
                    setLongitude(other.getLongitude());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int latitude_;

            /**
             * <code>sfixed32 latitude = 1;</code>
             */
            public int getLatitude() {
                return latitude_;
            }

            /**
             * <code>sfixed32 latitude = 1;</code>
             */
            public Builder setLatitude(int value) {

                latitude_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>sfixed32 latitude = 1;</code>
             */
            public Builder clearLatitude() {

                latitude_ = 0;
                onChanged();
                return this;
            }

            private int longitude_;

            /**
             * <code>sfixed32 longitude = 2;</code>
             */
            public int getLongitude() {
                return longitude_;
            }

            /**
             * <code>sfixed32 longitude = 2;</code>
             */
            public Builder setLongitude(int value) {

                longitude_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>sfixed32 longitude = 2;</code>
             */
            public Builder clearLongitude() {

                longitude_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GpsLocation)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GpsLocation)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GpsLocation>
                PARSER = new com.google.protobuf.AbstractParser<GpsLocation>() {
            public GpsLocation parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GpsLocation(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GpsLocation> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GpsLocation> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface NodeContactOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.NodeContact)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>bytes ip_address = 1;</code>
         */
        com.google.protobuf.ByteString getIpAddress();

        /**
         * <pre>
         * Port where remote node interface (for nodes of the same network) is available
         * </pre>
         * <p>
         * <code>uint32 node_port = 2;</code>
         */
        int getNodePort();

        /**
         * <pre>
         * Port where client interface (for end users) is available
         * </pre>
         * <p>
         * <code>uint32 client_port = 3;</code>
         */
        int getClientPort();
    }

    /**
     * <pre>
     * Node endpoints that can be contacted by a client.
     * IP address is represented as a byte array which must contain 4 bytes for Ipv4 addresses and
     * 16 bytes for an Ipv6 address.
     * Port must be a simple TCP port which should be uint16, but there is no appropriate data type
     * in ProtoBuf so it is represented as uint32.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.NodeContact}
     */
    public static final class NodeContact extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.NodeContact)
            NodeContactOrBuilder {
        // Use NodeContact.newBuilder() to construct.
        private NodeContact(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private NodeContact() {
            ipAddress_ = com.google.protobuf.ByteString.EMPTY;
            nodePort_ = 0;
            clientPort_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private NodeContact(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {

                            ipAddress_ = input.readBytes();
                            break;
                        }
                        case 16: {

                            nodePort_ = input.readUInt32();
                            break;
                        }
                        case 24: {

                            clientPort_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeContact_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeContact_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.class, org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.Builder.class);
        }

        public static final int IP_ADDRESS_FIELD_NUMBER = 1;
        private com.google.protobuf.ByteString ipAddress_;

        /**
         * <code>bytes ip_address = 1;</code>
         */
        public com.google.protobuf.ByteString getIpAddress() {
            return ipAddress_;
        }

        public static final int NODE_PORT_FIELD_NUMBER = 2;
        private int nodePort_;

        /**
         * <pre>
         * Port where remote node interface (for nodes of the same network) is available
         * </pre>
         * <p>
         * <code>uint32 node_port = 2;</code>
         */
        public int getNodePort() {
            return nodePort_;
        }

        public static final int CLIENT_PORT_FIELD_NUMBER = 3;
        private int clientPort_;

        /**
         * <pre>
         * Port where client interface (for end users) is available
         * </pre>
         * <p>
         * <code>uint32 client_port = 3;</code>
         */
        public int getClientPort() {
            return clientPort_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!ipAddress_.isEmpty()) {
                output.writeBytes(1, ipAddress_);
            }
            if (nodePort_ != 0) {
                output.writeUInt32(2, nodePort_);
            }
            if (clientPort_ != 0) {
                output.writeUInt32(3, clientPort_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!ipAddress_.isEmpty()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, ipAddress_);
            }
            if (nodePort_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, nodePort_);
            }
            if (clientPort_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, clientPort_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.NodeContact)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.NodeContact other = (org.libertaria.world.locnet.protocol.IopLocNet.NodeContact) obj;

            boolean result = true;
            result = result && getIpAddress()
                    .equals(other.getIpAddress());
            result = result && (getNodePort()
                    == other.getNodePort());
            result = result && (getClientPort()
                    == other.getClientPort());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + IP_ADDRESS_FIELD_NUMBER;
            hash = (53 * hash) + getIpAddress().hashCode();
            hash = (37 * hash) + NODE_PORT_FIELD_NUMBER;
            hash = (53 * hash) + getNodePort();
            hash = (37 * hash) + CLIENT_PORT_FIELD_NUMBER;
            hash = (53 * hash) + getClientPort();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.NodeContact prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Node endpoints that can be contacted by a client.
         * IP address is represented as a byte array which must contain 4 bytes for Ipv4 addresses and
         * 16 bytes for an Ipv6 address.
         * Port must be a simple TCP port which should be uint16, but there is no appropriate data type
         * in ProtoBuf so it is represented as uint32.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.NodeContact}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.NodeContact)
                org.libertaria.world.locnet.protocol.IopLocNet.NodeContactOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeContact_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeContact_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.class, org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                ipAddress_ = com.google.protobuf.ByteString.EMPTY;

                nodePort_ = 0;

                clientPort_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeContact_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NodeContact getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NodeContact build() {
                org.libertaria.world.locnet.protocol.IopLocNet.NodeContact result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NodeContact buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.NodeContact result = new org.libertaria.world.locnet.protocol.IopLocNet.NodeContact(this);
                result.ipAddress_ = ipAddress_;
                result.nodePort_ = nodePort_;
                result.clientPort_ = clientPort_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.NodeContact) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.NodeContact) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.NodeContact other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.getDefaultInstance())
                    return this;
                if (other.getIpAddress() != com.google.protobuf.ByteString.EMPTY) {
                    setIpAddress(other.getIpAddress());
                }
                if (other.getNodePort() != 0) {
                    setNodePort(other.getNodePort());
                }
                if (other.getClientPort() != 0) {
                    setClientPort(other.getClientPort());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.NodeContact parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.NodeContact) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private com.google.protobuf.ByteString ipAddress_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>bytes ip_address = 1;</code>
             */
            public com.google.protobuf.ByteString getIpAddress() {
                return ipAddress_;
            }

            /**
             * <code>bytes ip_address = 1;</code>
             */
            public Builder setIpAddress(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                ipAddress_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bytes ip_address = 1;</code>
             */
            public Builder clearIpAddress() {

                ipAddress_ = getDefaultInstance().getIpAddress();
                onChanged();
                return this;
            }

            private int nodePort_;

            /**
             * <pre>
             * Port where remote node interface (for nodes of the same network) is available
             * </pre>
             * <p>
             * <code>uint32 node_port = 2;</code>
             */
            public int getNodePort() {
                return nodePort_;
            }

            /**
             * <pre>
             * Port where remote node interface (for nodes of the same network) is available
             * </pre>
             * <p>
             * <code>uint32 node_port = 2;</code>
             */
            public Builder setNodePort(int value) {

                nodePort_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Port where remote node interface (for nodes of the same network) is available
             * </pre>
             * <p>
             * <code>uint32 node_port = 2;</code>
             */
            public Builder clearNodePort() {

                nodePort_ = 0;
                onChanged();
                return this;
            }

            private int clientPort_;

            /**
             * <pre>
             * Port where client interface (for end users) is available
             * </pre>
             * <p>
             * <code>uint32 client_port = 3;</code>
             */
            public int getClientPort() {
                return clientPort_;
            }

            /**
             * <pre>
             * Port where client interface (for end users) is available
             * </pre>
             * <p>
             * <code>uint32 client_port = 3;</code>
             */
            public Builder setClientPort(int value) {

                clientPort_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Port where client interface (for end users) is available
             * </pre>
             * <p>
             * <code>uint32 client_port = 3;</code>
             */
            public Builder clearClientPort() {

                clientPort_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.NodeContact)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.NodeContact)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.NodeContact DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.NodeContact();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeContact getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<NodeContact>
                PARSER = new com.google.protobuf.AbstractParser<NodeContact>() {
            public NodeContact parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new NodeContact(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<NodeContact> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<NodeContact> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.NodeContact getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface NodeInfoOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.NodeInfo)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * TODO do we also need a public key here?
         * </pre>
         * <p>
         * <code>bytes node_id = 1;</code>
         */
        com.google.protobuf.ByteString getNodeId();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
         */
        boolean hasContact();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeContact getContact();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeContactOrBuilder getContactOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
         */
        boolean hasLocation();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo>
        getServicesList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo getServices(int index);

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        int getServicesCount();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder>
        getServicesOrBuilderList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder getServicesOrBuilder(
                int index);
    }

    /**
     * <pre>
     * Publicly known identity of a node, created after the similar "profile" entity of the profile server,
     * extended the GPS location of the node.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.NodeInfo}
     */
    public static final class NodeInfo extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.NodeInfo)
            NodeInfoOrBuilder {
        // Use NodeInfo.newBuilder() to construct.
        private NodeInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private NodeInfo() {
            nodeId_ = com.google.protobuf.ByteString.EMPTY;
            services_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private NodeInfo(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {

                            nodeId_ = input.readBytes();
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.Builder subBuilder = null;
                            if (contact_ != null) {
                                subBuilder = contact_.toBuilder();
                            }
                            contact_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(contact_);
                                contact_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 26: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder subBuilder = null;
                            if (location_ != null) {
                                subBuilder = location_.toBuilder();
                            }
                            location_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(location_);
                                location_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 258: {
                            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                                services_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo>();
                                mutable_bitField0_ |= 0x00000008;
                            }
                            services_.add(
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.parser(), extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    services_ = java.util.Collections.unmodifiableList(services_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeInfo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.class, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder.class);
        }

        private int bitField0_;
        public static final int NODE_ID_FIELD_NUMBER = 1;
        private com.google.protobuf.ByteString nodeId_;

        /**
         * <pre>
         * TODO do we also need a public key here?
         * </pre>
         * <p>
         * <code>bytes node_id = 1;</code>
         */
        public com.google.protobuf.ByteString getNodeId() {
            return nodeId_;
        }

        public static final int CONTACT_FIELD_NUMBER = 2;
        private org.libertaria.world.locnet.protocol.IopLocNet.NodeContact contact_;

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
         */
        public boolean hasContact() {
            return contact_ != null;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeContact getContact() {
            return contact_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.getDefaultInstance() : contact_;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeContactOrBuilder getContactOrBuilder() {
            return getContact();
        }

        public static final int LOCATION_FIELD_NUMBER = 3;
        private org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation location_;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
         */
        public boolean hasLocation() {
            return location_ != null;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation() {
            return location_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder() {
            return getLocation();
        }

        public static final int SERVICES_FIELD_NUMBER = 32;
        private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo> services_;

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo> getServicesList() {
            return services_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder>
        getServicesOrBuilderList() {
            return services_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        public int getServicesCount() {
            return services_.size();
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo getServices(int index) {
            return services_.get(index);
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder getServicesOrBuilder(
                int index) {
            return services_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!nodeId_.isEmpty()) {
                output.writeBytes(1, nodeId_);
            }
            if (contact_ != null) {
                output.writeMessage(2, getContact());
            }
            if (location_ != null) {
                output.writeMessage(3, getLocation());
            }
            for (int i = 0; i < services_.size(); i++) {
                output.writeMessage(32, services_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!nodeId_.isEmpty()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, nodeId_);
            }
            if (contact_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, getContact());
            }
            if (location_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, getLocation());
            }
            for (int i = 0; i < services_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(32, services_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo other = (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) obj;

            boolean result = true;
            result = result && getNodeId()
                    .equals(other.getNodeId());
            result = result && (hasContact() == other.hasContact());
            if (hasContact()) {
                result = result && getContact()
                        .equals(other.getContact());
            }
            result = result && (hasLocation() == other.hasLocation());
            if (hasLocation()) {
                result = result && getLocation()
                        .equals(other.getLocation());
            }
            result = result && getServicesList()
                    .equals(other.getServicesList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + NODE_ID_FIELD_NUMBER;
            hash = (53 * hash) + getNodeId().hashCode();
            if (hasContact()) {
                hash = (37 * hash) + CONTACT_FIELD_NUMBER;
                hash = (53 * hash) + getContact().hashCode();
            }
            if (hasLocation()) {
                hash = (37 * hash) + LOCATION_FIELD_NUMBER;
                hash = (53 * hash) + getLocation().hashCode();
            }
            if (getServicesCount() > 0) {
                hash = (37 * hash) + SERVICES_FIELD_NUMBER;
                hash = (53 * hash) + getServicesList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Publicly known identity of a node, created after the similar "profile" entity of the profile server,
         * extended the GPS location of the node.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.NodeInfo}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.NodeInfo)
                org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeInfo_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeInfo_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.class, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getServicesFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                nodeId_ = com.google.protobuf.ByteString.EMPTY;

                if (contactBuilder_ == null) {
                    contact_ = null;
                } else {
                    contact_ = null;
                    contactBuilder_ = null;
                }
                if (locationBuilder_ == null) {
                    location_ = null;
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }
                if (servicesBuilder_ == null) {
                    services_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                } else {
                    servicesBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NodeInfo_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo build() {
                org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo result = new org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.nodeId_ = nodeId_;
                if (contactBuilder_ == null) {
                    result.contact_ = contact_;
                } else {
                    result.contact_ = contactBuilder_.build();
                }
                if (locationBuilder_ == null) {
                    result.location_ = location_;
                } else {
                    result.location_ = locationBuilder_.build();
                }
                if (servicesBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008)) {
                        services_ = java.util.Collections.unmodifiableList(services_);
                        bitField0_ = (bitField0_ & ~0x00000008);
                    }
                    result.services_ = services_;
                } else {
                    result.services_ = servicesBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance())
                    return this;
                if (other.getNodeId() != com.google.protobuf.ByteString.EMPTY) {
                    setNodeId(other.getNodeId());
                }
                if (other.hasContact()) {
                    mergeContact(other.getContact());
                }
                if (other.hasLocation()) {
                    mergeLocation(other.getLocation());
                }
                if (servicesBuilder_ == null) {
                    if (!other.services_.isEmpty()) {
                        if (services_.isEmpty()) {
                            services_ = other.services_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                        } else {
                            ensureServicesIsMutable();
                            services_.addAll(other.services_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.services_.isEmpty()) {
                        if (servicesBuilder_.isEmpty()) {
                            servicesBuilder_.dispose();
                            servicesBuilder_ = null;
                            services_ = other.services_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                            servicesBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getServicesFieldBuilder() : null;
                        } else {
                            servicesBuilder_.addAllMessages(other.services_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private com.google.protobuf.ByteString nodeId_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <pre>
             * TODO do we also need a public key here?
             * </pre>
             * <p>
             * <code>bytes node_id = 1;</code>
             */
            public com.google.protobuf.ByteString getNodeId() {
                return nodeId_;
            }

            /**
             * <pre>
             * TODO do we also need a public key here?
             * </pre>
             * <p>
             * <code>bytes node_id = 1;</code>
             */
            public Builder setNodeId(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                nodeId_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * TODO do we also need a public key here?
             * </pre>
             * <p>
             * <code>bytes node_id = 1;</code>
             */
            public Builder clearNodeId() {

                nodeId_ = getDefaultInstance().getNodeId();
                onChanged();
                return this;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.NodeContact contact_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeContact, org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeContactOrBuilder> contactBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
             */
            public boolean hasContact() {
                return contactBuilder_ != null || contact_ != null;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeContact getContact() {
                if (contactBuilder_ == null) {
                    return contact_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.getDefaultInstance() : contact_;
                } else {
                    return contactBuilder_.getMessage();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
             */
            public Builder setContact(org.libertaria.world.locnet.protocol.IopLocNet.NodeContact value) {
                if (contactBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    contact_ = value;
                    onChanged();
                } else {
                    contactBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
             */
            public Builder setContact(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.Builder builderForValue) {
                if (contactBuilder_ == null) {
                    contact_ = builderForValue.build();
                    onChanged();
                } else {
                    contactBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
             */
            public Builder mergeContact(org.libertaria.world.locnet.protocol.IopLocNet.NodeContact value) {
                if (contactBuilder_ == null) {
                    if (contact_ != null) {
                        contact_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.newBuilder(contact_).mergeFrom(value).buildPartial();
                    } else {
                        contact_ = value;
                    }
                    onChanged();
                } else {
                    contactBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
             */
            public Builder clearContact() {
                if (contactBuilder_ == null) {
                    contact_ = null;
                    onChanged();
                } else {
                    contact_ = null;
                    contactBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.Builder getContactBuilder() {

                onChanged();
                return getContactFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeContactOrBuilder getContactOrBuilder() {
                if (contactBuilder_ != null) {
                    return contactBuilder_.getMessageOrBuilder();
                } else {
                    return contact_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.getDefaultInstance() : contact_;
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeContact contact = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeContact, org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeContactOrBuilder>
            getContactFieldBuilder() {
                if (contactBuilder_ == null) {
                    contactBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeContact, org.libertaria.world.locnet.protocol.IopLocNet.NodeContact.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeContactOrBuilder>(
                            getContact(),
                            getParentForChildren(),
                            isClean());
                    contact_ = null;
                }
                return contactBuilder_;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation location_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder> locationBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
             */
            public boolean hasLocation() {
                return locationBuilder_ != null || location_ != null;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation() {
                if (locationBuilder_ == null) {
                    return location_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
                } else {
                    return locationBuilder_.getMessage();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
             */
            public Builder setLocation(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation value) {
                if (locationBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    location_ = value;
                    onChanged();
                } else {
                    locationBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
             */
            public Builder setLocation(
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder builderForValue) {
                if (locationBuilder_ == null) {
                    location_ = builderForValue.build();
                    onChanged();
                } else {
                    locationBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
             */
            public Builder mergeLocation(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation value) {
                if (locationBuilder_ == null) {
                    if (location_ != null) {
                        location_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.newBuilder(location_).mergeFrom(value).buildPartial();
                    } else {
                        location_ = value;
                    }
                    onChanged();
                } else {
                    locationBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
             */
            public Builder clearLocation() {
                if (locationBuilder_ == null) {
                    location_ = null;
                    onChanged();
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder getLocationBuilder() {

                onChanged();
                return getLocationFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder() {
                if (locationBuilder_ != null) {
                    return locationBuilder_.getMessageOrBuilder();
                } else {
                    return location_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder>
            getLocationFieldBuilder() {
                if (locationBuilder_ == null) {
                    locationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder>(
                            getLocation(),
                            getParentForChildren(),
                            isClean());
                    location_ = null;
                }
                return locationBuilder_;
            }

            private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo> services_ =
                    java.util.Collections.emptyList();

            private void ensureServicesIsMutable() {
                if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                    services_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo>(services_);
                    bitField0_ |= 0x00000008;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder> servicesBuilder_;

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo> getServicesList() {
                if (servicesBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(services_);
                } else {
                    return servicesBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public int getServicesCount() {
                if (servicesBuilder_ == null) {
                    return services_.size();
                } else {
                    return servicesBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo getServices(int index) {
                if (servicesBuilder_ == null) {
                    return services_.get(index);
                } else {
                    return servicesBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public Builder setServices(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo value) {
                if (servicesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureServicesIsMutable();
                    services_.set(index, value);
                    onChanged();
                } else {
                    servicesBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public Builder setServices(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder builderForValue) {
                if (servicesBuilder_ == null) {
                    ensureServicesIsMutable();
                    services_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    servicesBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public Builder addServices(org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo value) {
                if (servicesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureServicesIsMutable();
                    services_.add(value);
                    onChanged();
                } else {
                    servicesBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public Builder addServices(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo value) {
                if (servicesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureServicesIsMutable();
                    services_.add(index, value);
                    onChanged();
                } else {
                    servicesBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public Builder addServices(
                    org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder builderForValue) {
                if (servicesBuilder_ == null) {
                    ensureServicesIsMutable();
                    services_.add(builderForValue.build());
                    onChanged();
                } else {
                    servicesBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public Builder addServices(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder builderForValue) {
                if (servicesBuilder_ == null) {
                    ensureServicesIsMutable();
                    services_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    servicesBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public Builder addAllServices(
                    java.lang.Iterable<? extends org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo> values) {
                if (servicesBuilder_ == null) {
                    ensureServicesIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, services_);
                    onChanged();
                } else {
                    servicesBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public Builder clearServices() {
                if (servicesBuilder_ == null) {
                    services_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                    onChanged();
                } else {
                    servicesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public Builder removeServices(int index) {
                if (servicesBuilder_ == null) {
                    ensureServicesIsMutable();
                    services_.remove(index);
                    onChanged();
                } else {
                    servicesBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder getServicesBuilder(
                    int index) {
                return getServicesFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder getServicesOrBuilder(
                    int index) {
                if (servicesBuilder_ == null) {
                    return services_.get(index);
                } else {
                    return servicesBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder>
            getServicesOrBuilderList() {
                if (servicesBuilder_ != null) {
                    return servicesBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(services_);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder addServicesBuilder() {
                return getServicesFieldBuilder().addBuilder(
                        org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder addServicesBuilder(
                    int index) {
                return getServicesFieldBuilder().addBuilder(
                        index, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.ServiceInfo services = 32;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder>
            getServicesBuilderList() {
                return getServicesFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder>
            getServicesFieldBuilder() {
                if (servicesBuilder_ == null) {
                    servicesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder>(
                            services_,
                            ((bitField0_ & 0x00000008) == 0x00000008),
                            getParentForChildren(),
                            isClean());
                    services_ = null;
                }
                return servicesBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.NodeInfo)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.NodeInfo)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<NodeInfo>
                PARSER = new com.google.protobuf.AbstractParser<NodeInfo>() {
            public NodeInfo parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new NodeInfo(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<NodeInfo> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<NodeInfo> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface MessageWithHeaderOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.MessageWithHeader)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
         * </pre>
         * <p>
         * <code>fixed32 header = 1;</code>
         */
        int getHeader();

        /**
         * <pre>
         * Message itself.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
         */
        boolean hasBody();

        /**
         * <pre>
         * Message itself.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.Message getBody();

        /**
         * <pre>
         * Message itself.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.MessageOrBuilder getBodyOrBuilder();
    }

    /**
     * <pre>
     * This is complete message as it goes over the wire. It includes the 32-bit header with message length.
     * There is a 1 byte prefix because of Google Protobuf protocol, so the actual binary data for a message
     * with body size 4660 bytes would be:
     *   0D 34 12 00 00
     * where 0x0D means type 'fixed32' (which value is 5) + index of 'header', which is 1 &lt;&lt; 3,
     * this is followed be the 4 byte sequence 34 12 00 00, which is little endian of 0x00001234, which is 4660 decimal.
     * Thus the total number of bytes sent over the wire for this message would be 4665 bytes.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.MessageWithHeader}
     */
    public static final class MessageWithHeader extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.MessageWithHeader)
            MessageWithHeaderOrBuilder {
        // Use MessageWithHeader.newBuilder() to construct.
        private MessageWithHeader(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private MessageWithHeader() {
            header_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private MessageWithHeader(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 13: {

                            header_ = input.readFixed32();
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.Message.Builder subBuilder = null;
                            if (body_ != null) {
                                subBuilder = body_.toBuilder();
                            }
                            body_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.Message.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(body_);
                                body_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader.class, org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader.Builder.class);
        }

        public static final int HEADER_FIELD_NUMBER = 1;
        private int header_;

        /**
         * <pre>
         * Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
         * </pre>
         * <p>
         * <code>fixed32 header = 1;</code>
         */
        public int getHeader() {
            return header_;
        }

        public static final int BODY_FIELD_NUMBER = 2;
        private org.libertaria.world.locnet.protocol.IopLocNet.Message body_;

        /**
         * <pre>
         * Message itself.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
         */
        public boolean hasBody() {
            return body_ != null;
        }

        /**
         * <pre>
         * Message itself.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.Message getBody() {
            return body_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.Message.getDefaultInstance() : body_;
        }

        /**
         * <pre>
         * Message itself.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.MessageOrBuilder getBodyOrBuilder() {
            return getBody();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (header_ != 0) {
                output.writeFixed32(1, header_);
            }
            if (body_ != null) {
                output.writeMessage(2, getBody());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (header_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFixed32Size(1, header_);
            }
            if (body_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, getBody());
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader other = (org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader) obj;

            boolean result = true;
            result = result && (getHeader()
                    == other.getHeader());
            result = result && (hasBody() == other.hasBody());
            if (hasBody()) {
                result = result && getBody()
                        .equals(other.getBody());
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + HEADER_FIELD_NUMBER;
            hash = (53 * hash) + getHeader();
            if (hasBody()) {
                hash = (37 * hash) + BODY_FIELD_NUMBER;
                hash = (53 * hash) + getBody().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * This is complete message as it goes over the wire. It includes the 32-bit header with message length.
         * There is a 1 byte prefix because of Google Protobuf protocol, so the actual binary data for a message
         * with body size 4660 bytes would be:
         *   0D 34 12 00 00
         * where 0x0D means type 'fixed32' (which value is 5) + index of 'header', which is 1 &lt;&lt; 3,
         * this is followed be the 4 byte sequence 34 12 00 00, which is little endian of 0x00001234, which is 4660 decimal.
         * Thus the total number of bytes sent over the wire for this message would be 4665 bytes.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.MessageWithHeader}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.MessageWithHeader)
                org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeaderOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader.class, org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                header_ = 0;

                if (bodyBuilder_ == null) {
                    body_ = null;
                } else {
                    body_ = null;
                    bodyBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader build() {
                org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader result = new org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader(this);
                result.header_ = header_;
                if (bodyBuilder_ == null) {
                    result.body_ = body_;
                } else {
                    result.body_ = bodyBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader.getDefaultInstance())
                    return this;
                if (other.getHeader() != 0) {
                    setHeader(other.getHeader());
                }
                if (other.hasBody()) {
                    mergeBody(other.getBody());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int header_;

            /**
             * <pre>
             * Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
             * </pre>
             * <p>
             * <code>fixed32 header = 1;</code>
             */
            public int getHeader() {
                return header_;
            }

            /**
             * <pre>
             * Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
             * </pre>
             * <p>
             * <code>fixed32 header = 1;</code>
             */
            public Builder setHeader(int value) {

                header_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
             * </pre>
             * <p>
             * <code>fixed32 header = 1;</code>
             */
            public Builder clearHeader() {

                header_ = 0;
                onChanged();
                return this;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.Message body_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.Message, org.libertaria.world.locnet.protocol.IopLocNet.Message.Builder, org.libertaria.world.locnet.protocol.IopLocNet.MessageOrBuilder> bodyBuilder_;

            /**
             * <pre>
             * Message itself.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
             */
            public boolean hasBody() {
                return bodyBuilder_ != null || body_ != null;
            }

            /**
             * <pre>
             * Message itself.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.Message getBody() {
                if (bodyBuilder_ == null) {
                    return body_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.Message.getDefaultInstance() : body_;
                } else {
                    return bodyBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * Message itself.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
             */
            public Builder setBody(org.libertaria.world.locnet.protocol.IopLocNet.Message value) {
                if (bodyBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    body_ = value;
                    onChanged();
                } else {
                    bodyBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * Message itself.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
             */
            public Builder setBody(
                    org.libertaria.world.locnet.protocol.IopLocNet.Message.Builder builderForValue) {
                if (bodyBuilder_ == null) {
                    body_ = builderForValue.build();
                    onChanged();
                } else {
                    bodyBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * Message itself.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
             */
            public Builder mergeBody(org.libertaria.world.locnet.protocol.IopLocNet.Message value) {
                if (bodyBuilder_ == null) {
                    if (body_ != null) {
                        body_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.Message.newBuilder(body_).mergeFrom(value).buildPartial();
                    } else {
                        body_ = value;
                    }
                    onChanged();
                } else {
                    bodyBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * Message itself.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
             */
            public Builder clearBody() {
                if (bodyBuilder_ == null) {
                    body_ = null;
                    onChanged();
                } else {
                    body_ = null;
                    bodyBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * Message itself.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.Message.Builder getBodyBuilder() {

                onChanged();
                return getBodyFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * Message itself.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.MessageOrBuilder getBodyOrBuilder() {
                if (bodyBuilder_ != null) {
                    return bodyBuilder_.getMessageOrBuilder();
                } else {
                    return body_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.Message.getDefaultInstance() : body_;
                }
            }

            /**
             * <pre>
             * Message itself.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Message body = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.Message, org.libertaria.world.locnet.protocol.IopLocNet.Message.Builder, org.libertaria.world.locnet.protocol.IopLocNet.MessageOrBuilder>
            getBodyFieldBuilder() {
                if (bodyBuilder_ == null) {
                    bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.Message, org.libertaria.world.locnet.protocol.IopLocNet.Message.Builder, org.libertaria.world.locnet.protocol.IopLocNet.MessageOrBuilder>(
                            getBody(),
                            getParentForChildren(),
                            isClean());
                    body_ = null;
                }
                return bodyBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.MessageWithHeader)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.MessageWithHeader)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<MessageWithHeader>
                PARSER = new com.google.protobuf.AbstractParser<MessageWithHeader>() {
            public MessageWithHeader parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new MessageWithHeader(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<MessageWithHeader> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<MessageWithHeader> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.MessageWithHeader getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface MessageOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.Message)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Requestor defined message ID that the requestee has to return in the response.
         * </pre>
         * <p>
         * <code>uint32 id = 1;</code>
         */
        int getId();

        /**
         * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.Request getRequest();

        /**
         * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.RequestOrBuilder getRequestOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.Response getResponse();

        /**
         * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ResponseOrBuilder getResponseOrBuilder();

        public org.libertaria.world.locnet.protocol.IopLocNet.Message.MessageTypeCase getMessageTypeCase();
    }

    /**
     * <pre>
     * Format of a single message.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.Message}
     */
    public static final class Message extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.Message)
            MessageOrBuilder {
        // Use Message.newBuilder() to construct.
        private Message(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Message() {
            id_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private Message(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            id_ = input.readUInt32();
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.Request.Builder subBuilder = null;
                            if (messageTypeCase_ == 2) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_).toBuilder();
                            }
                            messageType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.Request.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_);
                                messageType_ = subBuilder.buildPartial();
                            }
                            messageTypeCase_ = 2;
                            break;
                        }
                        case 26: {
                            org.libertaria.world.locnet.protocol.IopLocNet.Response.Builder subBuilder = null;
                            if (messageTypeCase_ == 3) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_).toBuilder();
                            }
                            messageType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.Response.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_);
                                messageType_ = subBuilder.buildPartial();
                            }
                            messageTypeCase_ = 3;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Message_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Message_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.Message.class, org.libertaria.world.locnet.protocol.IopLocNet.Message.Builder.class);
        }

        private int messageTypeCase_ = 0;
        private java.lang.Object messageType_;

        public enum MessageTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            REQUEST(2),
            RESPONSE(3),
            MESSAGETYPE_NOT_SET(0);
            private final int value;

            private MessageTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static MessageTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static MessageTypeCase forNumber(int value) {
                switch (value) {
                    case 2:
                        return REQUEST;
                    case 3:
                        return RESPONSE;
                    case 0:
                        return MESSAGETYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public MessageTypeCase
        getMessageTypeCase() {
            return MessageTypeCase.forNumber(
                    messageTypeCase_);
        }

        public static final int ID_FIELD_NUMBER = 1;
        private int id_;

        /**
         * <pre>
         * Requestor defined message ID that the requestee has to return in the response.
         * </pre>
         * <p>
         * <code>uint32 id = 1;</code>
         */
        public int getId() {
            return id_;
        }

        public static final int REQUEST_FIELD_NUMBER = 2;

        /**
         * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.Request getRequest() {
            if (messageTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.Request.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.RequestOrBuilder getRequestOrBuilder() {
            if (messageTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.Request.getDefaultInstance();
        }

        public static final int RESPONSE_FIELD_NUMBER = 3;

        /**
         * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.Response getResponse() {
            if (messageTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.Response.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ResponseOrBuilder getResponseOrBuilder() {
            if (messageTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.Response.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (id_ != 0) {
                output.writeUInt32(1, id_);
            }
            if (messageTypeCase_ == 2) {
                output.writeMessage(2, (org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_);
            }
            if (messageTypeCase_ == 3) {
                output.writeMessage(3, (org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (id_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, id_);
            }
            if (messageTypeCase_ == 2) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, (org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_);
            }
            if (messageTypeCase_ == 3) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, (org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.Message)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.Message other = (org.libertaria.world.locnet.protocol.IopLocNet.Message) obj;

            boolean result = true;
            result = result && (getId()
                    == other.getId());
            result = result && getMessageTypeCase().equals(
                    other.getMessageTypeCase());
            if (!result) return false;
            switch (messageTypeCase_) {
                case 2:
                    result = result && getRequest()
                            .equals(other.getRequest());
                    break;
                case 3:
                    result = result && getResponse()
                            .equals(other.getResponse());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getId();
            switch (messageTypeCase_) {
                case 2:
                    hash = (37 * hash) + REQUEST_FIELD_NUMBER;
                    hash = (53 * hash) + getRequest().hashCode();
                    break;
                case 3:
                    hash = (37 * hash) + RESPONSE_FIELD_NUMBER;
                    hash = (53 * hash) + getResponse().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.Message prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Format of a single message.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.Message}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.Message)
                org.libertaria.world.locnet.protocol.IopLocNet.MessageOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Message_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Message_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.Message.class, org.libertaria.world.locnet.protocol.IopLocNet.Message.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.Message.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                id_ = 0;

                messageTypeCase_ = 0;
                messageType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Message_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.Message getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.Message.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.Message build() {
                org.libertaria.world.locnet.protocol.IopLocNet.Message result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.Message buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.Message result = new org.libertaria.world.locnet.protocol.IopLocNet.Message(this);
                result.id_ = id_;
                if (messageTypeCase_ == 2) {
                    if (requestBuilder_ == null) {
                        result.messageType_ = messageType_;
                    } else {
                        result.messageType_ = requestBuilder_.build();
                    }
                }
                if (messageTypeCase_ == 3) {
                    if (responseBuilder_ == null) {
                        result.messageType_ = messageType_;
                    } else {
                        result.messageType_ = responseBuilder_.build();
                    }
                }
                result.messageTypeCase_ = messageTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.Message) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.Message) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.Message other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.Message.getDefaultInstance())
                    return this;
                if (other.getId() != 0) {
                    setId(other.getId());
                }
                switch (other.getMessageTypeCase()) {
                    case REQUEST: {
                        mergeRequest(other.getRequest());
                        break;
                    }
                    case RESPONSE: {
                        mergeResponse(other.getResponse());
                        break;
                    }
                    case MESSAGETYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.Message parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.Message) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int messageTypeCase_ = 0;
            private java.lang.Object messageType_;

            public MessageTypeCase
            getMessageTypeCase() {
                return MessageTypeCase.forNumber(
                        messageTypeCase_);
            }

            public Builder clearMessageType() {
                messageTypeCase_ = 0;
                messageType_ = null;
                onChanged();
                return this;
            }


            private int id_;

            /**
             * <pre>
             * Requestor defined message ID that the requestee has to return in the response.
             * </pre>
             * <p>
             * <code>uint32 id = 1;</code>
             */
            public int getId() {
                return id_;
            }

            /**
             * <pre>
             * Requestor defined message ID that the requestee has to return in the response.
             * </pre>
             * <p>
             * <code>uint32 id = 1;</code>
             */
            public Builder setId(int value) {

                id_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Requestor defined message ID that the requestee has to return in the response.
             * </pre>
             * <p>
             * <code>uint32 id = 1;</code>
             */
            public Builder clearId() {

                id_ = 0;
                onChanged();
                return this;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.Request, org.libertaria.world.locnet.protocol.IopLocNet.Request.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RequestOrBuilder> requestBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.Request getRequest() {
                if (requestBuilder_ == null) {
                    if (messageTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.Request.getDefaultInstance();
                } else {
                    if (messageTypeCase_ == 2) {
                        return requestBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.Request.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
             */
            public Builder setRequest(org.libertaria.world.locnet.protocol.IopLocNet.Request value) {
                if (requestBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    messageType_ = value;
                    onChanged();
                } else {
                    requestBuilder_.setMessage(value);
                }
                messageTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
             */
            public Builder setRequest(
                    org.libertaria.world.locnet.protocol.IopLocNet.Request.Builder builderForValue) {
                if (requestBuilder_ == null) {
                    messageType_ = builderForValue.build();
                    onChanged();
                } else {
                    requestBuilder_.setMessage(builderForValue.build());
                }
                messageTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
             */
            public Builder mergeRequest(org.libertaria.world.locnet.protocol.IopLocNet.Request value) {
                if (requestBuilder_ == null) {
                    if (messageTypeCase_ == 2 &&
                            messageType_ != org.libertaria.world.locnet.protocol.IopLocNet.Request.getDefaultInstance()) {
                        messageType_ = org.libertaria.world.locnet.protocol.IopLocNet.Request.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        messageType_ = value;
                    }
                    onChanged();
                } else {
                    if (messageTypeCase_ == 2) {
                        requestBuilder_.mergeFrom(value);
                    }
                    requestBuilder_.setMessage(value);
                }
                messageTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
             */
            public Builder clearRequest() {
                if (requestBuilder_ == null) {
                    if (messageTypeCase_ == 2) {
                        messageTypeCase_ = 0;
                        messageType_ = null;
                        onChanged();
                    }
                } else {
                    if (messageTypeCase_ == 2) {
                        messageTypeCase_ = 0;
                        messageType_ = null;
                    }
                    requestBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.Request.Builder getRequestBuilder() {
                return getRequestFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RequestOrBuilder getRequestOrBuilder() {
                if ((messageTypeCase_ == 2) && (requestBuilder_ != null)) {
                    return requestBuilder_.getMessageOrBuilder();
                } else {
                    if (messageTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.Request.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Request request = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.Request, org.libertaria.world.locnet.protocol.IopLocNet.Request.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RequestOrBuilder>
            getRequestFieldBuilder() {
                if (requestBuilder_ == null) {
                    if (!(messageTypeCase_ == 2)) {
                        messageType_ = org.libertaria.world.locnet.protocol.IopLocNet.Request.getDefaultInstance();
                    }
                    requestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.Request, org.libertaria.world.locnet.protocol.IopLocNet.Request.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.Request) messageType_,
                            getParentForChildren(),
                            isClean());
                    messageType_ = null;
                }
                messageTypeCase_ = 2;
                onChanged();
                ;
                return requestBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.Response, org.libertaria.world.locnet.protocol.IopLocNet.Response.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ResponseOrBuilder> responseBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.Response getResponse() {
                if (responseBuilder_ == null) {
                    if (messageTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.Response.getDefaultInstance();
                } else {
                    if (messageTypeCase_ == 3) {
                        return responseBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.Response.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
             */
            public Builder setResponse(org.libertaria.world.locnet.protocol.IopLocNet.Response value) {
                if (responseBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    messageType_ = value;
                    onChanged();
                } else {
                    responseBuilder_.setMessage(value);
                }
                messageTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
             */
            public Builder setResponse(
                    org.libertaria.world.locnet.protocol.IopLocNet.Response.Builder builderForValue) {
                if (responseBuilder_ == null) {
                    messageType_ = builderForValue.build();
                    onChanged();
                } else {
                    responseBuilder_.setMessage(builderForValue.build());
                }
                messageTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
             */
            public Builder mergeResponse(org.libertaria.world.locnet.protocol.IopLocNet.Response value) {
                if (responseBuilder_ == null) {
                    if (messageTypeCase_ == 3 &&
                            messageType_ != org.libertaria.world.locnet.protocol.IopLocNet.Response.getDefaultInstance()) {
                        messageType_ = org.libertaria.world.locnet.protocol.IopLocNet.Response.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        messageType_ = value;
                    }
                    onChanged();
                } else {
                    if (messageTypeCase_ == 3) {
                        responseBuilder_.mergeFrom(value);
                    }
                    responseBuilder_.setMessage(value);
                }
                messageTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
             */
            public Builder clearResponse() {
                if (responseBuilder_ == null) {
                    if (messageTypeCase_ == 3) {
                        messageTypeCase_ = 0;
                        messageType_ = null;
                        onChanged();
                    }
                } else {
                    if (messageTypeCase_ == 3) {
                        messageTypeCase_ = 0;
                        messageType_ = null;
                    }
                    responseBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.Response.Builder getResponseBuilder() {
                return getResponseFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ResponseOrBuilder getResponseOrBuilder() {
                if ((messageTypeCase_ == 3) && (responseBuilder_ != null)) {
                    return responseBuilder_.getMessageOrBuilder();
                } else {
                    if (messageTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.Response.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.Response response = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.Response, org.libertaria.world.locnet.protocol.IopLocNet.Response.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ResponseOrBuilder>
            getResponseFieldBuilder() {
                if (responseBuilder_ == null) {
                    if (!(messageTypeCase_ == 3)) {
                        messageType_ = org.libertaria.world.locnet.protocol.IopLocNet.Response.getDefaultInstance();
                    }
                    responseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.Response, org.libertaria.world.locnet.protocol.IopLocNet.Response.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.Response) messageType_,
                            getParentForChildren(),
                            isClean());
                    messageType_ = null;
                }
                messageTypeCase_ = 3;
                onChanged();
                ;
                return responseBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.Message)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.Message)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.Message DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.Message();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Message getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Message>
                PARSER = new com.google.protobuf.AbstractParser<Message>() {
            public Message parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Message(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Message> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Message> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.Message getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface RequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.Request)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>bytes version = 1;</code>
         */
        com.google.protobuf.ByteString getVersion();

        /**
         * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest getLocalService();

        /**
         * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequestOrBuilder getLocalServiceOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest getRemoteNode();

        /**
         * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequestOrBuilder getRemoteNodeOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest getClient();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ClientRequestOrBuilder getClientOrBuilder();

        public org.libertaria.world.locnet.protocol.IopLocNet.Request.RequestTypeCase getRequestTypeCase();
    }

    /**
     * <pre>
     * Requests use semantic versioning (major,minor,patch) represented as a 3 byte array.
     * For more details see the Profile Server protocol definition.
     * NOTE this type also could be part of an IopCommon.proto file.
     * The Location-based Network provides three interfaces, each used by a specific type of clients.
     * One interface is used by local services (e.g. the Profile Server) running on the same host
     * to expose their availability and check the neighbourhood.
     * Another interface is used for communication between nodes to build the network.
     * The third interface is for "end users" (i.e. client programs) to locate nodes and services
     * based on geographical information.
     * The different operation set for each interface is collected under a specific RequestType here.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.Request}
     */
    public static final class Request extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.Request)
            RequestOrBuilder {
        // Use Request.newBuilder() to construct.
        private Request(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Request() {
            version_ = com.google.protobuf.ByteString.EMPTY;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private Request(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {

                            version_ = input.readBytes();
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.Builder subBuilder = null;
                            if (requestTypeCase_ == 2) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_).toBuilder();
                            }
                            requestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_);
                                requestType_ = subBuilder.buildPartial();
                            }
                            requestTypeCase_ = 2;
                            break;
                        }
                        case 26: {
                            org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.Builder subBuilder = null;
                            if (requestTypeCase_ == 3) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_).toBuilder();
                            }
                            requestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_);
                                requestType_ = subBuilder.buildPartial();
                            }
                            requestTypeCase_ = 3;
                            break;
                        }
                        case 34: {
                            org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.Builder subBuilder = null;
                            if (requestTypeCase_ == 4) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_).toBuilder();
                            }
                            requestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_);
                                requestType_ = subBuilder.buildPartial();
                            }
                            requestTypeCase_ = 4;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Request_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Request_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.Request.class, org.libertaria.world.locnet.protocol.IopLocNet.Request.Builder.class);
        }

        private int requestTypeCase_ = 0;
        private java.lang.Object requestType_;

        public enum RequestTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            LOCAL_SERVICE(2),
            REMOTE_NODE(3),
            CLIENT(4),
            REQUESTTYPE_NOT_SET(0);
            private final int value;

            private RequestTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static RequestTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static RequestTypeCase forNumber(int value) {
                switch (value) {
                    case 2:
                        return LOCAL_SERVICE;
                    case 3:
                        return REMOTE_NODE;
                    case 4:
                        return CLIENT;
                    case 0:
                        return REQUESTTYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public RequestTypeCase
        getRequestTypeCase() {
            return RequestTypeCase.forNumber(
                    requestTypeCase_);
        }

        public static final int VERSION_FIELD_NUMBER = 1;
        private com.google.protobuf.ByteString version_;

        /**
         * <code>bytes version = 1;</code>
         */
        public com.google.protobuf.ByteString getVersion() {
            return version_;
        }

        public static final int LOCAL_SERVICE_FIELD_NUMBER = 2;

        /**
         * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest getLocalService() {
            if (requestTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequestOrBuilder getLocalServiceOrBuilder() {
            if (requestTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.getDefaultInstance();
        }

        public static final int REMOTE_NODE_FIELD_NUMBER = 3;

        /**
         * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest getRemoteNode() {
            if (requestTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequestOrBuilder getRemoteNodeOrBuilder() {
            if (requestTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.getDefaultInstance();
        }

        public static final int CLIENT_FIELD_NUMBER = 4;

        /**
         * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest getClient() {
            if (requestTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequestOrBuilder getClientOrBuilder() {
            if (requestTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!version_.isEmpty()) {
                output.writeBytes(1, version_);
            }
            if (requestTypeCase_ == 2) {
                output.writeMessage(2, (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_);
            }
            if (requestTypeCase_ == 3) {
                output.writeMessage(3, (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_);
            }
            if (requestTypeCase_ == 4) {
                output.writeMessage(4, (org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!version_.isEmpty()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, version_);
            }
            if (requestTypeCase_ == 2) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_);
            }
            if (requestTypeCase_ == 3) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_);
            }
            if (requestTypeCase_ == 4) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, (org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.Request)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.Request other = (org.libertaria.world.locnet.protocol.IopLocNet.Request) obj;

            boolean result = true;
            result = result && getVersion()
                    .equals(other.getVersion());
            result = result && getRequestTypeCase().equals(
                    other.getRequestTypeCase());
            if (!result) return false;
            switch (requestTypeCase_) {
                case 2:
                    result = result && getLocalService()
                            .equals(other.getLocalService());
                    break;
                case 3:
                    result = result && getRemoteNode()
                            .equals(other.getRemoteNode());
                    break;
                case 4:
                    result = result && getClient()
                            .equals(other.getClient());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + VERSION_FIELD_NUMBER;
            hash = (53 * hash) + getVersion().hashCode();
            switch (requestTypeCase_) {
                case 2:
                    hash = (37 * hash) + LOCAL_SERVICE_FIELD_NUMBER;
                    hash = (53 * hash) + getLocalService().hashCode();
                    break;
                case 3:
                    hash = (37 * hash) + REMOTE_NODE_FIELD_NUMBER;
                    hash = (53 * hash) + getRemoteNode().hashCode();
                    break;
                case 4:
                    hash = (37 * hash) + CLIENT_FIELD_NUMBER;
                    hash = (53 * hash) + getClient().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.Request prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Requests use semantic versioning (major,minor,patch) represented as a 3 byte array.
         * For more details see the Profile Server protocol definition.
         * NOTE this type also could be part of an IopCommon.proto file.
         * The Location-based Network provides three interfaces, each used by a specific type of clients.
         * One interface is used by local services (e.g. the Profile Server) running on the same host
         * to expose their availability and check the neighbourhood.
         * Another interface is used for communication between nodes to build the network.
         * The third interface is for "end users" (i.e. client programs) to locate nodes and services
         * based on geographical information.
         * The different operation set for each interface is collected under a specific RequestType here.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.Request}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.Request)
                org.libertaria.world.locnet.protocol.IopLocNet.RequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Request_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Request_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.Request.class, org.libertaria.world.locnet.protocol.IopLocNet.Request.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.Request.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                version_ = com.google.protobuf.ByteString.EMPTY;

                requestTypeCase_ = 0;
                requestType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Request_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.Request getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.Request.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.Request build() {
                org.libertaria.world.locnet.protocol.IopLocNet.Request result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.Request buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.Request result = new org.libertaria.world.locnet.protocol.IopLocNet.Request(this);
                result.version_ = version_;
                if (requestTypeCase_ == 2) {
                    if (localServiceBuilder_ == null) {
                        result.requestType_ = requestType_;
                    } else {
                        result.requestType_ = localServiceBuilder_.build();
                    }
                }
                if (requestTypeCase_ == 3) {
                    if (remoteNodeBuilder_ == null) {
                        result.requestType_ = requestType_;
                    } else {
                        result.requestType_ = remoteNodeBuilder_.build();
                    }
                }
                if (requestTypeCase_ == 4) {
                    if (clientBuilder_ == null) {
                        result.requestType_ = requestType_;
                    } else {
                        result.requestType_ = clientBuilder_.build();
                    }
                }
                result.requestTypeCase_ = requestTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.Request) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.Request) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.Request other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.Request.getDefaultInstance())
                    return this;
                if (other.getVersion() != com.google.protobuf.ByteString.EMPTY) {
                    setVersion(other.getVersion());
                }
                switch (other.getRequestTypeCase()) {
                    case LOCAL_SERVICE: {
                        mergeLocalService(other.getLocalService());
                        break;
                    }
                    case REMOTE_NODE: {
                        mergeRemoteNode(other.getRemoteNode());
                        break;
                    }
                    case CLIENT: {
                        mergeClient(other.getClient());
                        break;
                    }
                    case REQUESTTYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.Request parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.Request) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int requestTypeCase_ = 0;
            private java.lang.Object requestType_;

            public RequestTypeCase
            getRequestTypeCase() {
                return RequestTypeCase.forNumber(
                        requestTypeCase_);
            }

            public Builder clearRequestType() {
                requestTypeCase_ = 0;
                requestType_ = null;
                onChanged();
                return this;
            }


            private com.google.protobuf.ByteString version_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>bytes version = 1;</code>
             */
            public com.google.protobuf.ByteString getVersion() {
                return version_;
            }

            /**
             * <code>bytes version = 1;</code>
             */
            public Builder setVersion(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                version_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bytes version = 1;</code>
             */
            public Builder clearVersion() {

                version_ = getDefaultInstance().getVersion();
                onChanged();
                return this;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequestOrBuilder> localServiceBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest getLocalService() {
                if (localServiceBuilder_ == null) {
                    if (requestTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.getDefaultInstance();
                } else {
                    if (requestTypeCase_ == 2) {
                        return localServiceBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
             */
            public Builder setLocalService(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest value) {
                if (localServiceBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    requestType_ = value;
                    onChanged();
                } else {
                    localServiceBuilder_.setMessage(value);
                }
                requestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
             */
            public Builder setLocalService(
                    org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.Builder builderForValue) {
                if (localServiceBuilder_ == null) {
                    requestType_ = builderForValue.build();
                    onChanged();
                } else {
                    localServiceBuilder_.setMessage(builderForValue.build());
                }
                requestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
             */
            public Builder mergeLocalService(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest value) {
                if (localServiceBuilder_ == null) {
                    if (requestTypeCase_ == 2 &&
                            requestType_ != org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.getDefaultInstance()) {
                        requestType_ = org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        requestType_ = value;
                    }
                    onChanged();
                } else {
                    if (requestTypeCase_ == 2) {
                        localServiceBuilder_.mergeFrom(value);
                    }
                    localServiceBuilder_.setMessage(value);
                }
                requestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
             */
            public Builder clearLocalService() {
                if (localServiceBuilder_ == null) {
                    if (requestTypeCase_ == 2) {
                        requestTypeCase_ = 0;
                        requestType_ = null;
                        onChanged();
                    }
                } else {
                    if (requestTypeCase_ == 2) {
                        requestTypeCase_ = 0;
                        requestType_ = null;
                    }
                    localServiceBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.Builder getLocalServiceBuilder() {
                return getLocalServiceFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequestOrBuilder getLocalServiceOrBuilder() {
                if ((requestTypeCase_ == 2) && (localServiceBuilder_ != null)) {
                    return localServiceBuilder_.getMessageOrBuilder();
                } else {
                    if (requestTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceRequest local_service = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequestOrBuilder>
            getLocalServiceFieldBuilder() {
                if (localServiceBuilder_ == null) {
                    if (!(requestTypeCase_ == 2)) {
                        requestType_ = org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.getDefaultInstance();
                    }
                    localServiceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) requestType_,
                            getParentForChildren(),
                            isClean());
                    requestType_ = null;
                }
                requestTypeCase_ = 2;
                onChanged();
                ;
                return localServiceBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequestOrBuilder> remoteNodeBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest getRemoteNode() {
                if (remoteNodeBuilder_ == null) {
                    if (requestTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.getDefaultInstance();
                } else {
                    if (requestTypeCase_ == 3) {
                        return remoteNodeBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
             */
            public Builder setRemoteNode(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest value) {
                if (remoteNodeBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    requestType_ = value;
                    onChanged();
                } else {
                    remoteNodeBuilder_.setMessage(value);
                }
                requestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
             */
            public Builder setRemoteNode(
                    org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.Builder builderForValue) {
                if (remoteNodeBuilder_ == null) {
                    requestType_ = builderForValue.build();
                    onChanged();
                } else {
                    remoteNodeBuilder_.setMessage(builderForValue.build());
                }
                requestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
             */
            public Builder mergeRemoteNode(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest value) {
                if (remoteNodeBuilder_ == null) {
                    if (requestTypeCase_ == 3 &&
                            requestType_ != org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.getDefaultInstance()) {
                        requestType_ = org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        requestType_ = value;
                    }
                    onChanged();
                } else {
                    if (requestTypeCase_ == 3) {
                        remoteNodeBuilder_.mergeFrom(value);
                    }
                    remoteNodeBuilder_.setMessage(value);
                }
                requestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
             */
            public Builder clearRemoteNode() {
                if (remoteNodeBuilder_ == null) {
                    if (requestTypeCase_ == 3) {
                        requestTypeCase_ = 0;
                        requestType_ = null;
                        onChanged();
                    }
                } else {
                    if (requestTypeCase_ == 3) {
                        requestTypeCase_ = 0;
                        requestType_ = null;
                    }
                    remoteNodeBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.Builder getRemoteNodeBuilder() {
                return getRemoteNodeFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequestOrBuilder getRemoteNodeOrBuilder() {
                if ((requestTypeCase_ == 3) && (remoteNodeBuilder_ != null)) {
                    return remoteNodeBuilder_.getMessageOrBuilder();
                } else {
                    if (requestTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeRequest remote_node = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequestOrBuilder>
            getRemoteNodeFieldBuilder() {
                if (remoteNodeBuilder_ == null) {
                    if (!(requestTypeCase_ == 3)) {
                        requestType_ = org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.getDefaultInstance();
                    }
                    remoteNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) requestType_,
                            getParentForChildren(),
                            isClean());
                    requestType_ = null;
                }
                requestTypeCase_ = 3;
                onChanged();
                ;
                return remoteNodeBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest, org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ClientRequestOrBuilder> clientBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest getClient() {
                if (clientBuilder_ == null) {
                    if (requestTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.getDefaultInstance();
                } else {
                    if (requestTypeCase_ == 4) {
                        return clientBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
             */
            public Builder setClient(org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest value) {
                if (clientBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    requestType_ = value;
                    onChanged();
                } else {
                    clientBuilder_.setMessage(value);
                }
                requestTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
             */
            public Builder setClient(
                    org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.Builder builderForValue) {
                if (clientBuilder_ == null) {
                    requestType_ = builderForValue.build();
                    onChanged();
                } else {
                    clientBuilder_.setMessage(builderForValue.build());
                }
                requestTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
             */
            public Builder mergeClient(org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest value) {
                if (clientBuilder_ == null) {
                    if (requestTypeCase_ == 4 &&
                            requestType_ != org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.getDefaultInstance()) {
                        requestType_ = org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        requestType_ = value;
                    }
                    onChanged();
                } else {
                    if (requestTypeCase_ == 4) {
                        clientBuilder_.mergeFrom(value);
                    }
                    clientBuilder_.setMessage(value);
                }
                requestTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
             */
            public Builder clearClient() {
                if (clientBuilder_ == null) {
                    if (requestTypeCase_ == 4) {
                        requestTypeCase_ = 0;
                        requestType_ = null;
                        onChanged();
                    }
                } else {
                    if (requestTypeCase_ == 4) {
                        requestTypeCase_ = 0;
                        requestType_ = null;
                    }
                    clientBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.Builder getClientBuilder() {
                return getClientFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequestOrBuilder getClientOrBuilder() {
                if ((requestTypeCase_ == 4) && (clientBuilder_ != null)) {
                    return clientBuilder_.getMessageOrBuilder();
                } else {
                    if (requestTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientRequest client = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest, org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ClientRequestOrBuilder>
            getClientFieldBuilder() {
                if (clientBuilder_ == null) {
                    if (!(requestTypeCase_ == 4)) {
                        requestType_ = org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.getDefaultInstance();
                    }
                    clientBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest, org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ClientRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) requestType_,
                            getParentForChildren(),
                            isClean());
                    requestType_ = null;
                }
                requestTypeCase_ = 4;
                onChanged();
                ;
                return clientBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.Request)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.Request)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.Request DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.Request();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Request getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Request>
                PARSER = new com.google.protobuf.AbstractParser<Request>() {
            public Request parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Request(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Request> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Request> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.Request getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface ResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.Response)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Status code marking whether the request was successfully served or an error occured.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Status status = 1;</code>
         */
        int getStatusValue();

        /**
         * <pre>
         * Status code marking whether the request was successfully served or an error occured.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Status status = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.Status getStatus();

        /**
         * <pre>
         * NOTE this field was simply kept from IopProfileServer.proto, currently unused, but might be useful implementing security features later.
         * </pre>
         * <p>
         * <code>sint64 timestamp = 2;</code>
         */
        long getTimestamp();

        /**
         * <pre>
         * In case of an error, this field may contain additional details.
         * </pre>
         * <p>
         * <code>string details = 3;</code>
         */
        java.lang.String getDetails();

        /**
         * <pre>
         * In case of an error, this field may contain additional details.
         * </pre>
         * <p>
         * <code>string details = 3;</code>
         */
        com.google.protobuf.ByteString
        getDetailsBytes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse getLocalService();

        /**
         * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponseOrBuilder getLocalServiceOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse getRemoteNode();

        /**
         * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponseOrBuilder getRemoteNodeOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse getClient();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ClientResponseOrBuilder getClientOrBuilder();

        public org.libertaria.world.locnet.protocol.IopLocNet.Response.ResponseTypeCase getResponseTypeCase();
    }

    /**
     * <pre>
     * There must a response for every request. Responses are divided by the interface just like requests.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.Response}
     */
    public static final class Response extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.Response)
            ResponseOrBuilder {
        // Use Response.newBuilder() to construct.
        private Response(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Response() {
            status_ = 0;
            timestamp_ = 0L;
            details_ = "";
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private Response(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            int rawValue = input.readEnum();

                            status_ = rawValue;
                            break;
                        }
                        case 16: {

                            timestamp_ = input.readSInt64();
                            break;
                        }
                        case 26: {
                            java.lang.String s = input.readStringRequireUtf8();

                            details_ = s;
                            break;
                        }
                        case 34: {
                            org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.Builder subBuilder = null;
                            if (responseTypeCase_ == 4) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_).toBuilder();
                            }
                            responseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_);
                                responseType_ = subBuilder.buildPartial();
                            }
                            responseTypeCase_ = 4;
                            break;
                        }
                        case 42: {
                            org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.Builder subBuilder = null;
                            if (responseTypeCase_ == 5) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_).toBuilder();
                            }
                            responseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_);
                                responseType_ = subBuilder.buildPartial();
                            }
                            responseTypeCase_ = 5;
                            break;
                        }
                        case 50: {
                            org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.Builder subBuilder = null;
                            if (responseTypeCase_ == 6) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_).toBuilder();
                            }
                            responseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_);
                                responseType_ = subBuilder.buildPartial();
                            }
                            responseTypeCase_ = 6;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Response_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Response_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.Response.class, org.libertaria.world.locnet.protocol.IopLocNet.Response.Builder.class);
        }

        private int responseTypeCase_ = 0;
        private java.lang.Object responseType_;

        public enum ResponseTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            LOCAL_SERVICE(4),
            REMOTE_NODE(5),
            CLIENT(6),
            RESPONSETYPE_NOT_SET(0);
            private final int value;

            private ResponseTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static ResponseTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static ResponseTypeCase forNumber(int value) {
                switch (value) {
                    case 4:
                        return LOCAL_SERVICE;
                    case 5:
                        return REMOTE_NODE;
                    case 6:
                        return CLIENT;
                    case 0:
                        return RESPONSETYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public ResponseTypeCase
        getResponseTypeCase() {
            return ResponseTypeCase.forNumber(
                    responseTypeCase_);
        }

        public static final int STATUS_FIELD_NUMBER = 1;
        private int status_;

        /**
         * <pre>
         * Status code marking whether the request was successfully served or an error occured.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Status status = 1;</code>
         */
        public int getStatusValue() {
            return status_;
        }

        /**
         * <pre>
         * Status code marking whether the request was successfully served or an error occured.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.Status status = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.Status getStatus() {
            org.libertaria.world.locnet.protocol.IopLocNet.Status result = org.libertaria.world.locnet.protocol.IopLocNet.Status.valueOf(status_);
            return result == null ? org.libertaria.world.locnet.protocol.IopLocNet.Status.UNRECOGNIZED : result;
        }

        public static final int TIMESTAMP_FIELD_NUMBER = 2;
        private long timestamp_;

        /**
         * <pre>
         * NOTE this field was simply kept from IopProfileServer.proto, currently unused, but might be useful implementing security features later.
         * </pre>
         * <p>
         * <code>sint64 timestamp = 2;</code>
         */
        public long getTimestamp() {
            return timestamp_;
        }

        public static final int DETAILS_FIELD_NUMBER = 3;
        private volatile java.lang.Object details_;

        /**
         * <pre>
         * In case of an error, this field may contain additional details.
         * </pre>
         * <p>
         * <code>string details = 3;</code>
         */
        public java.lang.String getDetails() {
            java.lang.Object ref = details_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                details_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * In case of an error, this field may contain additional details.
         * </pre>
         * <p>
         * <code>string details = 3;</code>
         */
        public com.google.protobuf.ByteString
        getDetailsBytes() {
            java.lang.Object ref = details_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                details_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int LOCAL_SERVICE_FIELD_NUMBER = 4;

        /**
         * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse getLocalService() {
            if (responseTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponseOrBuilder getLocalServiceOrBuilder() {
            if (responseTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.getDefaultInstance();
        }

        public static final int REMOTE_NODE_FIELD_NUMBER = 5;

        /**
         * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse getRemoteNode() {
            if (responseTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponseOrBuilder getRemoteNodeOrBuilder() {
            if (responseTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.getDefaultInstance();
        }

        public static final int CLIENT_FIELD_NUMBER = 6;

        /**
         * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse getClient() {
            if (responseTypeCase_ == 6) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponseOrBuilder getClientOrBuilder() {
            if (responseTypeCase_ == 6) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (status_ != org.libertaria.world.locnet.protocol.IopLocNet.Status.STATUS_OK.getNumber()) {
                output.writeEnum(1, status_);
            }
            if (timestamp_ != 0L) {
                output.writeSInt64(2, timestamp_);
            }
            if (!getDetailsBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 3, details_);
            }
            if (responseTypeCase_ == 4) {
                output.writeMessage(4, (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_);
            }
            if (responseTypeCase_ == 5) {
                output.writeMessage(5, (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_);
            }
            if (responseTypeCase_ == 6) {
                output.writeMessage(6, (org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (status_ != org.libertaria.world.locnet.protocol.IopLocNet.Status.STATUS_OK.getNumber()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(1, status_);
            }
            if (timestamp_ != 0L) {
                size += com.google.protobuf.CodedOutputStream
                        .computeSInt64Size(2, timestamp_);
            }
            if (!getDetailsBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, details_);
            }
            if (responseTypeCase_ == 4) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_);
            }
            if (responseTypeCase_ == 5) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_);
            }
            if (responseTypeCase_ == 6) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(6, (org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.Response)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.Response other = (org.libertaria.world.locnet.protocol.IopLocNet.Response) obj;

            boolean result = true;
            result = result && status_ == other.status_;
            result = result && (getTimestamp()
                    == other.getTimestamp());
            result = result && getDetails()
                    .equals(other.getDetails());
            result = result && getResponseTypeCase().equals(
                    other.getResponseTypeCase());
            if (!result) return false;
            switch (responseTypeCase_) {
                case 4:
                    result = result && getLocalService()
                            .equals(other.getLocalService());
                    break;
                case 5:
                    result = result && getRemoteNode()
                            .equals(other.getRemoteNode());
                    break;
                case 6:
                    result = result && getClient()
                            .equals(other.getClient());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + STATUS_FIELD_NUMBER;
            hash = (53 * hash) + status_;
            hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                    getTimestamp());
            hash = (37 * hash) + DETAILS_FIELD_NUMBER;
            hash = (53 * hash) + getDetails().hashCode();
            switch (responseTypeCase_) {
                case 4:
                    hash = (37 * hash) + LOCAL_SERVICE_FIELD_NUMBER;
                    hash = (53 * hash) + getLocalService().hashCode();
                    break;
                case 5:
                    hash = (37 * hash) + REMOTE_NODE_FIELD_NUMBER;
                    hash = (53 * hash) + getRemoteNode().hashCode();
                    break;
                case 6:
                    hash = (37 * hash) + CLIENT_FIELD_NUMBER;
                    hash = (53 * hash) + getClient().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.Response prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * There must a response for every request. Responses are divided by the interface just like requests.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.Response}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.Response)
                org.libertaria.world.locnet.protocol.IopLocNet.ResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Response_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Response_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.Response.class, org.libertaria.world.locnet.protocol.IopLocNet.Response.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.Response.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                status_ = 0;

                timestamp_ = 0L;

                details_ = "";

                responseTypeCase_ = 0;
                responseType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_Response_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.Response getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.Response.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.Response build() {
                org.libertaria.world.locnet.protocol.IopLocNet.Response result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.Response buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.Response result = new org.libertaria.world.locnet.protocol.IopLocNet.Response(this);
                result.status_ = status_;
                result.timestamp_ = timestamp_;
                result.details_ = details_;
                if (responseTypeCase_ == 4) {
                    if (localServiceBuilder_ == null) {
                        result.responseType_ = responseType_;
                    } else {
                        result.responseType_ = localServiceBuilder_.build();
                    }
                }
                if (responseTypeCase_ == 5) {
                    if (remoteNodeBuilder_ == null) {
                        result.responseType_ = responseType_;
                    } else {
                        result.responseType_ = remoteNodeBuilder_.build();
                    }
                }
                if (responseTypeCase_ == 6) {
                    if (clientBuilder_ == null) {
                        result.responseType_ = responseType_;
                    } else {
                        result.responseType_ = clientBuilder_.build();
                    }
                }
                result.responseTypeCase_ = responseTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.Response) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.Response) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.Response other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.Response.getDefaultInstance())
                    return this;
                if (other.status_ != 0) {
                    setStatusValue(other.getStatusValue());
                }
                if (other.getTimestamp() != 0L) {
                    setTimestamp(other.getTimestamp());
                }
                if (!other.getDetails().isEmpty()) {
                    details_ = other.details_;
                    onChanged();
                }
                switch (other.getResponseTypeCase()) {
                    case LOCAL_SERVICE: {
                        mergeLocalService(other.getLocalService());
                        break;
                    }
                    case REMOTE_NODE: {
                        mergeRemoteNode(other.getRemoteNode());
                        break;
                    }
                    case CLIENT: {
                        mergeClient(other.getClient());
                        break;
                    }
                    case RESPONSETYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.Response parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.Response) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int responseTypeCase_ = 0;
            private java.lang.Object responseType_;

            public ResponseTypeCase
            getResponseTypeCase() {
                return ResponseTypeCase.forNumber(
                        responseTypeCase_);
            }

            public Builder clearResponseType() {
                responseTypeCase_ = 0;
                responseType_ = null;
                onChanged();
                return this;
            }


            private int status_ = 0;

            /**
             * <pre>
             * Status code marking whether the request was successfully served or an error occured.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Status status = 1;</code>
             */
            public int getStatusValue() {
                return status_;
            }

            /**
             * <pre>
             * Status code marking whether the request was successfully served or an error occured.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Status status = 1;</code>
             */
            public Builder setStatusValue(int value) {
                status_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Status code marking whether the request was successfully served or an error occured.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Status status = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.Status getStatus() {
                org.libertaria.world.locnet.protocol.IopLocNet.Status result = org.libertaria.world.locnet.protocol.IopLocNet.Status.valueOf(status_);
                return result == null ? org.libertaria.world.locnet.protocol.IopLocNet.Status.UNRECOGNIZED : result;
            }

            /**
             * <pre>
             * Status code marking whether the request was successfully served or an error occured.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Status status = 1;</code>
             */
            public Builder setStatus(org.libertaria.world.locnet.protocol.IopLocNet.Status value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                status_ = value.getNumber();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Status code marking whether the request was successfully served or an error occured.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.Status status = 1;</code>
             */
            public Builder clearStatus() {

                status_ = 0;
                onChanged();
                return this;
            }

            private long timestamp_;

            /**
             * <pre>
             * NOTE this field was simply kept from IopProfileServer.proto, currently unused, but might be useful implementing security features later.
             * </pre>
             * <p>
             * <code>sint64 timestamp = 2;</code>
             */
            public long getTimestamp() {
                return timestamp_;
            }

            /**
             * <pre>
             * NOTE this field was simply kept from IopProfileServer.proto, currently unused, but might be useful implementing security features later.
             * </pre>
             * <p>
             * <code>sint64 timestamp = 2;</code>
             */
            public Builder setTimestamp(long value) {

                timestamp_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * NOTE this field was simply kept from IopProfileServer.proto, currently unused, but might be useful implementing security features later.
             * </pre>
             * <p>
             * <code>sint64 timestamp = 2;</code>
             */
            public Builder clearTimestamp() {

                timestamp_ = 0L;
                onChanged();
                return this;
            }

            private java.lang.Object details_ = "";

            /**
             * <pre>
             * In case of an error, this field may contain additional details.
             * </pre>
             * <p>
             * <code>string details = 3;</code>
             */
            public java.lang.String getDetails() {
                java.lang.Object ref = details_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    details_ = s;
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <pre>
             * In case of an error, this field may contain additional details.
             * </pre>
             * <p>
             * <code>string details = 3;</code>
             */
            public com.google.protobuf.ByteString
            getDetailsBytes() {
                java.lang.Object ref = details_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    details_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * In case of an error, this field may contain additional details.
             * </pre>
             * <p>
             * <code>string details = 3;</code>
             */
            public Builder setDetails(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                details_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * In case of an error, this field may contain additional details.
             * </pre>
             * <p>
             * <code>string details = 3;</code>
             */
            public Builder clearDetails() {

                details_ = getDefaultInstance().getDetails();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * In case of an error, this field may contain additional details.
             * </pre>
             * <p>
             * <code>string details = 3;</code>
             */
            public Builder setDetailsBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                details_ = value;
                onChanged();
                return this;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponseOrBuilder> localServiceBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse getLocalService() {
                if (localServiceBuilder_ == null) {
                    if (responseTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.getDefaultInstance();
                } else {
                    if (responseTypeCase_ == 4) {
                        return localServiceBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
             */
            public Builder setLocalService(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse value) {
                if (localServiceBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    responseType_ = value;
                    onChanged();
                } else {
                    localServiceBuilder_.setMessage(value);
                }
                responseTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
             */
            public Builder setLocalService(
                    org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.Builder builderForValue) {
                if (localServiceBuilder_ == null) {
                    responseType_ = builderForValue.build();
                    onChanged();
                } else {
                    localServiceBuilder_.setMessage(builderForValue.build());
                }
                responseTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
             */
            public Builder mergeLocalService(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse value) {
                if (localServiceBuilder_ == null) {
                    if (responseTypeCase_ == 4 &&
                            responseType_ != org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.getDefaultInstance()) {
                        responseType_ = org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        responseType_ = value;
                    }
                    onChanged();
                } else {
                    if (responseTypeCase_ == 4) {
                        localServiceBuilder_.mergeFrom(value);
                    }
                    localServiceBuilder_.setMessage(value);
                }
                responseTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
             */
            public Builder clearLocalService() {
                if (localServiceBuilder_ == null) {
                    if (responseTypeCase_ == 4) {
                        responseTypeCase_ = 0;
                        responseType_ = null;
                        onChanged();
                    }
                } else {
                    if (responseTypeCase_ == 4) {
                        responseTypeCase_ = 0;
                        responseType_ = null;
                    }
                    localServiceBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.Builder getLocalServiceBuilder() {
                return getLocalServiceFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponseOrBuilder getLocalServiceOrBuilder() {
                if ((responseTypeCase_ == 4) && (localServiceBuilder_ != null)) {
                    return localServiceBuilder_.getMessageOrBuilder();
                } else {
                    if (responseTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.LocalServiceResponse local_service = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponseOrBuilder>
            getLocalServiceFieldBuilder() {
                if (localServiceBuilder_ == null) {
                    if (!(responseTypeCase_ == 4)) {
                        responseType_ = org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.getDefaultInstance();
                    }
                    localServiceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) responseType_,
                            getParentForChildren(),
                            isClean());
                    responseType_ = null;
                }
                responseTypeCase_ = 4;
                onChanged();
                ;
                return localServiceBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponseOrBuilder> remoteNodeBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse getRemoteNode() {
                if (remoteNodeBuilder_ == null) {
                    if (responseTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.getDefaultInstance();
                } else {
                    if (responseTypeCase_ == 5) {
                        return remoteNodeBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
             */
            public Builder setRemoteNode(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse value) {
                if (remoteNodeBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    responseType_ = value;
                    onChanged();
                } else {
                    remoteNodeBuilder_.setMessage(value);
                }
                responseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
             */
            public Builder setRemoteNode(
                    org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.Builder builderForValue) {
                if (remoteNodeBuilder_ == null) {
                    responseType_ = builderForValue.build();
                    onChanged();
                } else {
                    remoteNodeBuilder_.setMessage(builderForValue.build());
                }
                responseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
             */
            public Builder mergeRemoteNode(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse value) {
                if (remoteNodeBuilder_ == null) {
                    if (responseTypeCase_ == 5 &&
                            responseType_ != org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.getDefaultInstance()) {
                        responseType_ = org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        responseType_ = value;
                    }
                    onChanged();
                } else {
                    if (responseTypeCase_ == 5) {
                        remoteNodeBuilder_.mergeFrom(value);
                    }
                    remoteNodeBuilder_.setMessage(value);
                }
                responseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
             */
            public Builder clearRemoteNode() {
                if (remoteNodeBuilder_ == null) {
                    if (responseTypeCase_ == 5) {
                        responseTypeCase_ = 0;
                        responseType_ = null;
                        onChanged();
                    }
                } else {
                    if (responseTypeCase_ == 5) {
                        responseTypeCase_ = 0;
                        responseType_ = null;
                    }
                    remoteNodeBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.Builder getRemoteNodeBuilder() {
                return getRemoteNodeFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponseOrBuilder getRemoteNodeOrBuilder() {
                if ((responseTypeCase_ == 5) && (remoteNodeBuilder_ != null)) {
                    return remoteNodeBuilder_.getMessageOrBuilder();
                } else {
                    if (responseTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.RemoteNodeResponse remote_node = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponseOrBuilder>
            getRemoteNodeFieldBuilder() {
                if (remoteNodeBuilder_ == null) {
                    if (!(responseTypeCase_ == 5)) {
                        responseType_ = org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.getDefaultInstance();
                    }
                    remoteNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) responseType_,
                            getParentForChildren(),
                            isClean());
                    responseType_ = null;
                }
                responseTypeCase_ = 5;
                onChanged();
                ;
                return remoteNodeBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse, org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ClientResponseOrBuilder> clientBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse getClient() {
                if (clientBuilder_ == null) {
                    if (responseTypeCase_ == 6) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.getDefaultInstance();
                } else {
                    if (responseTypeCase_ == 6) {
                        return clientBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
             */
            public Builder setClient(org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse value) {
                if (clientBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    responseType_ = value;
                    onChanged();
                } else {
                    clientBuilder_.setMessage(value);
                }
                responseTypeCase_ = 6;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
             */
            public Builder setClient(
                    org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.Builder builderForValue) {
                if (clientBuilder_ == null) {
                    responseType_ = builderForValue.build();
                    onChanged();
                } else {
                    clientBuilder_.setMessage(builderForValue.build());
                }
                responseTypeCase_ = 6;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
             */
            public Builder mergeClient(org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse value) {
                if (clientBuilder_ == null) {
                    if (responseTypeCase_ == 6 &&
                            responseType_ != org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.getDefaultInstance()) {
                        responseType_ = org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        responseType_ = value;
                    }
                    onChanged();
                } else {
                    if (responseTypeCase_ == 6) {
                        clientBuilder_.mergeFrom(value);
                    }
                    clientBuilder_.setMessage(value);
                }
                responseTypeCase_ = 6;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
             */
            public Builder clearClient() {
                if (clientBuilder_ == null) {
                    if (responseTypeCase_ == 6) {
                        responseTypeCase_ = 0;
                        responseType_ = null;
                        onChanged();
                    }
                } else {
                    if (responseTypeCase_ == 6) {
                        responseTypeCase_ = 0;
                        responseType_ = null;
                    }
                    clientBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.Builder getClientBuilder() {
                return getClientFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponseOrBuilder getClientOrBuilder() {
                if ((responseTypeCase_ == 6) && (clientBuilder_ != null)) {
                    return clientBuilder_.getMessageOrBuilder();
                } else {
                    if (responseTypeCase_ == 6) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ClientResponse client = 6;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse, org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ClientResponseOrBuilder>
            getClientFieldBuilder() {
                if (clientBuilder_ == null) {
                    if (!(responseTypeCase_ == 6)) {
                        responseType_ = org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.getDefaultInstance();
                    }
                    clientBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse, org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ClientResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) responseType_,
                            getParentForChildren(),
                            isClean());
                    responseType_ = null;
                }
                responseTypeCase_ = 6;
                onChanged();
                ;
                return clientBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.Response)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.Response)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.Response DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.Response();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.Response getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Response>
                PARSER = new com.google.protobuf.AbstractParser<Response>() {
            public Response parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Response(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Response> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Response> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.Response getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface LocalServiceRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.LocalServiceRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * These requests are sent as usual from the client to the server asking to perform an operation.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest getRegisterService();

        /**
         * <pre>
         * These requests are sent as usual from the client to the server asking to perform an operation.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequestOrBuilder getRegisterServiceOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest getDeregisterService();

        /**
         * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequestOrBuilder getDeregisterServiceOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest getGetNeighbourNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequestOrBuilder getGetNeighbourNodesOrBuilder();

        /**
         * <pre>
         * This is an unique, exceptional request. If the client previously sent
         * a get_neighbour_nodes request to the server and set the keep_alive flag,
         * the server is supposed to keep the connection alive and notify the client
         * about changes in its neigbhourhood by sending the following request to the client.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest getNeighbourhoodChanged();

        /**
         * <pre>
         * This is an unique, exceptional request. If the client previously sent
         * a get_neighbour_nodes request to the server and set the keep_alive flag,
         * the server is supposed to keep the connection alive and notify the client
         * about changes in its neigbhourhood by sending the following request to the client.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequestOrBuilder getNeighbourhoodChangedOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getGetNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder getGetNodeInfoOrBuilder();

        public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.LocalServiceRequestTypeCase getLocalServiceRequestTypeCase();
    }

    /**
     * <pre>
     * Distinct operations of the local service interface.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.LocalServiceRequest}
     */
    public static final class LocalServiceRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.LocalServiceRequest)
            LocalServiceRequestOrBuilder {
        // Use LocalServiceRequest.newBuilder() to construct.
        private LocalServiceRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private LocalServiceRequest() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private LocalServiceRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.Builder subBuilder = null;
                            if (localServiceRequestTypeCase_ == 1) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_).toBuilder();
                            }
                            localServiceRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_);
                                localServiceRequestType_ = subBuilder.buildPartial();
                            }
                            localServiceRequestTypeCase_ = 1;
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.Builder subBuilder = null;
                            if (localServiceRequestTypeCase_ == 2) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_).toBuilder();
                            }
                            localServiceRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_);
                                localServiceRequestType_ = subBuilder.buildPartial();
                            }
                            localServiceRequestTypeCase_ = 2;
                            break;
                        }
                        case 26: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.Builder subBuilder = null;
                            if (localServiceRequestTypeCase_ == 3) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_).toBuilder();
                            }
                            localServiceRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_);
                                localServiceRequestType_ = subBuilder.buildPartial();
                            }
                            localServiceRequestTypeCase_ = 3;
                            break;
                        }
                        case 34: {
                            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.Builder subBuilder = null;
                            if (localServiceRequestTypeCase_ == 4) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_).toBuilder();
                            }
                            localServiceRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_);
                                localServiceRequestType_ = subBuilder.buildPartial();
                            }
                            localServiceRequestTypeCase_ = 4;
                            break;
                        }
                        case 42: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder subBuilder = null;
                            if (localServiceRequestTypeCase_ == 5) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_).toBuilder();
                            }
                            localServiceRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_);
                                localServiceRequestType_ = subBuilder.buildPartial();
                            }
                            localServiceRequestTypeCase_ = 5;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.Builder.class);
        }

        private int localServiceRequestTypeCase_ = 0;
        private java.lang.Object localServiceRequestType_;

        public enum LocalServiceRequestTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            REGISTER_SERVICE(1),
            DEREGISTER_SERVICE(2),
            GET_NEIGHBOUR_NODES(3),
            NEIGHBOURHOOD_CHANGED(4),
            GET_NODE_INFO(5),
            LOCALSERVICEREQUESTTYPE_NOT_SET(0);
            private final int value;

            private LocalServiceRequestTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static LocalServiceRequestTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static LocalServiceRequestTypeCase forNumber(int value) {
                switch (value) {
                    case 1:
                        return REGISTER_SERVICE;
                    case 2:
                        return DEREGISTER_SERVICE;
                    case 3:
                        return GET_NEIGHBOUR_NODES;
                    case 4:
                        return NEIGHBOURHOOD_CHANGED;
                    case 5:
                        return GET_NODE_INFO;
                    case 0:
                        return LOCALSERVICEREQUESTTYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public LocalServiceRequestTypeCase
        getLocalServiceRequestTypeCase() {
            return LocalServiceRequestTypeCase.forNumber(
                    localServiceRequestTypeCase_);
        }

        public static final int REGISTER_SERVICE_FIELD_NUMBER = 1;

        /**
         * <pre>
         * These requests are sent as usual from the client to the server asking to perform an operation.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest getRegisterService() {
            if (localServiceRequestTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.getDefaultInstance();
        }

        /**
         * <pre>
         * These requests are sent as usual from the client to the server asking to perform an operation.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequestOrBuilder getRegisterServiceOrBuilder() {
            if (localServiceRequestTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.getDefaultInstance();
        }

        public static final int DEREGISTER_SERVICE_FIELD_NUMBER = 2;

        /**
         * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest getDeregisterService() {
            if (localServiceRequestTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequestOrBuilder getDeregisterServiceOrBuilder() {
            if (localServiceRequestTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.getDefaultInstance();
        }

        public static final int GET_NEIGHBOUR_NODES_FIELD_NUMBER = 3;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest getGetNeighbourNodes() {
            if (localServiceRequestTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequestOrBuilder getGetNeighbourNodesOrBuilder() {
            if (localServiceRequestTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.getDefaultInstance();
        }

        public static final int NEIGHBOURHOOD_CHANGED_FIELD_NUMBER = 4;

        /**
         * <pre>
         * This is an unique, exceptional request. If the client previously sent
         * a get_neighbour_nodes request to the server and set the keep_alive flag,
         * the server is supposed to keep the connection alive and notify the client
         * about changes in its neigbhourhood by sending the following request to the client.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest getNeighbourhoodChanged() {
            if (localServiceRequestTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.getDefaultInstance();
        }

        /**
         * <pre>
         * This is an unique, exceptional request. If the client previously sent
         * a get_neighbour_nodes request to the server and set the keep_alive flag,
         * the server is supposed to keep the connection alive and notify the client
         * about changes in its neigbhourhood by sending the following request to the client.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequestOrBuilder getNeighbourhoodChangedOrBuilder() {
            if (localServiceRequestTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.getDefaultInstance();
        }

        public static final int GET_NODE_INFO_FIELD_NUMBER = 5;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getGetNodeInfo() {
            if (localServiceRequestTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder getGetNodeInfoOrBuilder() {
            if (localServiceRequestTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (localServiceRequestTypeCase_ == 1) {
                output.writeMessage(1, (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_);
            }
            if (localServiceRequestTypeCase_ == 2) {
                output.writeMessage(2, (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_);
            }
            if (localServiceRequestTypeCase_ == 3) {
                output.writeMessage(3, (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_);
            }
            if (localServiceRequestTypeCase_ == 4) {
                output.writeMessage(4, (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_);
            }
            if (localServiceRequestTypeCase_ == 5) {
                output.writeMessage(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (localServiceRequestTypeCase_ == 1) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_);
            }
            if (localServiceRequestTypeCase_ == 2) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_);
            }
            if (localServiceRequestTypeCase_ == 3) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_);
            }
            if (localServiceRequestTypeCase_ == 4) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_);
            }
            if (localServiceRequestTypeCase_ == 5) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) obj;

            boolean result = true;
            result = result && getLocalServiceRequestTypeCase().equals(
                    other.getLocalServiceRequestTypeCase());
            if (!result) return false;
            switch (localServiceRequestTypeCase_) {
                case 1:
                    result = result && getRegisterService()
                            .equals(other.getRegisterService());
                    break;
                case 2:
                    result = result && getDeregisterService()
                            .equals(other.getDeregisterService());
                    break;
                case 3:
                    result = result && getGetNeighbourNodes()
                            .equals(other.getGetNeighbourNodes());
                    break;
                case 4:
                    result = result && getNeighbourhoodChanged()
                            .equals(other.getNeighbourhoodChanged());
                    break;
                case 5:
                    result = result && getGetNodeInfo()
                            .equals(other.getGetNodeInfo());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            switch (localServiceRequestTypeCase_) {
                case 1:
                    hash = (37 * hash) + REGISTER_SERVICE_FIELD_NUMBER;
                    hash = (53 * hash) + getRegisterService().hashCode();
                    break;
                case 2:
                    hash = (37 * hash) + DEREGISTER_SERVICE_FIELD_NUMBER;
                    hash = (53 * hash) + getDeregisterService().hashCode();
                    break;
                case 3:
                    hash = (37 * hash) + GET_NEIGHBOUR_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNeighbourNodes().hashCode();
                    break;
                case 4:
                    hash = (37 * hash) + NEIGHBOURHOOD_CHANGED_FIELD_NUMBER;
                    hash = (53 * hash) + getNeighbourhoodChanged().hashCode();
                    break;
                case 5:
                    hash = (37 * hash) + GET_NODE_INFO_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNodeInfo().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Distinct operations of the local service interface.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.LocalServiceRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.LocalServiceRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                localServiceRequestTypeCase_ = 0;
                localServiceRequestType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest(this);
                if (localServiceRequestTypeCase_ == 1) {
                    if (registerServiceBuilder_ == null) {
                        result.localServiceRequestType_ = localServiceRequestType_;
                    } else {
                        result.localServiceRequestType_ = registerServiceBuilder_.build();
                    }
                }
                if (localServiceRequestTypeCase_ == 2) {
                    if (deregisterServiceBuilder_ == null) {
                        result.localServiceRequestType_ = localServiceRequestType_;
                    } else {
                        result.localServiceRequestType_ = deregisterServiceBuilder_.build();
                    }
                }
                if (localServiceRequestTypeCase_ == 3) {
                    if (getNeighbourNodesBuilder_ == null) {
                        result.localServiceRequestType_ = localServiceRequestType_;
                    } else {
                        result.localServiceRequestType_ = getNeighbourNodesBuilder_.build();
                    }
                }
                if (localServiceRequestTypeCase_ == 4) {
                    if (neighbourhoodChangedBuilder_ == null) {
                        result.localServiceRequestType_ = localServiceRequestType_;
                    } else {
                        result.localServiceRequestType_ = neighbourhoodChangedBuilder_.build();
                    }
                }
                if (localServiceRequestTypeCase_ == 5) {
                    if (getNodeInfoBuilder_ == null) {
                        result.localServiceRequestType_ = localServiceRequestType_;
                    } else {
                        result.localServiceRequestType_ = getNodeInfoBuilder_.build();
                    }
                }
                result.localServiceRequestTypeCase_ = localServiceRequestTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest.getDefaultInstance())
                    return this;
                switch (other.getLocalServiceRequestTypeCase()) {
                    case REGISTER_SERVICE: {
                        mergeRegisterService(other.getRegisterService());
                        break;
                    }
                    case DEREGISTER_SERVICE: {
                        mergeDeregisterService(other.getDeregisterService());
                        break;
                    }
                    case GET_NEIGHBOUR_NODES: {
                        mergeGetNeighbourNodes(other.getGetNeighbourNodes());
                        break;
                    }
                    case NEIGHBOURHOOD_CHANGED: {
                        mergeNeighbourhoodChanged(other.getNeighbourhoodChanged());
                        break;
                    }
                    case GET_NODE_INFO: {
                        mergeGetNodeInfo(other.getGetNodeInfo());
                        break;
                    }
                    case LOCALSERVICEREQUESTTYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int localServiceRequestTypeCase_ = 0;
            private java.lang.Object localServiceRequestType_;

            public LocalServiceRequestTypeCase
            getLocalServiceRequestTypeCase() {
                return LocalServiceRequestTypeCase.forNumber(
                        localServiceRequestTypeCase_);
            }

            public Builder clearLocalServiceRequestType() {
                localServiceRequestTypeCase_ = 0;
                localServiceRequestType_ = null;
                onChanged();
                return this;
            }


            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequestOrBuilder> registerServiceBuilder_;

            /**
             * <pre>
             * These requests are sent as usual from the client to the server asking to perform an operation.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest getRegisterService() {
                if (registerServiceBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.getDefaultInstance();
                } else {
                    if (localServiceRequestTypeCase_ == 1) {
                        return registerServiceBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.getDefaultInstance();
                }
            }

            /**
             * <pre>
             * These requests are sent as usual from the client to the server asking to perform an operation.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
             */
            public Builder setRegisterService(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest value) {
                if (registerServiceBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceRequestType_ = value;
                    onChanged();
                } else {
                    registerServiceBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 1;
                return this;
            }

            /**
             * <pre>
             * These requests are sent as usual from the client to the server asking to perform an operation.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
             */
            public Builder setRegisterService(
                    org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.Builder builderForValue) {
                if (registerServiceBuilder_ == null) {
                    localServiceRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    registerServiceBuilder_.setMessage(builderForValue.build());
                }
                localServiceRequestTypeCase_ = 1;
                return this;
            }

            /**
             * <pre>
             * These requests are sent as usual from the client to the server asking to perform an operation.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
             */
            public Builder mergeRegisterService(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest value) {
                if (registerServiceBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 1 &&
                            localServiceRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.getDefaultInstance()) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceRequestTypeCase_ == 1) {
                        registerServiceBuilder_.mergeFrom(value);
                    }
                    registerServiceBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 1;
                return this;
            }

            /**
             * <pre>
             * These requests are sent as usual from the client to the server asking to perform an operation.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
             */
            public Builder clearRegisterService() {
                if (registerServiceBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 1) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceRequestTypeCase_ == 1) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                    }
                    registerServiceBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * These requests are sent as usual from the client to the server asking to perform an operation.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.Builder getRegisterServiceBuilder() {
                return getRegisterServiceFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * These requests are sent as usual from the client to the server asking to perform an operation.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequestOrBuilder getRegisterServiceOrBuilder() {
                if ((localServiceRequestTypeCase_ == 1) && (registerServiceBuilder_ != null)) {
                    return registerServiceBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceRequestTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.getDefaultInstance();
                }
            }

            /**
             * <pre>
             * These requests are sent as usual from the client to the server asking to perform an operation.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceRequest register_service = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequestOrBuilder>
            getRegisterServiceFieldBuilder() {
                if (registerServiceBuilder_ == null) {
                    if (!(localServiceRequestTypeCase_ == 1)) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.getDefaultInstance();
                    }
                    registerServiceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) localServiceRequestType_,
                            getParentForChildren(),
                            isClean());
                    localServiceRequestType_ = null;
                }
                localServiceRequestTypeCase_ = 1;
                onChanged();
                ;
                return registerServiceBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequestOrBuilder> deregisterServiceBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest getDeregisterService() {
                if (deregisterServiceBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.getDefaultInstance();
                } else {
                    if (localServiceRequestTypeCase_ == 2) {
                        return deregisterServiceBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
             */
            public Builder setDeregisterService(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest value) {
                if (deregisterServiceBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceRequestType_ = value;
                    onChanged();
                } else {
                    deregisterServiceBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
             */
            public Builder setDeregisterService(
                    org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.Builder builderForValue) {
                if (deregisterServiceBuilder_ == null) {
                    localServiceRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    deregisterServiceBuilder_.setMessage(builderForValue.build());
                }
                localServiceRequestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
             */
            public Builder mergeDeregisterService(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest value) {
                if (deregisterServiceBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 2 &&
                            localServiceRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.getDefaultInstance()) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceRequestTypeCase_ == 2) {
                        deregisterServiceBuilder_.mergeFrom(value);
                    }
                    deregisterServiceBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
             */
            public Builder clearDeregisterService() {
                if (deregisterServiceBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 2) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceRequestTypeCase_ == 2) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                    }
                    deregisterServiceBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.Builder getDeregisterServiceBuilder() {
                return getDeregisterServiceFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequestOrBuilder getDeregisterServiceOrBuilder() {
                if ((localServiceRequestTypeCase_ == 2) && (deregisterServiceBuilder_ != null)) {
                    return deregisterServiceBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceRequestTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceRequest deregister_service = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequestOrBuilder>
            getDeregisterServiceFieldBuilder() {
                if (deregisterServiceBuilder_ == null) {
                    if (!(localServiceRequestTypeCase_ == 2)) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.getDefaultInstance();
                    }
                    deregisterServiceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) localServiceRequestType_,
                            getParentForChildren(),
                            isClean());
                    localServiceRequestType_ = null;
                }
                localServiceRequestTypeCase_ = 2;
                onChanged();
                ;
                return deregisterServiceBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequestOrBuilder> getNeighbourNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest getGetNeighbourNodes() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.getDefaultInstance();
                } else {
                    if (localServiceRequestTypeCase_ == 3) {
                        return getNeighbourNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
             */
            public Builder setGetNeighbourNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest value) {
                if (getNeighbourNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceRequestType_ = value;
                    onChanged();
                } else {
                    getNeighbourNodesBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
             */
            public Builder setGetNeighbourNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.Builder builderForValue) {
                if (getNeighbourNodesBuilder_ == null) {
                    localServiceRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNeighbourNodesBuilder_.setMessage(builderForValue.build());
                }
                localServiceRequestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
             */
            public Builder mergeGetNeighbourNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest value) {
                if (getNeighbourNodesBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 3 &&
                            localServiceRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.getDefaultInstance()) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceRequestTypeCase_ == 3) {
                        getNeighbourNodesBuilder_.mergeFrom(value);
                    }
                    getNeighbourNodesBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
             */
            public Builder clearGetNeighbourNodes() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 3) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceRequestTypeCase_ == 3) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                    }
                    getNeighbourNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.Builder getGetNeighbourNodesBuilder() {
                return getGetNeighbourNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequestOrBuilder getGetNeighbourNodesOrBuilder() {
                if ((localServiceRequestTypeCase_ == 3) && (getNeighbourNodesBuilder_ != null)) {
                    return getNeighbourNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceRequestTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest get_neighbour_nodes = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequestOrBuilder>
            getGetNeighbourNodesFieldBuilder() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (!(localServiceRequestTypeCase_ == 3)) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.getDefaultInstance();
                    }
                    getNeighbourNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) localServiceRequestType_,
                            getParentForChildren(),
                            isClean());
                    localServiceRequestType_ = null;
                }
                localServiceRequestTypeCase_ = 3;
                onChanged();
                ;
                return getNeighbourNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequestOrBuilder> neighbourhoodChangedBuilder_;

            /**
             * <pre>
             * This is an unique, exceptional request. If the client previously sent
             * a get_neighbour_nodes request to the server and set the keep_alive flag,
             * the server is supposed to keep the connection alive and notify the client
             * about changes in its neigbhourhood by sending the following request to the client.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest getNeighbourhoodChanged() {
                if (neighbourhoodChangedBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.getDefaultInstance();
                } else {
                    if (localServiceRequestTypeCase_ == 4) {
                        return neighbourhoodChangedBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.getDefaultInstance();
                }
            }

            /**
             * <pre>
             * This is an unique, exceptional request. If the client previously sent
             * a get_neighbour_nodes request to the server and set the keep_alive flag,
             * the server is supposed to keep the connection alive and notify the client
             * about changes in its neigbhourhood by sending the following request to the client.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
             */
            public Builder setNeighbourhoodChanged(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest value) {
                if (neighbourhoodChangedBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceRequestType_ = value;
                    onChanged();
                } else {
                    neighbourhoodChangedBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 4;
                return this;
            }

            /**
             * <pre>
             * This is an unique, exceptional request. If the client previously sent
             * a get_neighbour_nodes request to the server and set the keep_alive flag,
             * the server is supposed to keep the connection alive and notify the client
             * about changes in its neigbhourhood by sending the following request to the client.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
             */
            public Builder setNeighbourhoodChanged(
                    org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.Builder builderForValue) {
                if (neighbourhoodChangedBuilder_ == null) {
                    localServiceRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    neighbourhoodChangedBuilder_.setMessage(builderForValue.build());
                }
                localServiceRequestTypeCase_ = 4;
                return this;
            }

            /**
             * <pre>
             * This is an unique, exceptional request. If the client previously sent
             * a get_neighbour_nodes request to the server and set the keep_alive flag,
             * the server is supposed to keep the connection alive and notify the client
             * about changes in its neigbhourhood by sending the following request to the client.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
             */
            public Builder mergeNeighbourhoodChanged(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest value) {
                if (neighbourhoodChangedBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 4 &&
                            localServiceRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.getDefaultInstance()) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceRequestTypeCase_ == 4) {
                        neighbourhoodChangedBuilder_.mergeFrom(value);
                    }
                    neighbourhoodChangedBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 4;
                return this;
            }

            /**
             * <pre>
             * This is an unique, exceptional request. If the client previously sent
             * a get_neighbour_nodes request to the server and set the keep_alive flag,
             * the server is supposed to keep the connection alive and notify the client
             * about changes in its neigbhourhood by sending the following request to the client.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
             */
            public Builder clearNeighbourhoodChanged() {
                if (neighbourhoodChangedBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 4) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceRequestTypeCase_ == 4) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                    }
                    neighbourhoodChangedBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * This is an unique, exceptional request. If the client previously sent
             * a get_neighbour_nodes request to the server and set the keep_alive flag,
             * the server is supposed to keep the connection alive and notify the client
             * about changes in its neigbhourhood by sending the following request to the client.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.Builder getNeighbourhoodChangedBuilder() {
                return getNeighbourhoodChangedFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * This is an unique, exceptional request. If the client previously sent
             * a get_neighbour_nodes request to the server and set the keep_alive flag,
             * the server is supposed to keep the connection alive and notify the client
             * about changes in its neigbhourhood by sending the following request to the client.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequestOrBuilder getNeighbourhoodChangedOrBuilder() {
                if ((localServiceRequestTypeCase_ == 4) && (neighbourhoodChangedBuilder_ != null)) {
                    return neighbourhoodChangedBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceRequestTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.getDefaultInstance();
                }
            }

            /**
             * <pre>
             * This is an unique, exceptional request. If the client previously sent
             * a get_neighbour_nodes request to the server and set the keep_alive flag,
             * the server is supposed to keep the connection alive and notify the client
             * about changes in its neigbhourhood by sending the following request to the client.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest neighbourhood_changed = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequestOrBuilder>
            getNeighbourhoodChangedFieldBuilder() {
                if (neighbourhoodChangedBuilder_ == null) {
                    if (!(localServiceRequestTypeCase_ == 4)) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.getDefaultInstance();
                    }
                    neighbourhoodChangedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) localServiceRequestType_,
                            getParentForChildren(),
                            isClean());
                    localServiceRequestType_ = null;
                }
                localServiceRequestTypeCase_ = 4;
                onChanged();
                ;
                return neighbourhoodChangedBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder> getNodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                } else {
                    if (localServiceRequestTypeCase_ == 5) {
                        return getNodeInfoBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
             */
            public Builder setGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest value) {
                if (getNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceRequestType_ = value;
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
             */
            public Builder setGetNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder builderForValue) {
                if (getNodeInfoBuilder_ == null) {
                    localServiceRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(builderForValue.build());
                }
                localServiceRequestTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
             */
            public Builder mergeGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest value) {
                if (getNodeInfoBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 5 &&
                            localServiceRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance()) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceRequestTypeCase_ == 5) {
                        getNodeInfoBuilder_.mergeFrom(value);
                    }
                    getNodeInfoBuilder_.setMessage(value);
                }
                localServiceRequestTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
             */
            public Builder clearGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (localServiceRequestTypeCase_ == 5) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceRequestTypeCase_ == 5) {
                        localServiceRequestTypeCase_ = 0;
                        localServiceRequestType_ = null;
                    }
                    getNodeInfoBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder getGetNodeInfoBuilder() {
                return getGetNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder getGetNodeInfoOrBuilder() {
                if ((localServiceRequestTypeCase_ == 5) && (getNodeInfoBuilder_ != null)) {
                    return getNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceRequestTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder>
            getGetNodeInfoFieldBuilder() {
                if (getNodeInfoBuilder_ == null) {
                    if (!(localServiceRequestTypeCase_ == 5)) {
                        localServiceRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                    }
                    getNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) localServiceRequestType_,
                            getParentForChildren(),
                            isClean());
                    localServiceRequestType_ = null;
                }
                localServiceRequestTypeCase_ = 5;
                onChanged();
                ;
                return getNodeInfoBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.LocalServiceRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.LocalServiceRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<LocalServiceRequest>
                PARSER = new com.google.protobuf.AbstractParser<LocalServiceRequest>() {
            public LocalServiceRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new LocalServiceRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<LocalServiceRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<LocalServiceRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface LocalServiceResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.LocalServiceResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Responses sent back to the client from the server as usual.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse getRegisterService();

        /**
         * <pre>
         * Responses sent back to the client from the server as usual.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponseOrBuilder getRegisterServiceOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse getDeregisterService();

        /**
         * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponseOrBuilder getDeregisterServiceOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse getGetNeighbourNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder getGetNeighbourNodesOrBuilder();

        /**
         * <pre>
         * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse getNeighbourhoodUpdated();

        /**
         * <pre>
         * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponseOrBuilder getNeighbourhoodUpdatedOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getGetNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder getGetNodeInfoOrBuilder();

        public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.LocalServiceResponseTypeCase getLocalServiceResponseTypeCase();
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.LocalServiceResponse}
     */
    public static final class LocalServiceResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.LocalServiceResponse)
            LocalServiceResponseOrBuilder {
        // Use LocalServiceResponse.newBuilder() to construct.
        private LocalServiceResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private LocalServiceResponse() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private LocalServiceResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.Builder subBuilder = null;
                            if (localServiceResponseTypeCase_ == 1) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_).toBuilder();
                            }
                            localServiceResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_);
                                localServiceResponseType_ = subBuilder.buildPartial();
                            }
                            localServiceResponseTypeCase_ = 1;
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.Builder subBuilder = null;
                            if (localServiceResponseTypeCase_ == 2) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_).toBuilder();
                            }
                            localServiceResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_);
                                localServiceResponseType_ = subBuilder.buildPartial();
                            }
                            localServiceResponseTypeCase_ = 2;
                            break;
                        }
                        case 26: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder subBuilder = null;
                            if (localServiceResponseTypeCase_ == 3) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_).toBuilder();
                            }
                            localServiceResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_);
                                localServiceResponseType_ = subBuilder.buildPartial();
                            }
                            localServiceResponseTypeCase_ = 3;
                            break;
                        }
                        case 34: {
                            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.Builder subBuilder = null;
                            if (localServiceResponseTypeCase_ == 4) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_).toBuilder();
                            }
                            localServiceResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_);
                                localServiceResponseType_ = subBuilder.buildPartial();
                            }
                            localServiceResponseTypeCase_ = 4;
                            break;
                        }
                        case 42: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder subBuilder = null;
                            if (localServiceResponseTypeCase_ == 5) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_).toBuilder();
                            }
                            localServiceResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_);
                                localServiceResponseType_ = subBuilder.buildPartial();
                            }
                            localServiceResponseTypeCase_ = 5;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.Builder.class);
        }

        private int localServiceResponseTypeCase_ = 0;
        private java.lang.Object localServiceResponseType_;

        public enum LocalServiceResponseTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            REGISTER_SERVICE(1),
            DEREGISTER_SERVICE(2),
            GET_NEIGHBOUR_NODES(3),
            NEIGHBOURHOOD_UPDATED(4),
            GET_NODE_INFO(5),
            LOCALSERVICERESPONSETYPE_NOT_SET(0);
            private final int value;

            private LocalServiceResponseTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static LocalServiceResponseTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static LocalServiceResponseTypeCase forNumber(int value) {
                switch (value) {
                    case 1:
                        return REGISTER_SERVICE;
                    case 2:
                        return DEREGISTER_SERVICE;
                    case 3:
                        return GET_NEIGHBOUR_NODES;
                    case 4:
                        return NEIGHBOURHOOD_UPDATED;
                    case 5:
                        return GET_NODE_INFO;
                    case 0:
                        return LOCALSERVICERESPONSETYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public LocalServiceResponseTypeCase
        getLocalServiceResponseTypeCase() {
            return LocalServiceResponseTypeCase.forNumber(
                    localServiceResponseTypeCase_);
        }

        public static final int REGISTER_SERVICE_FIELD_NUMBER = 1;

        /**
         * <pre>
         * Responses sent back to the client from the server as usual.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse getRegisterService() {
            if (localServiceResponseTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.getDefaultInstance();
        }

        /**
         * <pre>
         * Responses sent back to the client from the server as usual.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponseOrBuilder getRegisterServiceOrBuilder() {
            if (localServiceResponseTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.getDefaultInstance();
        }

        public static final int DEREGISTER_SERVICE_FIELD_NUMBER = 2;

        /**
         * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse getDeregisterService() {
            if (localServiceResponseTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponseOrBuilder getDeregisterServiceOrBuilder() {
            if (localServiceResponseTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.getDefaultInstance();
        }

        public static final int GET_NEIGHBOUR_NODES_FIELD_NUMBER = 3;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse getGetNeighbourNodes() {
            if (localServiceResponseTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder getGetNeighbourNodesOrBuilder() {
            if (localServiceResponseTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
        }

        public static final int NEIGHBOURHOOD_UPDATED_FIELD_NUMBER = 4;

        /**
         * <pre>
         * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse getNeighbourhoodUpdated() {
            if (localServiceResponseTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.getDefaultInstance();
        }

        /**
         * <pre>
         * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponseOrBuilder getNeighbourhoodUpdatedOrBuilder() {
            if (localServiceResponseTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.getDefaultInstance();
        }

        public static final int GET_NODE_INFO_FIELD_NUMBER = 5;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getGetNodeInfo() {
            if (localServiceResponseTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder getGetNodeInfoOrBuilder() {
            if (localServiceResponseTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (localServiceResponseTypeCase_ == 1) {
                output.writeMessage(1, (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_);
            }
            if (localServiceResponseTypeCase_ == 2) {
                output.writeMessage(2, (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_);
            }
            if (localServiceResponseTypeCase_ == 3) {
                output.writeMessage(3, (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_);
            }
            if (localServiceResponseTypeCase_ == 4) {
                output.writeMessage(4, (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_);
            }
            if (localServiceResponseTypeCase_ == 5) {
                output.writeMessage(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (localServiceResponseTypeCase_ == 1) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_);
            }
            if (localServiceResponseTypeCase_ == 2) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_);
            }
            if (localServiceResponseTypeCase_ == 3) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_);
            }
            if (localServiceResponseTypeCase_ == 4) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_);
            }
            if (localServiceResponseTypeCase_ == 5) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) obj;

            boolean result = true;
            result = result && getLocalServiceResponseTypeCase().equals(
                    other.getLocalServiceResponseTypeCase());
            if (!result) return false;
            switch (localServiceResponseTypeCase_) {
                case 1:
                    result = result && getRegisterService()
                            .equals(other.getRegisterService());
                    break;
                case 2:
                    result = result && getDeregisterService()
                            .equals(other.getDeregisterService());
                    break;
                case 3:
                    result = result && getGetNeighbourNodes()
                            .equals(other.getGetNeighbourNodes());
                    break;
                case 4:
                    result = result && getNeighbourhoodUpdated()
                            .equals(other.getNeighbourhoodUpdated());
                    break;
                case 5:
                    result = result && getGetNodeInfo()
                            .equals(other.getGetNodeInfo());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            switch (localServiceResponseTypeCase_) {
                case 1:
                    hash = (37 * hash) + REGISTER_SERVICE_FIELD_NUMBER;
                    hash = (53 * hash) + getRegisterService().hashCode();
                    break;
                case 2:
                    hash = (37 * hash) + DEREGISTER_SERVICE_FIELD_NUMBER;
                    hash = (53 * hash) + getDeregisterService().hashCode();
                    break;
                case 3:
                    hash = (37 * hash) + GET_NEIGHBOUR_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNeighbourNodes().hashCode();
                    break;
                case 4:
                    hash = (37 * hash) + NEIGHBOURHOOD_UPDATED_FIELD_NUMBER;
                    hash = (53 * hash) + getNeighbourhoodUpdated().hashCode();
                    break;
                case 5:
                    hash = (37 * hash) + GET_NODE_INFO_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNodeInfo().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.LocalServiceResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.LocalServiceResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                localServiceResponseTypeCase_ = 0;
                localServiceResponseType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse(this);
                if (localServiceResponseTypeCase_ == 1) {
                    if (registerServiceBuilder_ == null) {
                        result.localServiceResponseType_ = localServiceResponseType_;
                    } else {
                        result.localServiceResponseType_ = registerServiceBuilder_.build();
                    }
                }
                if (localServiceResponseTypeCase_ == 2) {
                    if (deregisterServiceBuilder_ == null) {
                        result.localServiceResponseType_ = localServiceResponseType_;
                    } else {
                        result.localServiceResponseType_ = deregisterServiceBuilder_.build();
                    }
                }
                if (localServiceResponseTypeCase_ == 3) {
                    if (getNeighbourNodesBuilder_ == null) {
                        result.localServiceResponseType_ = localServiceResponseType_;
                    } else {
                        result.localServiceResponseType_ = getNeighbourNodesBuilder_.build();
                    }
                }
                if (localServiceResponseTypeCase_ == 4) {
                    if (neighbourhoodUpdatedBuilder_ == null) {
                        result.localServiceResponseType_ = localServiceResponseType_;
                    } else {
                        result.localServiceResponseType_ = neighbourhoodUpdatedBuilder_.build();
                    }
                }
                if (localServiceResponseTypeCase_ == 5) {
                    if (getNodeInfoBuilder_ == null) {
                        result.localServiceResponseType_ = localServiceResponseType_;
                    } else {
                        result.localServiceResponseType_ = getNodeInfoBuilder_.build();
                    }
                }
                result.localServiceResponseTypeCase_ = localServiceResponseTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse.getDefaultInstance())
                    return this;
                switch (other.getLocalServiceResponseTypeCase()) {
                    case REGISTER_SERVICE: {
                        mergeRegisterService(other.getRegisterService());
                        break;
                    }
                    case DEREGISTER_SERVICE: {
                        mergeDeregisterService(other.getDeregisterService());
                        break;
                    }
                    case GET_NEIGHBOUR_NODES: {
                        mergeGetNeighbourNodes(other.getGetNeighbourNodes());
                        break;
                    }
                    case NEIGHBOURHOOD_UPDATED: {
                        mergeNeighbourhoodUpdated(other.getNeighbourhoodUpdated());
                        break;
                    }
                    case GET_NODE_INFO: {
                        mergeGetNodeInfo(other.getGetNodeInfo());
                        break;
                    }
                    case LOCALSERVICERESPONSETYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int localServiceResponseTypeCase_ = 0;
            private java.lang.Object localServiceResponseType_;

            public LocalServiceResponseTypeCase
            getLocalServiceResponseTypeCase() {
                return LocalServiceResponseTypeCase.forNumber(
                        localServiceResponseTypeCase_);
            }

            public Builder clearLocalServiceResponseType() {
                localServiceResponseTypeCase_ = 0;
                localServiceResponseType_ = null;
                onChanged();
                return this;
            }


            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponseOrBuilder> registerServiceBuilder_;

            /**
             * <pre>
             * Responses sent back to the client from the server as usual.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse getRegisterService() {
                if (registerServiceBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.getDefaultInstance();
                } else {
                    if (localServiceResponseTypeCase_ == 1) {
                        return registerServiceBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.getDefaultInstance();
                }
            }

            /**
             * <pre>
             * Responses sent back to the client from the server as usual.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
             */
            public Builder setRegisterService(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse value) {
                if (registerServiceBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceResponseType_ = value;
                    onChanged();
                } else {
                    registerServiceBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 1;
                return this;
            }

            /**
             * <pre>
             * Responses sent back to the client from the server as usual.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
             */
            public Builder setRegisterService(
                    org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.Builder builderForValue) {
                if (registerServiceBuilder_ == null) {
                    localServiceResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    registerServiceBuilder_.setMessage(builderForValue.build());
                }
                localServiceResponseTypeCase_ = 1;
                return this;
            }

            /**
             * <pre>
             * Responses sent back to the client from the server as usual.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
             */
            public Builder mergeRegisterService(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse value) {
                if (registerServiceBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 1 &&
                            localServiceResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.getDefaultInstance()) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceResponseTypeCase_ == 1) {
                        registerServiceBuilder_.mergeFrom(value);
                    }
                    registerServiceBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 1;
                return this;
            }

            /**
             * <pre>
             * Responses sent back to the client from the server as usual.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
             */
            public Builder clearRegisterService() {
                if (registerServiceBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 1) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceResponseTypeCase_ == 1) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                    }
                    registerServiceBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * Responses sent back to the client from the server as usual.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.Builder getRegisterServiceBuilder() {
                return getRegisterServiceFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * Responses sent back to the client from the server as usual.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponseOrBuilder getRegisterServiceOrBuilder() {
                if ((localServiceResponseTypeCase_ == 1) && (registerServiceBuilder_ != null)) {
                    return registerServiceBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceResponseTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.getDefaultInstance();
                }
            }

            /**
             * <pre>
             * Responses sent back to the client from the server as usual.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.RegisterServiceResponse register_service = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponseOrBuilder>
            getRegisterServiceFieldBuilder() {
                if (registerServiceBuilder_ == null) {
                    if (!(localServiceResponseTypeCase_ == 1)) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.getDefaultInstance();
                    }
                    registerServiceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) localServiceResponseType_,
                            getParentForChildren(),
                            isClean());
                    localServiceResponseType_ = null;
                }
                localServiceResponseTypeCase_ = 1;
                onChanged();
                ;
                return registerServiceBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponseOrBuilder> deregisterServiceBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse getDeregisterService() {
                if (deregisterServiceBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.getDefaultInstance();
                } else {
                    if (localServiceResponseTypeCase_ == 2) {
                        return deregisterServiceBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
             */
            public Builder setDeregisterService(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse value) {
                if (deregisterServiceBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceResponseType_ = value;
                    onChanged();
                } else {
                    deregisterServiceBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
             */
            public Builder setDeregisterService(
                    org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.Builder builderForValue) {
                if (deregisterServiceBuilder_ == null) {
                    localServiceResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    deregisterServiceBuilder_.setMessage(builderForValue.build());
                }
                localServiceResponseTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
             */
            public Builder mergeDeregisterService(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse value) {
                if (deregisterServiceBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 2 &&
                            localServiceResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.getDefaultInstance()) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceResponseTypeCase_ == 2) {
                        deregisterServiceBuilder_.mergeFrom(value);
                    }
                    deregisterServiceBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
             */
            public Builder clearDeregisterService() {
                if (deregisterServiceBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 2) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceResponseTypeCase_ == 2) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                    }
                    deregisterServiceBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.Builder getDeregisterServiceBuilder() {
                return getDeregisterServiceFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponseOrBuilder getDeregisterServiceOrBuilder() {
                if ((localServiceResponseTypeCase_ == 2) && (deregisterServiceBuilder_ != null)) {
                    return deregisterServiceBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceResponseTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.DeregisterServiceResponse deregister_service = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponseOrBuilder>
            getDeregisterServiceFieldBuilder() {
                if (deregisterServiceBuilder_ == null) {
                    if (!(localServiceResponseTypeCase_ == 2)) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.getDefaultInstance();
                    }
                    deregisterServiceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) localServiceResponseType_,
                            getParentForChildren(),
                            isClean());
                    localServiceResponseType_ = null;
                }
                localServiceResponseTypeCase_ = 2;
                onChanged();
                ;
                return deregisterServiceBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder> getNeighbourNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse getGetNeighbourNodes() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
                } else {
                    if (localServiceResponseTypeCase_ == 3) {
                        return getNeighbourNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
             */
            public Builder setGetNeighbourNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse value) {
                if (getNeighbourNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceResponseType_ = value;
                    onChanged();
                } else {
                    getNeighbourNodesBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
             */
            public Builder setGetNeighbourNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder builderForValue) {
                if (getNeighbourNodesBuilder_ == null) {
                    localServiceResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNeighbourNodesBuilder_.setMessage(builderForValue.build());
                }
                localServiceResponseTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
             */
            public Builder mergeGetNeighbourNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse value) {
                if (getNeighbourNodesBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 3 &&
                            localServiceResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance()) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceResponseTypeCase_ == 3) {
                        getNeighbourNodesBuilder_.mergeFrom(value);
                    }
                    getNeighbourNodesBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
             */
            public Builder clearGetNeighbourNodes() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 3) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceResponseTypeCase_ == 3) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                    }
                    getNeighbourNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder getGetNeighbourNodesBuilder() {
                return getGetNeighbourNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder getGetNeighbourNodesOrBuilder() {
                if ((localServiceResponseTypeCase_ == 3) && (getNeighbourNodesBuilder_ != null)) {
                    return getNeighbourNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceResponseTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder>
            getGetNeighbourNodesFieldBuilder() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (!(localServiceResponseTypeCase_ == 3)) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
                    }
                    getNeighbourNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) localServiceResponseType_,
                            getParentForChildren(),
                            isClean());
                    localServiceResponseType_ = null;
                }
                localServiceResponseTypeCase_ = 3;
                onChanged();
                ;
                return getNeighbourNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponseOrBuilder> neighbourhoodUpdatedBuilder_;

            /**
             * <pre>
             * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse getNeighbourhoodUpdated() {
                if (neighbourhoodUpdatedBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.getDefaultInstance();
                } else {
                    if (localServiceResponseTypeCase_ == 4) {
                        return neighbourhoodUpdatedBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.getDefaultInstance();
                }
            }

            /**
             * <pre>
             * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
             */
            public Builder setNeighbourhoodUpdated(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse value) {
                if (neighbourhoodUpdatedBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceResponseType_ = value;
                    onChanged();
                } else {
                    neighbourhoodUpdatedBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 4;
                return this;
            }

            /**
             * <pre>
             * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
             */
            public Builder setNeighbourhoodUpdated(
                    org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.Builder builderForValue) {
                if (neighbourhoodUpdatedBuilder_ == null) {
                    localServiceResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    neighbourhoodUpdatedBuilder_.setMessage(builderForValue.build());
                }
                localServiceResponseTypeCase_ = 4;
                return this;
            }

            /**
             * <pre>
             * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
             */
            public Builder mergeNeighbourhoodUpdated(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse value) {
                if (neighbourhoodUpdatedBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 4 &&
                            localServiceResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.getDefaultInstance()) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceResponseTypeCase_ == 4) {
                        neighbourhoodUpdatedBuilder_.mergeFrom(value);
                    }
                    neighbourhoodUpdatedBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 4;
                return this;
            }

            /**
             * <pre>
             * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
             */
            public Builder clearNeighbourhoodUpdated() {
                if (neighbourhoodUpdatedBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 4) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceResponseTypeCase_ == 4) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                    }
                    neighbourhoodUpdatedBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.Builder getNeighbourhoodUpdatedBuilder() {
                return getNeighbourhoodUpdatedFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponseOrBuilder getNeighbourhoodUpdatedOrBuilder() {
                if ((localServiceResponseTypeCase_ == 4) && (neighbourhoodUpdatedBuilder_ != null)) {
                    return neighbourhoodUpdatedBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceResponseTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.getDefaultInstance();
                }
            }

            /**
             * <pre>
             * For each neigbhourhood change notification, the client must send this response as an acknowledgement.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse neighbourhood_updated = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponseOrBuilder>
            getNeighbourhoodUpdatedFieldBuilder() {
                if (neighbourhoodUpdatedBuilder_ == null) {
                    if (!(localServiceResponseTypeCase_ == 4)) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.getDefaultInstance();
                    }
                    neighbourhoodUpdatedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) localServiceResponseType_,
                            getParentForChildren(),
                            isClean());
                    localServiceResponseType_ = null;
                }
                localServiceResponseTypeCase_ = 4;
                onChanged();
                ;
                return neighbourhoodUpdatedBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder> getNodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                } else {
                    if (localServiceResponseTypeCase_ == 5) {
                        return getNodeInfoBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
             */
            public Builder setGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse value) {
                if (getNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    localServiceResponseType_ = value;
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
             */
            public Builder setGetNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder builderForValue) {
                if (getNodeInfoBuilder_ == null) {
                    localServiceResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(builderForValue.build());
                }
                localServiceResponseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
             */
            public Builder mergeGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse value) {
                if (getNodeInfoBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 5 &&
                            localServiceResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance()) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        localServiceResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (localServiceResponseTypeCase_ == 5) {
                        getNodeInfoBuilder_.mergeFrom(value);
                    }
                    getNodeInfoBuilder_.setMessage(value);
                }
                localServiceResponseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
             */
            public Builder clearGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (localServiceResponseTypeCase_ == 5) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (localServiceResponseTypeCase_ == 5) {
                        localServiceResponseTypeCase_ = 0;
                        localServiceResponseType_ = null;
                    }
                    getNodeInfoBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder getGetNodeInfoBuilder() {
                return getGetNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder getGetNodeInfoOrBuilder() {
                if ((localServiceResponseTypeCase_ == 5) && (getNodeInfoBuilder_ != null)) {
                    return getNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    if (localServiceResponseTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder>
            getGetNodeInfoFieldBuilder() {
                if (getNodeInfoBuilder_ == null) {
                    if (!(localServiceResponseTypeCase_ == 5)) {
                        localServiceResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                    }
                    getNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) localServiceResponseType_,
                            getParentForChildren(),
                            isClean());
                    localServiceResponseType_ = null;
                }
                localServiceResponseTypeCase_ = 5;
                onChanged();
                ;
                return getNodeInfoBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.LocalServiceResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.LocalServiceResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<LocalServiceResponse>
                PARSER = new com.google.protobuf.AbstractParser<LocalServiceResponse>() {
            public LocalServiceResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new LocalServiceResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<LocalServiceResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<LocalServiceResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.LocalServiceResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface RegisterServiceRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.RegisterServiceRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
         */
        boolean hasService();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo getService();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder getServiceOrBuilder();
    }

    /**
     * <pre>
     * Register a local service (e.g. the Profile Server) with the location-based network
     * so as clients can detect its existence and contact it.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.RegisterServiceRequest}
     */
    public static final class RegisterServiceRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.RegisterServiceRequest)
            RegisterServiceRequestOrBuilder {
        // Use RegisterServiceRequest.newBuilder() to construct.
        private RegisterServiceRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private RegisterServiceRequest() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private RegisterServiceRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder subBuilder = null;
                            if (service_ != null) {
                                subBuilder = service_.toBuilder();
                            }
                            service_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(service_);
                                service_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.Builder.class);
        }

        public static final int SERVICE_FIELD_NUMBER = 1;
        private org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo service_;

        /**
         * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
         */
        public boolean hasService() {
            return service_ != null;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo getService() {
            return service_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.getDefaultInstance() : service_;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder getServiceOrBuilder() {
            return getService();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (service_ != null) {
                output.writeMessage(1, getService());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (service_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getService());
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) obj;

            boolean result = true;
            result = result && (hasService() == other.hasService());
            if (hasService()) {
                result = result && getService()
                        .equals(other.getService());
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasService()) {
                hash = (37 * hash) + SERVICE_FIELD_NUMBER;
                hash = (53 * hash) + getService().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Register a local service (e.g. the Profile Server) with the location-based network
         * so as clients can detect its existence and contact it.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.RegisterServiceRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.RegisterServiceRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                if (serviceBuilder_ == null) {
                    service_ = null;
                } else {
                    service_ = null;
                    serviceBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest(this);
                if (serviceBuilder_ == null) {
                    result.service_ = service_;
                } else {
                    result.service_ = serviceBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest.getDefaultInstance())
                    return this;
                if (other.hasService()) {
                    mergeService(other.getService());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo service_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder> serviceBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
             */
            public boolean hasService() {
                return serviceBuilder_ != null || service_ != null;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo getService() {
                if (serviceBuilder_ == null) {
                    return service_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.getDefaultInstance() : service_;
                } else {
                    return serviceBuilder_.getMessage();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
             */
            public Builder setService(org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo value) {
                if (serviceBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    service_ = value;
                    onChanged();
                } else {
                    serviceBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
             */
            public Builder setService(
                    org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder builderForValue) {
                if (serviceBuilder_ == null) {
                    service_ = builderForValue.build();
                    onChanged();
                } else {
                    serviceBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
             */
            public Builder mergeService(org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo value) {
                if (serviceBuilder_ == null) {
                    if (service_ != null) {
                        service_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.newBuilder(service_).mergeFrom(value).buildPartial();
                    } else {
                        service_ = value;
                    }
                    onChanged();
                } else {
                    serviceBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
             */
            public Builder clearService() {
                if (serviceBuilder_ == null) {
                    service_ = null;
                    onChanged();
                } else {
                    service_ = null;
                    serviceBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder getServiceBuilder() {

                onChanged();
                return getServiceFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder getServiceOrBuilder() {
                if (serviceBuilder_ != null) {
                    return serviceBuilder_.getMessageOrBuilder();
                } else {
                    return service_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.getDefaultInstance() : service_;
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ServiceInfo service = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder>
            getServiceFieldBuilder() {
                if (serviceBuilder_ == null) {
                    serviceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ServiceInfoOrBuilder>(
                            getService(),
                            getParentForChildren(),
                            isClean());
                    service_ = null;
                }
                return serviceBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.RegisterServiceRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.RegisterServiceRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<RegisterServiceRequest>
                PARSER = new com.google.protobuf.AbstractParser<RegisterServiceRequest>() {
            public RegisterServiceRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new RegisterServiceRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<RegisterServiceRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<RegisterServiceRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface RegisterServiceResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.RegisterServiceResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * GPS location of the LOC node.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        boolean hasLocation();

        /**
         * <pre>
         * GPS location of the LOC node.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation();

        /**
         * <pre>
         * GPS location of the LOC node.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder();
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.RegisterServiceResponse}
     */
    public static final class RegisterServiceResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.RegisterServiceResponse)
            RegisterServiceResponseOrBuilder {
        // Use RegisterServiceResponse.newBuilder() to construct.
        private RegisterServiceResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private RegisterServiceResponse() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private RegisterServiceResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder subBuilder = null;
                            if (location_ != null) {
                                subBuilder = location_.toBuilder();
                            }
                            location_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(location_);
                                location_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.Builder.class);
        }

        public static final int LOCATION_FIELD_NUMBER = 1;
        private org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation location_;

        /**
         * <pre>
         * GPS location of the LOC node.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        public boolean hasLocation() {
            return location_ != null;
        }

        /**
         * <pre>
         * GPS location of the LOC node.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation() {
            return location_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
        }

        /**
         * <pre>
         * GPS location of the LOC node.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder() {
            return getLocation();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (location_ != null) {
                output.writeMessage(1, getLocation());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (location_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getLocation());
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) obj;

            boolean result = true;
            result = result && (hasLocation() == other.hasLocation());
            if (hasLocation()) {
                result = result && getLocation()
                        .equals(other.getLocation());
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasLocation()) {
                hash = (37 * hash) + LOCATION_FIELD_NUMBER;
                hash = (53 * hash) + getLocation().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.RegisterServiceResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.RegisterServiceResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                if (locationBuilder_ == null) {
                    location_ = null;
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse(this);
                if (locationBuilder_ == null) {
                    result.location_ = location_;
                } else {
                    result.location_ = locationBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse.getDefaultInstance())
                    return this;
                if (other.hasLocation()) {
                    mergeLocation(other.getLocation());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation location_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder> locationBuilder_;

            /**
             * <pre>
             * GPS location of the LOC node.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public boolean hasLocation() {
                return locationBuilder_ != null || location_ != null;
            }

            /**
             * <pre>
             * GPS location of the LOC node.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation() {
                if (locationBuilder_ == null) {
                    return location_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
                } else {
                    return locationBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * GPS location of the LOC node.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder setLocation(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation value) {
                if (locationBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    location_ = value;
                    onChanged();
                } else {
                    locationBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * GPS location of the LOC node.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder setLocation(
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder builderForValue) {
                if (locationBuilder_ == null) {
                    location_ = builderForValue.build();
                    onChanged();
                } else {
                    locationBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * GPS location of the LOC node.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder mergeLocation(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation value) {
                if (locationBuilder_ == null) {
                    if (location_ != null) {
                        location_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.newBuilder(location_).mergeFrom(value).buildPartial();
                    } else {
                        location_ = value;
                    }
                    onChanged();
                } else {
                    locationBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * GPS location of the LOC node.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder clearLocation() {
                if (locationBuilder_ == null) {
                    location_ = null;
                    onChanged();
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * GPS location of the LOC node.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder getLocationBuilder() {

                onChanged();
                return getLocationFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * GPS location of the LOC node.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder() {
                if (locationBuilder_ != null) {
                    return locationBuilder_.getMessageOrBuilder();
                } else {
                    return location_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
                }
            }

            /**
             * <pre>
             * GPS location of the LOC node.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder>
            getLocationFieldBuilder() {
                if (locationBuilder_ == null) {
                    locationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder>(
                            getLocation(),
                            getParentForChildren(),
                            isClean());
                    location_ = null;
                }
                return locationBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.RegisterServiceResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.RegisterServiceResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<RegisterServiceResponse>
                PARSER = new com.google.protobuf.AbstractParser<RegisterServiceResponse>() {
            public RegisterServiceResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new RegisterServiceResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<RegisterServiceResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<RegisterServiceResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.RegisterServiceResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface DeregisterServiceRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.DeregisterServiceRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>string service_type = 1;</code>
         */
        java.lang.String getServiceType();

        /**
         * <code>string service_type = 1;</code>
         */
        com.google.protobuf.ByteString
        getServiceTypeBytes();
    }

    /**
     * <pre>
     * Remove a previously registered entry of a service.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.DeregisterServiceRequest}
     */
    public static final class DeregisterServiceRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.DeregisterServiceRequest)
            DeregisterServiceRequestOrBuilder {
        // Use DeregisterServiceRequest.newBuilder() to construct.
        private DeregisterServiceRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private DeregisterServiceRequest() {
            serviceType_ = "";
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private DeregisterServiceRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            java.lang.String s = input.readStringRequireUtf8();

                            serviceType_ = s;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.Builder.class);
        }

        public static final int SERVICE_TYPE_FIELD_NUMBER = 1;
        private volatile java.lang.Object serviceType_;

        /**
         * <code>string service_type = 1;</code>
         */
        public java.lang.String getServiceType() {
            java.lang.Object ref = serviceType_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                serviceType_ = s;
                return s;
            }
        }

        /**
         * <code>string service_type = 1;</code>
         */
        public com.google.protobuf.ByteString
        getServiceTypeBytes() {
            java.lang.Object ref = serviceType_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                serviceType_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getServiceTypeBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, serviceType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getServiceTypeBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, serviceType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) obj;

            boolean result = true;
            result = result && getServiceType()
                    .equals(other.getServiceType());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + SERVICE_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + getServiceType().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Remove a previously registered entry of a service.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.DeregisterServiceRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.DeregisterServiceRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                serviceType_ = "";

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest(this);
                result.serviceType_ = serviceType_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest.getDefaultInstance())
                    return this;
                if (!other.getServiceType().isEmpty()) {
                    serviceType_ = other.serviceType_;
                    onChanged();
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private java.lang.Object serviceType_ = "";

            /**
             * <code>string service_type = 1;</code>
             */
            public java.lang.String getServiceType() {
                java.lang.Object ref = serviceType_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    serviceType_ = s;
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <code>string service_type = 1;</code>
             */
            public com.google.protobuf.ByteString
            getServiceTypeBytes() {
                java.lang.Object ref = serviceType_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    serviceType_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>string service_type = 1;</code>
             */
            public Builder setServiceType(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                serviceType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>string service_type = 1;</code>
             */
            public Builder clearServiceType() {

                serviceType_ = getDefaultInstance().getServiceType();
                onChanged();
                return this;
            }

            /**
             * <code>string service_type = 1;</code>
             */
            public Builder setServiceTypeBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                serviceType_ = value;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.DeregisterServiceRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.DeregisterServiceRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<DeregisterServiceRequest>
                PARSER = new com.google.protobuf.AbstractParser<DeregisterServiceRequest>() {
            public DeregisterServiceRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new DeregisterServiceRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<DeregisterServiceRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<DeregisterServiceRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface DeregisterServiceResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.DeregisterServiceResponse)
            com.google.protobuf.MessageOrBuilder {
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.DeregisterServiceResponse}
     */
    public static final class DeregisterServiceResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.DeregisterServiceResponse)
            DeregisterServiceResponseOrBuilder {
        // Use DeregisterServiceResponse.newBuilder() to construct.
        private DeregisterServiceResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private DeregisterServiceResponse() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private DeregisterServiceResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.Builder.class);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) obj;

            boolean result = true;
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.DeregisterServiceResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.DeregisterServiceResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse(this);
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse.getDefaultInstance())
                    return this;
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.DeregisterServiceResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.DeregisterServiceResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<DeregisterServiceResponse>
                PARSER = new com.google.protobuf.AbstractParser<DeregisterServiceResponse>() {
            public DeregisterServiceResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new DeregisterServiceResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<DeregisterServiceResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<DeregisterServiceResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.DeregisterServiceResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetNeighbourNodesByDistanceLocalRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>bool keep_alive_and_send_updates = 1;</code>
         */
        boolean getKeepAliveAndSendUpdates();
    }

    /**
     * <pre>
     * Get the list of neighbouring nodes by distance.
     * If the keep_alive flag is set, the server must keep the connection alive and notify the client
     * about changes in its neigbhourhood by sending NeighbourhoodChangeRequests to the client.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest}
     */
    public static final class GetNeighbourNodesByDistanceLocalRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest)
            GetNeighbourNodesByDistanceLocalRequestOrBuilder {
        // Use GetNeighbourNodesByDistanceLocalRequest.newBuilder() to construct.
        private GetNeighbourNodesByDistanceLocalRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetNeighbourNodesByDistanceLocalRequest() {
            keepAliveAndSendUpdates_ = false;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetNeighbourNodesByDistanceLocalRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            keepAliveAndSendUpdates_ = input.readBool();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.Builder.class);
        }

        public static final int KEEP_ALIVE_AND_SEND_UPDATES_FIELD_NUMBER = 1;
        private boolean keepAliveAndSendUpdates_;

        /**
         * <code>bool keep_alive_and_send_updates = 1;</code>
         */
        public boolean getKeepAliveAndSendUpdates() {
            return keepAliveAndSendUpdates_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (keepAliveAndSendUpdates_ != false) {
                output.writeBool(1, keepAliveAndSendUpdates_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (keepAliveAndSendUpdates_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(1, keepAliveAndSendUpdates_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) obj;

            boolean result = true;
            result = result && (getKeepAliveAndSendUpdates()
                    == other.getKeepAliveAndSendUpdates());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + KEEP_ALIVE_AND_SEND_UPDATES_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getKeepAliveAndSendUpdates());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Get the list of neighbouring nodes by distance.
         * If the keep_alive flag is set, the server must keep the connection alive and notify the client
         * about changes in its neigbhourhood by sending NeighbourhoodChangeRequests to the client.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                keepAliveAndSendUpdates_ = false;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest(this);
                result.keepAliveAndSendUpdates_ = keepAliveAndSendUpdates_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest.getDefaultInstance())
                    return this;
                if (other.getKeepAliveAndSendUpdates() != false) {
                    setKeepAliveAndSendUpdates(other.getKeepAliveAndSendUpdates());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private boolean keepAliveAndSendUpdates_;

            /**
             * <code>bool keep_alive_and_send_updates = 1;</code>
             */
            public boolean getKeepAliveAndSendUpdates() {
                return keepAliveAndSendUpdates_;
            }

            /**
             * <code>bool keep_alive_and_send_updates = 1;</code>
             */
            public Builder setKeepAliveAndSendUpdates(boolean value) {

                keepAliveAndSendUpdates_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bool keep_alive_and_send_updates = 1;</code>
             */
            public Builder clearKeepAliveAndSendUpdates() {

                keepAliveAndSendUpdates_ = false;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceLocalRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetNeighbourNodesByDistanceLocalRequest>
                PARSER = new com.google.protobuf.AbstractParser<GetNeighbourNodesByDistanceLocalRequest>() {
            public GetNeighbourNodesByDistanceLocalRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetNeighbourNodesByDistanceLocalRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetNeighbourNodesByDistanceLocalRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetNeighbourNodesByDistanceLocalRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceLocalRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetNeighbourNodesByDistanceResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>
        getNodesList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodes(int index);

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        int getNodesCount();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
        getNodesOrBuilderList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodesOrBuilder(
                int index);
    }

    /**
     * <pre>
     * Response is a list of node data about all neighbours.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse}
     */
    public static final class GetNeighbourNodesByDistanceResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse)
            GetNeighbourNodesByDistanceResponseOrBuilder {
        // Use GetNeighbourNodesByDistanceResponse.newBuilder() to construct.
        private GetNeighbourNodesByDistanceResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetNeighbourNodesByDistanceResponse() {
            nodes_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetNeighbourNodesByDistanceResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                nodes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            nodes_.add(
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.parser(), extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    nodes_ = java.util.Collections.unmodifiableList(nodes_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder.class);
        }

        public static final int NODES_FIELD_NUMBER = 1;
        private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> nodes_;

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> getNodesList() {
            return nodes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
        getNodesOrBuilderList() {
            return nodes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public int getNodesCount() {
            return nodes_.size();
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodes(int index) {
            return nodes_.get(index);
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodesOrBuilder(
                int index) {
            return nodes_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < nodes_.size(); i++) {
                output.writeMessage(1, nodes_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < nodes_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, nodes_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) obj;

            boolean result = true;
            result = result && getNodesList()
                    .equals(other.getNodesList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getNodesCount() > 0) {
                hash = (37 * hash) + NODES_FIELD_NUMBER;
                hash = (53 * hash) + getNodesList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Response is a list of node data about all neighbours.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getNodesFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (nodesBuilder_ == null) {
                    nodes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    nodesBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse(this);
                int from_bitField0_ = bitField0_;
                if (nodesBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        nodes_ = java.util.Collections.unmodifiableList(nodes_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.nodes_ = nodes_;
                } else {
                    result.nodes_ = nodesBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance())
                    return this;
                if (nodesBuilder_ == null) {
                    if (!other.nodes_.isEmpty()) {
                        if (nodes_.isEmpty()) {
                            nodes_ = other.nodes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureNodesIsMutable();
                            nodes_.addAll(other.nodes_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.nodes_.isEmpty()) {
                        if (nodesBuilder_.isEmpty()) {
                            nodesBuilder_.dispose();
                            nodesBuilder_ = null;
                            nodes_ = other.nodes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            nodesBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getNodesFieldBuilder() : null;
                        } else {
                            nodesBuilder_.addAllMessages(other.nodes_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> nodes_ =
                    java.util.Collections.emptyList();

            private void ensureNodesIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    nodes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>(nodes_);
                    bitField0_ |= 0x00000001;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder> nodesBuilder_;

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> getNodesList() {
                if (nodesBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(nodes_);
                } else {
                    return nodesBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public int getNodesCount() {
                if (nodesBuilder_ == null) {
                    return nodes_.size();
                } else {
                    return nodesBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodes(int index) {
                if (nodesBuilder_ == null) {
                    return nodes_.get(index);
                } else {
                    return nodesBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder setNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNodesIsMutable();
                    nodes_.set(index, value);
                    onChanged();
                } else {
                    nodesBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder setNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    nodesBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNodesIsMutable();
                    nodes_.add(value);
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNodesIsMutable();
                    nodes_.add(index, value);
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.add(builderForValue.build());
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addAllNodes(
                    java.lang.Iterable<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> values) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, nodes_);
                    onChanged();
                } else {
                    nodesBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder clearNodes() {
                if (nodesBuilder_ == null) {
                    nodes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    nodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder removeNodes(int index) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.remove(index);
                    onChanged();
                } else {
                    nodesBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder getNodesBuilder(
                    int index) {
                return getNodesFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodesOrBuilder(
                    int index) {
                if (nodesBuilder_ == null) {
                    return nodes_.get(index);
                } else {
                    return nodesBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getNodesOrBuilderList() {
                if (nodesBuilder_ != null) {
                    return nodesBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(nodes_);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder addNodesBuilder() {
                return getNodesFieldBuilder().addBuilder(
                        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder addNodesBuilder(
                    int index) {
                return getNodesFieldBuilder().addBuilder(
                        index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder>
            getNodesBuilderList() {
                return getNodesFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getNodesFieldBuilder() {
                if (nodesBuilder_ == null) {
                    nodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>(
                            nodes_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    nodes_ = null;
                }
                return nodesBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetNeighbourNodesByDistanceResponse>
                PARSER = new com.google.protobuf.AbstractParser<GetNeighbourNodesByDistanceResponse>() {
            public GetNeighbourNodesByDistanceResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetNeighbourNodesByDistanceResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetNeighbourNodesByDistanceResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetNeighbourNodesByDistanceResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface NeighbourhoodChangeOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.NeighbourhoodChange)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getAddedNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getAddedNodeInfoOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getUpdatedNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getUpdatedNodeInfoOrBuilder();

        /**
         * <code>bytes removed_node_id = 3;</code>
         */
        com.google.protobuf.ByteString getRemovedNodeId();

        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.ChangeTypeCase getChangeTypeCase();
    }

    /**
     * <pre>
     * Atomic change notification element: a neigbhour node is either added, updated or deleted.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.NeighbourhoodChange}
     */
    public static final class NeighbourhoodChange extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.NeighbourhoodChange)
            NeighbourhoodChangeOrBuilder {
        // Use NeighbourhoodChange.newBuilder() to construct.
        private NeighbourhoodChange(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private NeighbourhoodChange() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private NeighbourhoodChange(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder subBuilder = null;
                            if (changeTypeCase_ == 1) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_).toBuilder();
                            }
                            changeType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_);
                                changeType_ = subBuilder.buildPartial();
                            }
                            changeTypeCase_ = 1;
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder subBuilder = null;
                            if (changeTypeCase_ == 2) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_).toBuilder();
                            }
                            changeType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_);
                                changeType_ = subBuilder.buildPartial();
                            }
                            changeTypeCase_ = 2;
                            break;
                        }
                        case 26: {
                            changeTypeCase_ = 3;
                            changeType_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.class, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder.class);
        }

        private int changeTypeCase_ = 0;
        private java.lang.Object changeType_;

        public enum ChangeTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            ADDED_NODE_INFO(1),
            UPDATED_NODE_INFO(2),
            REMOVED_NODE_ID(3),
            CHANGETYPE_NOT_SET(0);
            private final int value;

            private ChangeTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static ChangeTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static ChangeTypeCase forNumber(int value) {
                switch (value) {
                    case 1:
                        return ADDED_NODE_INFO;
                    case 2:
                        return UPDATED_NODE_INFO;
                    case 3:
                        return REMOVED_NODE_ID;
                    case 0:
                        return CHANGETYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public ChangeTypeCase
        getChangeTypeCase() {
            return ChangeTypeCase.forNumber(
                    changeTypeCase_);
        }

        public static final int ADDED_NODE_INFO_FIELD_NUMBER = 1;

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getAddedNodeInfo() {
            if (changeTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getAddedNodeInfoOrBuilder() {
            if (changeTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
        }

        public static final int UPDATED_NODE_INFO_FIELD_NUMBER = 2;

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getUpdatedNodeInfo() {
            if (changeTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getUpdatedNodeInfoOrBuilder() {
            if (changeTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
        }

        public static final int REMOVED_NODE_ID_FIELD_NUMBER = 3;

        /**
         * <code>bytes removed_node_id = 3;</code>
         */
        public com.google.protobuf.ByteString getRemovedNodeId() {
            if (changeTypeCase_ == 3) {
                return (com.google.protobuf.ByteString) changeType_;
            }
            return com.google.protobuf.ByteString.EMPTY;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (changeTypeCase_ == 1) {
                output.writeMessage(1, (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_);
            }
            if (changeTypeCase_ == 2) {
                output.writeMessage(2, (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_);
            }
            if (changeTypeCase_ == 3) {
                output.writeBytes(
                        3, (com.google.protobuf.ByteString) changeType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (changeTypeCase_ == 1) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_);
            }
            if (changeTypeCase_ == 2) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_);
            }
            if (changeTypeCase_ == 3) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(
                                3, (com.google.protobuf.ByteString) changeType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange other = (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange) obj;

            boolean result = true;
            result = result && getChangeTypeCase().equals(
                    other.getChangeTypeCase());
            if (!result) return false;
            switch (changeTypeCase_) {
                case 1:
                    result = result && getAddedNodeInfo()
                            .equals(other.getAddedNodeInfo());
                    break;
                case 2:
                    result = result && getUpdatedNodeInfo()
                            .equals(other.getUpdatedNodeInfo());
                    break;
                case 3:
                    result = result && getRemovedNodeId()
                            .equals(other.getRemovedNodeId());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            switch (changeTypeCase_) {
                case 1:
                    hash = (37 * hash) + ADDED_NODE_INFO_FIELD_NUMBER;
                    hash = (53 * hash) + getAddedNodeInfo().hashCode();
                    break;
                case 2:
                    hash = (37 * hash) + UPDATED_NODE_INFO_FIELD_NUMBER;
                    hash = (53 * hash) + getUpdatedNodeInfo().hashCode();
                    break;
                case 3:
                    hash = (37 * hash) + REMOVED_NODE_ID_FIELD_NUMBER;
                    hash = (53 * hash) + getRemovedNodeId().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Atomic change notification element: a neigbhour node is either added, updated or deleted.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.NeighbourhoodChange}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.NeighbourhoodChange)
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.class, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                changeTypeCase_ = 0;
                changeType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange build() {
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange result = new org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange(this);
                if (changeTypeCase_ == 1) {
                    if (addedNodeInfoBuilder_ == null) {
                        result.changeType_ = changeType_;
                    } else {
                        result.changeType_ = addedNodeInfoBuilder_.build();
                    }
                }
                if (changeTypeCase_ == 2) {
                    if (updatedNodeInfoBuilder_ == null) {
                        result.changeType_ = changeType_;
                    } else {
                        result.changeType_ = updatedNodeInfoBuilder_.build();
                    }
                }
                if (changeTypeCase_ == 3) {
                    result.changeType_ = changeType_;
                }
                result.changeTypeCase_ = changeTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.getDefaultInstance())
                    return this;
                switch (other.getChangeTypeCase()) {
                    case ADDED_NODE_INFO: {
                        mergeAddedNodeInfo(other.getAddedNodeInfo());
                        break;
                    }
                    case UPDATED_NODE_INFO: {
                        mergeUpdatedNodeInfo(other.getUpdatedNodeInfo());
                        break;
                    }
                    case REMOVED_NODE_ID: {
                        setRemovedNodeId(other.getRemovedNodeId());
                        break;
                    }
                    case CHANGETYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int changeTypeCase_ = 0;
            private java.lang.Object changeType_;

            public ChangeTypeCase
            getChangeTypeCase() {
                return ChangeTypeCase.forNumber(
                        changeTypeCase_);
            }

            public Builder clearChangeType() {
                changeTypeCase_ = 0;
                changeType_ = null;
                onChanged();
                return this;
            }


            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder> addedNodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getAddedNodeInfo() {
                if (addedNodeInfoBuilder_ == null) {
                    if (changeTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
                } else {
                    if (changeTypeCase_ == 1) {
                        return addedNodeInfoBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
             */
            public Builder setAddedNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (addedNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    changeType_ = value;
                    onChanged();
                } else {
                    addedNodeInfoBuilder_.setMessage(value);
                }
                changeTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
             */
            public Builder setAddedNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (addedNodeInfoBuilder_ == null) {
                    changeType_ = builderForValue.build();
                    onChanged();
                } else {
                    addedNodeInfoBuilder_.setMessage(builderForValue.build());
                }
                changeTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
             */
            public Builder mergeAddedNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (addedNodeInfoBuilder_ == null) {
                    if (changeTypeCase_ == 1 &&
                            changeType_ != org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance()) {
                        changeType_ = org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        changeType_ = value;
                    }
                    onChanged();
                } else {
                    if (changeTypeCase_ == 1) {
                        addedNodeInfoBuilder_.mergeFrom(value);
                    }
                    addedNodeInfoBuilder_.setMessage(value);
                }
                changeTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
             */
            public Builder clearAddedNodeInfo() {
                if (addedNodeInfoBuilder_ == null) {
                    if (changeTypeCase_ == 1) {
                        changeTypeCase_ = 0;
                        changeType_ = null;
                        onChanged();
                    }
                } else {
                    if (changeTypeCase_ == 1) {
                        changeTypeCase_ = 0;
                        changeType_ = null;
                    }
                    addedNodeInfoBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder getAddedNodeInfoBuilder() {
                return getAddedNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getAddedNodeInfoOrBuilder() {
                if ((changeTypeCase_ == 1) && (addedNodeInfoBuilder_ != null)) {
                    return addedNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    if (changeTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo added_node_info = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getAddedNodeInfoFieldBuilder() {
                if (addedNodeInfoBuilder_ == null) {
                    if (!(changeTypeCase_ == 1)) {
                        changeType_ = org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
                    }
                    addedNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_,
                            getParentForChildren(),
                            isClean());
                    changeType_ = null;
                }
                changeTypeCase_ = 1;
                onChanged();
                ;
                return addedNodeInfoBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder> updatedNodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getUpdatedNodeInfo() {
                if (updatedNodeInfoBuilder_ == null) {
                    if (changeTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
                } else {
                    if (changeTypeCase_ == 2) {
                        return updatedNodeInfoBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
             */
            public Builder setUpdatedNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (updatedNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    changeType_ = value;
                    onChanged();
                } else {
                    updatedNodeInfoBuilder_.setMessage(value);
                }
                changeTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
             */
            public Builder setUpdatedNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (updatedNodeInfoBuilder_ == null) {
                    changeType_ = builderForValue.build();
                    onChanged();
                } else {
                    updatedNodeInfoBuilder_.setMessage(builderForValue.build());
                }
                changeTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
             */
            public Builder mergeUpdatedNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (updatedNodeInfoBuilder_ == null) {
                    if (changeTypeCase_ == 2 &&
                            changeType_ != org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance()) {
                        changeType_ = org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        changeType_ = value;
                    }
                    onChanged();
                } else {
                    if (changeTypeCase_ == 2) {
                        updatedNodeInfoBuilder_.mergeFrom(value);
                    }
                    updatedNodeInfoBuilder_.setMessage(value);
                }
                changeTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
             */
            public Builder clearUpdatedNodeInfo() {
                if (updatedNodeInfoBuilder_ == null) {
                    if (changeTypeCase_ == 2) {
                        changeTypeCase_ = 0;
                        changeType_ = null;
                        onChanged();
                    }
                } else {
                    if (changeTypeCase_ == 2) {
                        changeTypeCase_ = 0;
                        changeType_ = null;
                    }
                    updatedNodeInfoBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder getUpdatedNodeInfoBuilder() {
                return getUpdatedNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getUpdatedNodeInfoOrBuilder() {
                if ((changeTypeCase_ == 2) && (updatedNodeInfoBuilder_ != null)) {
                    return updatedNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    if (changeTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo updated_node_info = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getUpdatedNodeInfoFieldBuilder() {
                if (updatedNodeInfoBuilder_ == null) {
                    if (!(changeTypeCase_ == 2)) {
                        changeType_ = org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance();
                    }
                    updatedNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo) changeType_,
                            getParentForChildren(),
                            isClean());
                    changeType_ = null;
                }
                changeTypeCase_ = 2;
                onChanged();
                ;
                return updatedNodeInfoBuilder_;
            }

            /**
             * <code>bytes removed_node_id = 3;</code>
             */
            public com.google.protobuf.ByteString getRemovedNodeId() {
                if (changeTypeCase_ == 3) {
                    return (com.google.protobuf.ByteString) changeType_;
                }
                return com.google.protobuf.ByteString.EMPTY;
            }

            /**
             * <code>bytes removed_node_id = 3;</code>
             */
            public Builder setRemovedNodeId(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                changeTypeCase_ = 3;
                changeType_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bytes removed_node_id = 3;</code>
             */
            public Builder clearRemovedNodeId() {
                if (changeTypeCase_ == 3) {
                    changeTypeCase_ = 0;
                    changeType_ = null;
                    onChanged();
                }
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.NeighbourhoodChange)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.NeighbourhoodChange)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<NeighbourhoodChange>
                PARSER = new com.google.protobuf.AbstractParser<NeighbourhoodChange>() {
            public NeighbourhoodChange parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new NeighbourhoodChange(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<NeighbourhoodChange> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<NeighbourhoodChange> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface NeighbourhoodChangedNotificationRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange>
        getChangesList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange getChanges(int index);

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        int getChangesCount();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder>
        getChangesOrBuilderList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder getChangesOrBuilder(
                int index);
    }

    /**
     * <pre>
     * A list of changes to be sent in a single bulk notification.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest}
     */
    public static final class NeighbourhoodChangedNotificationRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest)
            NeighbourhoodChangedNotificationRequestOrBuilder {
        // Use NeighbourhoodChangedNotificationRequest.newBuilder() to construct.
        private NeighbourhoodChangedNotificationRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private NeighbourhoodChangedNotificationRequest() {
            changes_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private NeighbourhoodChangedNotificationRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                changes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            changes_.add(
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.parser(), extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    changes_ = java.util.Collections.unmodifiableList(changes_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.Builder.class);
        }

        public static final int CHANGES_FIELD_NUMBER = 1;
        private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange> changes_;

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange> getChangesList() {
            return changes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder>
        getChangesOrBuilderList() {
            return changes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        public int getChangesCount() {
            return changes_.size();
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange getChanges(int index) {
            return changes_.get(index);
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder getChangesOrBuilder(
                int index) {
            return changes_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < changes_.size(); i++) {
                output.writeMessage(1, changes_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < changes_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, changes_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) obj;

            boolean result = true;
            result = result && getChangesList()
                    .equals(other.getChangesList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getChangesCount() > 0) {
                hash = (37 * hash) + CHANGES_FIELD_NUMBER;
                hash = (53 * hash) + getChangesList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * A list of changes to be sent in a single bulk notification.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getChangesFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (changesBuilder_ == null) {
                    changes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    changesBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest(this);
                int from_bitField0_ = bitField0_;
                if (changesBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        changes_ = java.util.Collections.unmodifiableList(changes_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.changes_ = changes_;
                } else {
                    result.changes_ = changesBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest.getDefaultInstance())
                    return this;
                if (changesBuilder_ == null) {
                    if (!other.changes_.isEmpty()) {
                        if (changes_.isEmpty()) {
                            changes_ = other.changes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureChangesIsMutable();
                            changes_.addAll(other.changes_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.changes_.isEmpty()) {
                        if (changesBuilder_.isEmpty()) {
                            changesBuilder_.dispose();
                            changesBuilder_ = null;
                            changes_ = other.changes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            changesBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getChangesFieldBuilder() : null;
                        } else {
                            changesBuilder_.addAllMessages(other.changes_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange> changes_ =
                    java.util.Collections.emptyList();

            private void ensureChangesIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    changes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange>(changes_);
                    bitField0_ |= 0x00000001;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder> changesBuilder_;

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange> getChangesList() {
                if (changesBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(changes_);
                } else {
                    return changesBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public int getChangesCount() {
                if (changesBuilder_ == null) {
                    return changes_.size();
                } else {
                    return changesBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange getChanges(int index) {
                if (changesBuilder_ == null) {
                    return changes_.get(index);
                } else {
                    return changesBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public Builder setChanges(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange value) {
                if (changesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureChangesIsMutable();
                    changes_.set(index, value);
                    onChanged();
                } else {
                    changesBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public Builder setChanges(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder builderForValue) {
                if (changesBuilder_ == null) {
                    ensureChangesIsMutable();
                    changes_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    changesBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public Builder addChanges(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange value) {
                if (changesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureChangesIsMutable();
                    changes_.add(value);
                    onChanged();
                } else {
                    changesBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public Builder addChanges(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange value) {
                if (changesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureChangesIsMutable();
                    changes_.add(index, value);
                    onChanged();
                } else {
                    changesBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public Builder addChanges(
                    org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder builderForValue) {
                if (changesBuilder_ == null) {
                    ensureChangesIsMutable();
                    changes_.add(builderForValue.build());
                    onChanged();
                } else {
                    changesBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public Builder addChanges(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder builderForValue) {
                if (changesBuilder_ == null) {
                    ensureChangesIsMutable();
                    changes_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    changesBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public Builder addAllChanges(
                    java.lang.Iterable<? extends org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange> values) {
                if (changesBuilder_ == null) {
                    ensureChangesIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, changes_);
                    onChanged();
                } else {
                    changesBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public Builder clearChanges() {
                if (changesBuilder_ == null) {
                    changes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    changesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public Builder removeChanges(int index) {
                if (changesBuilder_ == null) {
                    ensureChangesIsMutable();
                    changes_.remove(index);
                    onChanged();
                } else {
                    changesBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder getChangesBuilder(
                    int index) {
                return getChangesFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder getChangesOrBuilder(
                    int index) {
                if (changesBuilder_ == null) {
                    return changes_.get(index);
                } else {
                    return changesBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder>
            getChangesOrBuilderList() {
                if (changesBuilder_ != null) {
                    return changesBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(changes_);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder addChangesBuilder() {
                return getChangesFieldBuilder().addBuilder(
                        org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder addChangesBuilder(
                    int index) {
                return getChangesFieldBuilder().addBuilder(
                        index, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NeighbourhoodChange changes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder>
            getChangesBuilderList() {
                return getChangesFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder>
            getChangesFieldBuilder() {
                if (changesBuilder_ == null) {
                    changesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChange.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangeOrBuilder>(
                            changes_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    changes_ = null;
                }
                return changesBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<NeighbourhoodChangedNotificationRequest>
                PARSER = new com.google.protobuf.AbstractParser<NeighbourhoodChangedNotificationRequest>() {
            public NeighbourhoodChangedNotificationRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new NeighbourhoodChangedNotificationRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<NeighbourhoodChangedNotificationRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<NeighbourhoodChangedNotificationRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface NeighbourhoodChangedNotificationResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse)
            com.google.protobuf.MessageOrBuilder {
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse}
     */
    public static final class NeighbourhoodChangedNotificationResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse)
            NeighbourhoodChangedNotificationResponseOrBuilder {
        // Use NeighbourhoodChangedNotificationResponse.newBuilder() to construct.
        private NeighbourhoodChangedNotificationResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private NeighbourhoodChangedNotificationResponse() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private NeighbourhoodChangedNotificationResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.Builder.class);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) obj;

            boolean result = true;
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse(this);
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse.getDefaultInstance())
                    return this;
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.NeighbourhoodChangedNotificationResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<NeighbourhoodChangedNotificationResponse>
                PARSER = new com.google.protobuf.AbstractParser<NeighbourhoodChangedNotificationResponse>() {
            public NeighbourhoodChangedNotificationResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new NeighbourhoodChangedNotificationResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<NeighbourhoodChangedNotificationResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<NeighbourhoodChangedNotificationResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.NeighbourhoodChangedNotificationResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface RemoteNodeRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.RemoteNodeRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getAcceptColleague();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getAcceptColleagueOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getRenewColleague();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getRenewColleagueOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getAcceptNeighbour();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getAcceptNeighbourOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getRenewNeighbour();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getRenewNeighbourOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest getGetNodeCount();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequestOrBuilder getGetNodeCountOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest getGetRandomNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder getGetRandomNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest getGetClosestNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder getGetClosestNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getGetNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder getGetNodeInfoOrBuilder();

        public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.RemoteNodeRequestTypeCase getRemoteNodeRequestTypeCase();
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.RemoteNodeRequest}
     */
    public static final class RemoteNodeRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.RemoteNodeRequest)
            RemoteNodeRequestOrBuilder {
        // Use RemoteNodeRequest.newBuilder() to construct.
        private RemoteNodeRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private RemoteNodeRequest() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private RemoteNodeRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder subBuilder = null;
                            if (remoteNodeRequestTypeCase_ == 1) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_).toBuilder();
                            }
                            remoteNodeRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
                                remoteNodeRequestType_ = subBuilder.buildPartial();
                            }
                            remoteNodeRequestTypeCase_ = 1;
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder subBuilder = null;
                            if (remoteNodeRequestTypeCase_ == 2) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_).toBuilder();
                            }
                            remoteNodeRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
                                remoteNodeRequestType_ = subBuilder.buildPartial();
                            }
                            remoteNodeRequestTypeCase_ = 2;
                            break;
                        }
                        case 26: {
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder subBuilder = null;
                            if (remoteNodeRequestTypeCase_ == 3) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_).toBuilder();
                            }
                            remoteNodeRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
                                remoteNodeRequestType_ = subBuilder.buildPartial();
                            }
                            remoteNodeRequestTypeCase_ = 3;
                            break;
                        }
                        case 34: {
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder subBuilder = null;
                            if (remoteNodeRequestTypeCase_ == 4) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_).toBuilder();
                            }
                            remoteNodeRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
                                remoteNodeRequestType_ = subBuilder.buildPartial();
                            }
                            remoteNodeRequestTypeCase_ = 4;
                            break;
                        }
                        case 42: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.Builder subBuilder = null;
                            if (remoteNodeRequestTypeCase_ == 5) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_).toBuilder();
                            }
                            remoteNodeRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_);
                                remoteNodeRequestType_ = subBuilder.buildPartial();
                            }
                            remoteNodeRequestTypeCase_ = 5;
                            break;
                        }
                        case 50: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder subBuilder = null;
                            if (remoteNodeRequestTypeCase_ == 6) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_).toBuilder();
                            }
                            remoteNodeRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_);
                                remoteNodeRequestType_ = subBuilder.buildPartial();
                            }
                            remoteNodeRequestTypeCase_ = 6;
                            break;
                        }
                        case 58: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder subBuilder = null;
                            if (remoteNodeRequestTypeCase_ == 7) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_).toBuilder();
                            }
                            remoteNodeRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_);
                                remoteNodeRequestType_ = subBuilder.buildPartial();
                            }
                            remoteNodeRequestTypeCase_ = 7;
                            break;
                        }
                        case 66: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder subBuilder = null;
                            if (remoteNodeRequestTypeCase_ == 8) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_).toBuilder();
                            }
                            remoteNodeRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_);
                                remoteNodeRequestType_ = subBuilder.buildPartial();
                            }
                            remoteNodeRequestTypeCase_ = 8;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.Builder.class);
        }

        private int remoteNodeRequestTypeCase_ = 0;
        private java.lang.Object remoteNodeRequestType_;

        public enum RemoteNodeRequestTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            ACCEPT_COLLEAGUE(1),
            RENEW_COLLEAGUE(2),
            ACCEPT_NEIGHBOUR(3),
            RENEW_NEIGHBOUR(4),
            GET_NODE_COUNT(5),
            GET_RANDOM_NODES(6),
            GET_CLOSEST_NODES(7),
            GET_NODE_INFO(8),
            REMOTENODEREQUESTTYPE_NOT_SET(0);
            private final int value;

            private RemoteNodeRequestTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static RemoteNodeRequestTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static RemoteNodeRequestTypeCase forNumber(int value) {
                switch (value) {
                    case 1:
                        return ACCEPT_COLLEAGUE;
                    case 2:
                        return RENEW_COLLEAGUE;
                    case 3:
                        return ACCEPT_NEIGHBOUR;
                    case 4:
                        return RENEW_NEIGHBOUR;
                    case 5:
                        return GET_NODE_COUNT;
                    case 6:
                        return GET_RANDOM_NODES;
                    case 7:
                        return GET_CLOSEST_NODES;
                    case 8:
                        return GET_NODE_INFO;
                    case 0:
                        return REMOTENODEREQUESTTYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public RemoteNodeRequestTypeCase
        getRemoteNodeRequestTypeCase() {
            return RemoteNodeRequestTypeCase.forNumber(
                    remoteNodeRequestTypeCase_);
        }

        public static final int ACCEPT_COLLEAGUE_FIELD_NUMBER = 1;

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getAcceptColleague() {
            if (remoteNodeRequestTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getAcceptColleagueOrBuilder() {
            if (remoteNodeRequestTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
        }

        public static final int RENEW_COLLEAGUE_FIELD_NUMBER = 2;

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getRenewColleague() {
            if (remoteNodeRequestTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getRenewColleagueOrBuilder() {
            if (remoteNodeRequestTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
        }

        public static final int ACCEPT_NEIGHBOUR_FIELD_NUMBER = 3;

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getAcceptNeighbour() {
            if (remoteNodeRequestTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getAcceptNeighbourOrBuilder() {
            if (remoteNodeRequestTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
        }

        public static final int RENEW_NEIGHBOUR_FIELD_NUMBER = 4;

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getRenewNeighbour() {
            if (remoteNodeRequestTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getRenewNeighbourOrBuilder() {
            if (remoteNodeRequestTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
        }

        public static final int GET_NODE_COUNT_FIELD_NUMBER = 5;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest getGetNodeCount() {
            if (remoteNodeRequestTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequestOrBuilder getGetNodeCountOrBuilder() {
            if (remoteNodeRequestTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.getDefaultInstance();
        }

        public static final int GET_RANDOM_NODES_FIELD_NUMBER = 6;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest getGetRandomNodes() {
            if (remoteNodeRequestTypeCase_ == 6) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder getGetRandomNodesOrBuilder() {
            if (remoteNodeRequestTypeCase_ == 6) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
        }

        public static final int GET_CLOSEST_NODES_FIELD_NUMBER = 7;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest getGetClosestNodes() {
            if (remoteNodeRequestTypeCase_ == 7) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder getGetClosestNodesOrBuilder() {
            if (remoteNodeRequestTypeCase_ == 7) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
        }

        public static final int GET_NODE_INFO_FIELD_NUMBER = 8;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getGetNodeInfo() {
            if (remoteNodeRequestTypeCase_ == 8) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder getGetNodeInfoOrBuilder() {
            if (remoteNodeRequestTypeCase_ == 8) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (remoteNodeRequestTypeCase_ == 1) {
                output.writeMessage(1, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 2) {
                output.writeMessage(2, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 3) {
                output.writeMessage(3, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 4) {
                output.writeMessage(4, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 5) {
                output.writeMessage(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 6) {
                output.writeMessage(6, (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 7) {
                output.writeMessage(7, (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 8) {
                output.writeMessage(8, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (remoteNodeRequestTypeCase_ == 1) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 2) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 3) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 4) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 5) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 6) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(6, (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 7) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(7, (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_);
            }
            if (remoteNodeRequestTypeCase_ == 8) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(8, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) obj;

            boolean result = true;
            result = result && getRemoteNodeRequestTypeCase().equals(
                    other.getRemoteNodeRequestTypeCase());
            if (!result) return false;
            switch (remoteNodeRequestTypeCase_) {
                case 1:
                    result = result && getAcceptColleague()
                            .equals(other.getAcceptColleague());
                    break;
                case 2:
                    result = result && getRenewColleague()
                            .equals(other.getRenewColleague());
                    break;
                case 3:
                    result = result && getAcceptNeighbour()
                            .equals(other.getAcceptNeighbour());
                    break;
                case 4:
                    result = result && getRenewNeighbour()
                            .equals(other.getRenewNeighbour());
                    break;
                case 5:
                    result = result && getGetNodeCount()
                            .equals(other.getGetNodeCount());
                    break;
                case 6:
                    result = result && getGetRandomNodes()
                            .equals(other.getGetRandomNodes());
                    break;
                case 7:
                    result = result && getGetClosestNodes()
                            .equals(other.getGetClosestNodes());
                    break;
                case 8:
                    result = result && getGetNodeInfo()
                            .equals(other.getGetNodeInfo());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            switch (remoteNodeRequestTypeCase_) {
                case 1:
                    hash = (37 * hash) + ACCEPT_COLLEAGUE_FIELD_NUMBER;
                    hash = (53 * hash) + getAcceptColleague().hashCode();
                    break;
                case 2:
                    hash = (37 * hash) + RENEW_COLLEAGUE_FIELD_NUMBER;
                    hash = (53 * hash) + getRenewColleague().hashCode();
                    break;
                case 3:
                    hash = (37 * hash) + ACCEPT_NEIGHBOUR_FIELD_NUMBER;
                    hash = (53 * hash) + getAcceptNeighbour().hashCode();
                    break;
                case 4:
                    hash = (37 * hash) + RENEW_NEIGHBOUR_FIELD_NUMBER;
                    hash = (53 * hash) + getRenewNeighbour().hashCode();
                    break;
                case 5:
                    hash = (37 * hash) + GET_NODE_COUNT_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNodeCount().hashCode();
                    break;
                case 6:
                    hash = (37 * hash) + GET_RANDOM_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetRandomNodes().hashCode();
                    break;
                case 7:
                    hash = (37 * hash) + GET_CLOSEST_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetClosestNodes().hashCode();
                    break;
                case 8:
                    hash = (37 * hash) + GET_NODE_INFO_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNodeInfo().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.RemoteNodeRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.RemoteNodeRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                remoteNodeRequestTypeCase_ = 0;
                remoteNodeRequestType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest(this);
                if (remoteNodeRequestTypeCase_ == 1) {
                    if (acceptColleagueBuilder_ == null) {
                        result.remoteNodeRequestType_ = remoteNodeRequestType_;
                    } else {
                        result.remoteNodeRequestType_ = acceptColleagueBuilder_.build();
                    }
                }
                if (remoteNodeRequestTypeCase_ == 2) {
                    if (renewColleagueBuilder_ == null) {
                        result.remoteNodeRequestType_ = remoteNodeRequestType_;
                    } else {
                        result.remoteNodeRequestType_ = renewColleagueBuilder_.build();
                    }
                }
                if (remoteNodeRequestTypeCase_ == 3) {
                    if (acceptNeighbourBuilder_ == null) {
                        result.remoteNodeRequestType_ = remoteNodeRequestType_;
                    } else {
                        result.remoteNodeRequestType_ = acceptNeighbourBuilder_.build();
                    }
                }
                if (remoteNodeRequestTypeCase_ == 4) {
                    if (renewNeighbourBuilder_ == null) {
                        result.remoteNodeRequestType_ = remoteNodeRequestType_;
                    } else {
                        result.remoteNodeRequestType_ = renewNeighbourBuilder_.build();
                    }
                }
                if (remoteNodeRequestTypeCase_ == 5) {
                    if (getNodeCountBuilder_ == null) {
                        result.remoteNodeRequestType_ = remoteNodeRequestType_;
                    } else {
                        result.remoteNodeRequestType_ = getNodeCountBuilder_.build();
                    }
                }
                if (remoteNodeRequestTypeCase_ == 6) {
                    if (getRandomNodesBuilder_ == null) {
                        result.remoteNodeRequestType_ = remoteNodeRequestType_;
                    } else {
                        result.remoteNodeRequestType_ = getRandomNodesBuilder_.build();
                    }
                }
                if (remoteNodeRequestTypeCase_ == 7) {
                    if (getClosestNodesBuilder_ == null) {
                        result.remoteNodeRequestType_ = remoteNodeRequestType_;
                    } else {
                        result.remoteNodeRequestType_ = getClosestNodesBuilder_.build();
                    }
                }
                if (remoteNodeRequestTypeCase_ == 8) {
                    if (getNodeInfoBuilder_ == null) {
                        result.remoteNodeRequestType_ = remoteNodeRequestType_;
                    } else {
                        result.remoteNodeRequestType_ = getNodeInfoBuilder_.build();
                    }
                }
                result.remoteNodeRequestTypeCase_ = remoteNodeRequestTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest.getDefaultInstance())
                    return this;
                switch (other.getRemoteNodeRequestTypeCase()) {
                    case ACCEPT_COLLEAGUE: {
                        mergeAcceptColleague(other.getAcceptColleague());
                        break;
                    }
                    case RENEW_COLLEAGUE: {
                        mergeRenewColleague(other.getRenewColleague());
                        break;
                    }
                    case ACCEPT_NEIGHBOUR: {
                        mergeAcceptNeighbour(other.getAcceptNeighbour());
                        break;
                    }
                    case RENEW_NEIGHBOUR: {
                        mergeRenewNeighbour(other.getRenewNeighbour());
                        break;
                    }
                    case GET_NODE_COUNT: {
                        mergeGetNodeCount(other.getGetNodeCount());
                        break;
                    }
                    case GET_RANDOM_NODES: {
                        mergeGetRandomNodes(other.getGetRandomNodes());
                        break;
                    }
                    case GET_CLOSEST_NODES: {
                        mergeGetClosestNodes(other.getGetClosestNodes());
                        break;
                    }
                    case GET_NODE_INFO: {
                        mergeGetNodeInfo(other.getGetNodeInfo());
                        break;
                    }
                    case REMOTENODEREQUESTTYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int remoteNodeRequestTypeCase_ = 0;
            private java.lang.Object remoteNodeRequestType_;

            public RemoteNodeRequestTypeCase
            getRemoteNodeRequestTypeCase() {
                return RemoteNodeRequestTypeCase.forNumber(
                        remoteNodeRequestTypeCase_);
            }

            public Builder clearRemoteNodeRequestType() {
                remoteNodeRequestTypeCase_ = 0;
                remoteNodeRequestType_ = null;
                onChanged();
                return this;
            }


            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder> acceptColleagueBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getAcceptColleague() {
                if (acceptColleagueBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                } else {
                    if (remoteNodeRequestTypeCase_ == 1) {
                        return acceptColleagueBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
             */
            public Builder setAcceptColleague(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest value) {
                if (acceptColleagueBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeRequestType_ = value;
                    onChanged();
                } else {
                    acceptColleagueBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
             */
            public Builder setAcceptColleague(
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder builderForValue) {
                if (acceptColleagueBuilder_ == null) {
                    remoteNodeRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    acceptColleagueBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeRequestTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
             */
            public Builder mergeAcceptColleague(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest value) {
                if (acceptColleagueBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 1 &&
                            remoteNodeRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance()) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeRequestTypeCase_ == 1) {
                        acceptColleagueBuilder_.mergeFrom(value);
                    }
                    acceptColleagueBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
             */
            public Builder clearAcceptColleague() {
                if (acceptColleagueBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 1) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeRequestTypeCase_ == 1) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                    }
                    acceptColleagueBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder getAcceptColleagueBuilder() {
                return getAcceptColleagueFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getAcceptColleagueOrBuilder() {
                if ((remoteNodeRequestTypeCase_ == 1) && (acceptColleagueBuilder_ != null)) {
                    return acceptColleagueBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeRequestTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_colleague = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder>
            getAcceptColleagueFieldBuilder() {
                if (acceptColleagueBuilder_ == null) {
                    if (!(remoteNodeRequestTypeCase_ == 1)) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                    }
                    acceptColleagueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeRequestType_ = null;
                }
                remoteNodeRequestTypeCase_ = 1;
                onChanged();
                ;
                return acceptColleagueBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder> renewColleagueBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getRenewColleague() {
                if (renewColleagueBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                } else {
                    if (remoteNodeRequestTypeCase_ == 2) {
                        return renewColleagueBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
             */
            public Builder setRenewColleague(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest value) {
                if (renewColleagueBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeRequestType_ = value;
                    onChanged();
                } else {
                    renewColleagueBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
             */
            public Builder setRenewColleague(
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder builderForValue) {
                if (renewColleagueBuilder_ == null) {
                    remoteNodeRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    renewColleagueBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeRequestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
             */
            public Builder mergeRenewColleague(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest value) {
                if (renewColleagueBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 2 &&
                            remoteNodeRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance()) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeRequestTypeCase_ == 2) {
                        renewColleagueBuilder_.mergeFrom(value);
                    }
                    renewColleagueBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
             */
            public Builder clearRenewColleague() {
                if (renewColleagueBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 2) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeRequestTypeCase_ == 2) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                    }
                    renewColleagueBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder getRenewColleagueBuilder() {
                return getRenewColleagueFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getRenewColleagueOrBuilder() {
                if ((remoteNodeRequestTypeCase_ == 2) && (renewColleagueBuilder_ != null)) {
                    return renewColleagueBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeRequestTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_colleague = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder>
            getRenewColleagueFieldBuilder() {
                if (renewColleagueBuilder_ == null) {
                    if (!(remoteNodeRequestTypeCase_ == 2)) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                    }
                    renewColleagueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeRequestType_ = null;
                }
                remoteNodeRequestTypeCase_ = 2;
                onChanged();
                ;
                return renewColleagueBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder> acceptNeighbourBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getAcceptNeighbour() {
                if (acceptNeighbourBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                } else {
                    if (remoteNodeRequestTypeCase_ == 3) {
                        return acceptNeighbourBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
             */
            public Builder setAcceptNeighbour(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest value) {
                if (acceptNeighbourBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeRequestType_ = value;
                    onChanged();
                } else {
                    acceptNeighbourBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
             */
            public Builder setAcceptNeighbour(
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder builderForValue) {
                if (acceptNeighbourBuilder_ == null) {
                    remoteNodeRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    acceptNeighbourBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeRequestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
             */
            public Builder mergeAcceptNeighbour(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest value) {
                if (acceptNeighbourBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 3 &&
                            remoteNodeRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance()) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeRequestTypeCase_ == 3) {
                        acceptNeighbourBuilder_.mergeFrom(value);
                    }
                    acceptNeighbourBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
             */
            public Builder clearAcceptNeighbour() {
                if (acceptNeighbourBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 3) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeRequestTypeCase_ == 3) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                    }
                    acceptNeighbourBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder getAcceptNeighbourBuilder() {
                return getAcceptNeighbourFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getAcceptNeighbourOrBuilder() {
                if ((remoteNodeRequestTypeCase_ == 3) && (acceptNeighbourBuilder_ != null)) {
                    return acceptNeighbourBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeRequestTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest accept_neighbour = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder>
            getAcceptNeighbourFieldBuilder() {
                if (acceptNeighbourBuilder_ == null) {
                    if (!(remoteNodeRequestTypeCase_ == 3)) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                    }
                    acceptNeighbourBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeRequestType_ = null;
                }
                remoteNodeRequestTypeCase_ = 3;
                onChanged();
                ;
                return acceptNeighbourBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder> renewNeighbourBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getRenewNeighbour() {
                if (renewNeighbourBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                } else {
                    if (remoteNodeRequestTypeCase_ == 4) {
                        return renewNeighbourBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
             */
            public Builder setRenewNeighbour(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest value) {
                if (renewNeighbourBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeRequestType_ = value;
                    onChanged();
                } else {
                    renewNeighbourBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
             */
            public Builder setRenewNeighbour(
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder builderForValue) {
                if (renewNeighbourBuilder_ == null) {
                    remoteNodeRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    renewNeighbourBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeRequestTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
             */
            public Builder mergeRenewNeighbour(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest value) {
                if (renewNeighbourBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 4 &&
                            remoteNodeRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance()) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeRequestTypeCase_ == 4) {
                        renewNeighbourBuilder_.mergeFrom(value);
                    }
                    renewNeighbourBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
             */
            public Builder clearRenewNeighbour() {
                if (renewNeighbourBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 4) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeRequestTypeCase_ == 4) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                    }
                    renewNeighbourBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder getRenewNeighbourBuilder() {
                return getRenewNeighbourFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder getRenewNeighbourOrBuilder() {
                if ((remoteNodeRequestTypeCase_ == 4) && (renewNeighbourBuilder_ != null)) {
                    return renewNeighbourBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeRequestTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkRequest renew_neighbour = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder>
            getRenewNeighbourFieldBuilder() {
                if (renewNeighbourBuilder_ == null) {
                    if (!(remoteNodeRequestTypeCase_ == 4)) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
                    }
                    renewNeighbourBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) remoteNodeRequestType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeRequestType_ = null;
                }
                remoteNodeRequestTypeCase_ = 4;
                onChanged();
                ;
                return renewNeighbourBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequestOrBuilder> getNodeCountBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest getGetNodeCount() {
                if (getNodeCountBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.getDefaultInstance();
                } else {
                    if (remoteNodeRequestTypeCase_ == 5) {
                        return getNodeCountBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
             */
            public Builder setGetNodeCount(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest value) {
                if (getNodeCountBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeRequestType_ = value;
                    onChanged();
                } else {
                    getNodeCountBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
             */
            public Builder setGetNodeCount(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.Builder builderForValue) {
                if (getNodeCountBuilder_ == null) {
                    remoteNodeRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNodeCountBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeRequestTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
             */
            public Builder mergeGetNodeCount(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest value) {
                if (getNodeCountBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 5 &&
                            remoteNodeRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.getDefaultInstance()) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeRequestTypeCase_ == 5) {
                        getNodeCountBuilder_.mergeFrom(value);
                    }
                    getNodeCountBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
             */
            public Builder clearGetNodeCount() {
                if (getNodeCountBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 5) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeRequestTypeCase_ == 5) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                    }
                    getNodeCountBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.Builder getGetNodeCountBuilder() {
                return getGetNodeCountFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequestOrBuilder getGetNodeCountOrBuilder() {
                if ((remoteNodeRequestTypeCase_ == 5) && (getNodeCountBuilder_ != null)) {
                    return getNodeCountBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeRequestTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountRequest get_node_count = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequestOrBuilder>
            getGetNodeCountFieldBuilder() {
                if (getNodeCountBuilder_ == null) {
                    if (!(remoteNodeRequestTypeCase_ == 5)) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.getDefaultInstance();
                    }
                    getNodeCountBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) remoteNodeRequestType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeRequestType_ = null;
                }
                remoteNodeRequestTypeCase_ = 5;
                onChanged();
                ;
                return getNodeCountBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder> getRandomNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest getGetRandomNodes() {
                if (getRandomNodesBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 6) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
                } else {
                    if (remoteNodeRequestTypeCase_ == 6) {
                        return getRandomNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
             */
            public Builder setGetRandomNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest value) {
                if (getRandomNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeRequestType_ = value;
                    onChanged();
                } else {
                    getRandomNodesBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 6;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
             */
            public Builder setGetRandomNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder builderForValue) {
                if (getRandomNodesBuilder_ == null) {
                    remoteNodeRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getRandomNodesBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeRequestTypeCase_ = 6;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
             */
            public Builder mergeGetRandomNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest value) {
                if (getRandomNodesBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 6 &&
                            remoteNodeRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance()) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeRequestTypeCase_ == 6) {
                        getRandomNodesBuilder_.mergeFrom(value);
                    }
                    getRandomNodesBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 6;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
             */
            public Builder clearGetRandomNodes() {
                if (getRandomNodesBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 6) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeRequestTypeCase_ == 6) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                    }
                    getRandomNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder getGetRandomNodesBuilder() {
                return getGetRandomNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder getGetRandomNodesOrBuilder() {
                if ((remoteNodeRequestTypeCase_ == 6) && (getRandomNodesBuilder_ != null)) {
                    return getRandomNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeRequestTypeCase_ == 6) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 6;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder>
            getGetRandomNodesFieldBuilder() {
                if (getRandomNodesBuilder_ == null) {
                    if (!(remoteNodeRequestTypeCase_ == 6)) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
                    }
                    getRandomNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) remoteNodeRequestType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeRequestType_ = null;
                }
                remoteNodeRequestTypeCase_ = 6;
                onChanged();
                ;
                return getRandomNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder> getClosestNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest getGetClosestNodes() {
                if (getClosestNodesBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 7) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
                } else {
                    if (remoteNodeRequestTypeCase_ == 7) {
                        return getClosestNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
             */
            public Builder setGetClosestNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest value) {
                if (getClosestNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeRequestType_ = value;
                    onChanged();
                } else {
                    getClosestNodesBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 7;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
             */
            public Builder setGetClosestNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder builderForValue) {
                if (getClosestNodesBuilder_ == null) {
                    remoteNodeRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getClosestNodesBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeRequestTypeCase_ = 7;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
             */
            public Builder mergeGetClosestNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest value) {
                if (getClosestNodesBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 7 &&
                            remoteNodeRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance()) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeRequestTypeCase_ == 7) {
                        getClosestNodesBuilder_.mergeFrom(value);
                    }
                    getClosestNodesBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 7;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
             */
            public Builder clearGetClosestNodes() {
                if (getClosestNodesBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 7) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeRequestTypeCase_ == 7) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                    }
                    getClosestNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder getGetClosestNodesBuilder() {
                return getGetClosestNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder getGetClosestNodesOrBuilder() {
                if ((remoteNodeRequestTypeCase_ == 7) && (getClosestNodesBuilder_ != null)) {
                    return getClosestNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeRequestTypeCase_ == 7) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 7;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder>
            getGetClosestNodesFieldBuilder() {
                if (getClosestNodesBuilder_ == null) {
                    if (!(remoteNodeRequestTypeCase_ == 7)) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
                    }
                    getClosestNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) remoteNodeRequestType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeRequestType_ = null;
                }
                remoteNodeRequestTypeCase_ = 7;
                onChanged();
                ;
                return getClosestNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder> getNodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 8) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                } else {
                    if (remoteNodeRequestTypeCase_ == 8) {
                        return getNodeInfoBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
             */
            public Builder setGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest value) {
                if (getNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeRequestType_ = value;
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 8;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
             */
            public Builder setGetNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder builderForValue) {
                if (getNodeInfoBuilder_ == null) {
                    remoteNodeRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeRequestTypeCase_ = 8;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
             */
            public Builder mergeGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest value) {
                if (getNodeInfoBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 8 &&
                            remoteNodeRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance()) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeRequestTypeCase_ == 8) {
                        getNodeInfoBuilder_.mergeFrom(value);
                    }
                    getNodeInfoBuilder_.setMessage(value);
                }
                remoteNodeRequestTypeCase_ = 8;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
             */
            public Builder clearGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (remoteNodeRequestTypeCase_ == 8) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeRequestTypeCase_ == 8) {
                        remoteNodeRequestTypeCase_ = 0;
                        remoteNodeRequestType_ = null;
                    }
                    getNodeInfoBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder getGetNodeInfoBuilder() {
                return getGetNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder getGetNodeInfoOrBuilder() {
                if ((remoteNodeRequestTypeCase_ == 8) && (getNodeInfoBuilder_ != null)) {
                    return getNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeRequestTypeCase_ == 8) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 8;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder>
            getGetNodeInfoFieldBuilder() {
                if (getNodeInfoBuilder_ == null) {
                    if (!(remoteNodeRequestTypeCase_ == 8)) {
                        remoteNodeRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                    }
                    getNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) remoteNodeRequestType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeRequestType_ = null;
                }
                remoteNodeRequestTypeCase_ = 8;
                onChanged();
                ;
                return getNodeInfoBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.RemoteNodeRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.RemoteNodeRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<RemoteNodeRequest>
                PARSER = new com.google.protobuf.AbstractParser<RemoteNodeRequest>() {
            public RemoteNodeRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new RemoteNodeRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<RemoteNodeRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<RemoteNodeRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface RemoteNodeResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.RemoteNodeResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getAcceptColleague();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getAcceptColleagueOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getRenewColleague();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getRenewColleagueOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getAcceptNeighbour();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getAcceptNeighbourOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getRenewNeighbour();

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getRenewNeighbourOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse getGetNodeCount();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponseOrBuilder getGetNodeCountOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse getGetRandomNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder getGetRandomNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse getGetClosestNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder getGetClosestNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getGetNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder getGetNodeInfoOrBuilder();

        public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.RemoteNodeResponseTypeCase getRemoteNodeResponseTypeCase();
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.RemoteNodeResponse}
     */
    public static final class RemoteNodeResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.RemoteNodeResponse)
            RemoteNodeResponseOrBuilder {
        // Use RemoteNodeResponse.newBuilder() to construct.
        private RemoteNodeResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private RemoteNodeResponse() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private RemoteNodeResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder subBuilder = null;
                            if (remoteNodeResponseTypeCase_ == 1) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_).toBuilder();
                            }
                            remoteNodeResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
                                remoteNodeResponseType_ = subBuilder.buildPartial();
                            }
                            remoteNodeResponseTypeCase_ = 1;
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder subBuilder = null;
                            if (remoteNodeResponseTypeCase_ == 2) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_).toBuilder();
                            }
                            remoteNodeResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
                                remoteNodeResponseType_ = subBuilder.buildPartial();
                            }
                            remoteNodeResponseTypeCase_ = 2;
                            break;
                        }
                        case 26: {
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder subBuilder = null;
                            if (remoteNodeResponseTypeCase_ == 3) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_).toBuilder();
                            }
                            remoteNodeResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
                                remoteNodeResponseType_ = subBuilder.buildPartial();
                            }
                            remoteNodeResponseTypeCase_ = 3;
                            break;
                        }
                        case 34: {
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder subBuilder = null;
                            if (remoteNodeResponseTypeCase_ == 4) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_).toBuilder();
                            }
                            remoteNodeResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
                                remoteNodeResponseType_ = subBuilder.buildPartial();
                            }
                            remoteNodeResponseTypeCase_ = 4;
                            break;
                        }
                        case 42: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.Builder subBuilder = null;
                            if (remoteNodeResponseTypeCase_ == 5) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_).toBuilder();
                            }
                            remoteNodeResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_);
                                remoteNodeResponseType_ = subBuilder.buildPartial();
                            }
                            remoteNodeResponseTypeCase_ = 5;
                            break;
                        }
                        case 50: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder subBuilder = null;
                            if (remoteNodeResponseTypeCase_ == 6) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_).toBuilder();
                            }
                            remoteNodeResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_);
                                remoteNodeResponseType_ = subBuilder.buildPartial();
                            }
                            remoteNodeResponseTypeCase_ = 6;
                            break;
                        }
                        case 58: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder subBuilder = null;
                            if (remoteNodeResponseTypeCase_ == 7) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_).toBuilder();
                            }
                            remoteNodeResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_);
                                remoteNodeResponseType_ = subBuilder.buildPartial();
                            }
                            remoteNodeResponseTypeCase_ = 7;
                            break;
                        }
                        case 66: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder subBuilder = null;
                            if (remoteNodeResponseTypeCase_ == 8) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_).toBuilder();
                            }
                            remoteNodeResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_);
                                remoteNodeResponseType_ = subBuilder.buildPartial();
                            }
                            remoteNodeResponseTypeCase_ = 8;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.Builder.class);
        }

        private int remoteNodeResponseTypeCase_ = 0;
        private java.lang.Object remoteNodeResponseType_;

        public enum RemoteNodeResponseTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            ACCEPT_COLLEAGUE(1),
            RENEW_COLLEAGUE(2),
            ACCEPT_NEIGHBOUR(3),
            RENEW_NEIGHBOUR(4),
            GET_NODE_COUNT(5),
            GET_RANDOM_NODES(6),
            GET_CLOSEST_NODES(7),
            GET_NODE_INFO(8),
            REMOTENODERESPONSETYPE_NOT_SET(0);
            private final int value;

            private RemoteNodeResponseTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static RemoteNodeResponseTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static RemoteNodeResponseTypeCase forNumber(int value) {
                switch (value) {
                    case 1:
                        return ACCEPT_COLLEAGUE;
                    case 2:
                        return RENEW_COLLEAGUE;
                    case 3:
                        return ACCEPT_NEIGHBOUR;
                    case 4:
                        return RENEW_NEIGHBOUR;
                    case 5:
                        return GET_NODE_COUNT;
                    case 6:
                        return GET_RANDOM_NODES;
                    case 7:
                        return GET_CLOSEST_NODES;
                    case 8:
                        return GET_NODE_INFO;
                    case 0:
                        return REMOTENODERESPONSETYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public RemoteNodeResponseTypeCase
        getRemoteNodeResponseTypeCase() {
            return RemoteNodeResponseTypeCase.forNumber(
                    remoteNodeResponseTypeCase_);
        }

        public static final int ACCEPT_COLLEAGUE_FIELD_NUMBER = 1;

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getAcceptColleague() {
            if (remoteNodeResponseTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getAcceptColleagueOrBuilder() {
            if (remoteNodeResponseTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
        }

        public static final int RENEW_COLLEAGUE_FIELD_NUMBER = 2;

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getRenewColleague() {
            if (remoteNodeResponseTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getRenewColleagueOrBuilder() {
            if (remoteNodeResponseTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
        }

        public static final int ACCEPT_NEIGHBOUR_FIELD_NUMBER = 3;

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getAcceptNeighbour() {
            if (remoteNodeResponseTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getAcceptNeighbourOrBuilder() {
            if (remoteNodeResponseTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
        }

        public static final int RENEW_NEIGHBOUR_FIELD_NUMBER = 4;

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getRenewNeighbour() {
            if (remoteNodeResponseTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getRenewNeighbourOrBuilder() {
            if (remoteNodeResponseTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
        }

        public static final int GET_NODE_COUNT_FIELD_NUMBER = 5;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse getGetNodeCount() {
            if (remoteNodeResponseTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponseOrBuilder getGetNodeCountOrBuilder() {
            if (remoteNodeResponseTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.getDefaultInstance();
        }

        public static final int GET_RANDOM_NODES_FIELD_NUMBER = 6;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse getGetRandomNodes() {
            if (remoteNodeResponseTypeCase_ == 6) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder getGetRandomNodesOrBuilder() {
            if (remoteNodeResponseTypeCase_ == 6) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
        }

        public static final int GET_CLOSEST_NODES_FIELD_NUMBER = 7;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse getGetClosestNodes() {
            if (remoteNodeResponseTypeCase_ == 7) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder getGetClosestNodesOrBuilder() {
            if (remoteNodeResponseTypeCase_ == 7) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
        }

        public static final int GET_NODE_INFO_FIELD_NUMBER = 8;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getGetNodeInfo() {
            if (remoteNodeResponseTypeCase_ == 8) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder getGetNodeInfoOrBuilder() {
            if (remoteNodeResponseTypeCase_ == 8) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (remoteNodeResponseTypeCase_ == 1) {
                output.writeMessage(1, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 2) {
                output.writeMessage(2, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 3) {
                output.writeMessage(3, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 4) {
                output.writeMessage(4, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 5) {
                output.writeMessage(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 6) {
                output.writeMessage(6, (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 7) {
                output.writeMessage(7, (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 8) {
                output.writeMessage(8, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (remoteNodeResponseTypeCase_ == 1) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 2) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 3) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 4) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 5) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 6) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(6, (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 7) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(7, (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_);
            }
            if (remoteNodeResponseTypeCase_ == 8) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(8, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) obj;

            boolean result = true;
            result = result && getRemoteNodeResponseTypeCase().equals(
                    other.getRemoteNodeResponseTypeCase());
            if (!result) return false;
            switch (remoteNodeResponseTypeCase_) {
                case 1:
                    result = result && getAcceptColleague()
                            .equals(other.getAcceptColleague());
                    break;
                case 2:
                    result = result && getRenewColleague()
                            .equals(other.getRenewColleague());
                    break;
                case 3:
                    result = result && getAcceptNeighbour()
                            .equals(other.getAcceptNeighbour());
                    break;
                case 4:
                    result = result && getRenewNeighbour()
                            .equals(other.getRenewNeighbour());
                    break;
                case 5:
                    result = result && getGetNodeCount()
                            .equals(other.getGetNodeCount());
                    break;
                case 6:
                    result = result && getGetRandomNodes()
                            .equals(other.getGetRandomNodes());
                    break;
                case 7:
                    result = result && getGetClosestNodes()
                            .equals(other.getGetClosestNodes());
                    break;
                case 8:
                    result = result && getGetNodeInfo()
                            .equals(other.getGetNodeInfo());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            switch (remoteNodeResponseTypeCase_) {
                case 1:
                    hash = (37 * hash) + ACCEPT_COLLEAGUE_FIELD_NUMBER;
                    hash = (53 * hash) + getAcceptColleague().hashCode();
                    break;
                case 2:
                    hash = (37 * hash) + RENEW_COLLEAGUE_FIELD_NUMBER;
                    hash = (53 * hash) + getRenewColleague().hashCode();
                    break;
                case 3:
                    hash = (37 * hash) + ACCEPT_NEIGHBOUR_FIELD_NUMBER;
                    hash = (53 * hash) + getAcceptNeighbour().hashCode();
                    break;
                case 4:
                    hash = (37 * hash) + RENEW_NEIGHBOUR_FIELD_NUMBER;
                    hash = (53 * hash) + getRenewNeighbour().hashCode();
                    break;
                case 5:
                    hash = (37 * hash) + GET_NODE_COUNT_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNodeCount().hashCode();
                    break;
                case 6:
                    hash = (37 * hash) + GET_RANDOM_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetRandomNodes().hashCode();
                    break;
                case 7:
                    hash = (37 * hash) + GET_CLOSEST_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetClosestNodes().hashCode();
                    break;
                case 8:
                    hash = (37 * hash) + GET_NODE_INFO_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNodeInfo().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.RemoteNodeResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.RemoteNodeResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                remoteNodeResponseTypeCase_ = 0;
                remoteNodeResponseType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse(this);
                if (remoteNodeResponseTypeCase_ == 1) {
                    if (acceptColleagueBuilder_ == null) {
                        result.remoteNodeResponseType_ = remoteNodeResponseType_;
                    } else {
                        result.remoteNodeResponseType_ = acceptColleagueBuilder_.build();
                    }
                }
                if (remoteNodeResponseTypeCase_ == 2) {
                    if (renewColleagueBuilder_ == null) {
                        result.remoteNodeResponseType_ = remoteNodeResponseType_;
                    } else {
                        result.remoteNodeResponseType_ = renewColleagueBuilder_.build();
                    }
                }
                if (remoteNodeResponseTypeCase_ == 3) {
                    if (acceptNeighbourBuilder_ == null) {
                        result.remoteNodeResponseType_ = remoteNodeResponseType_;
                    } else {
                        result.remoteNodeResponseType_ = acceptNeighbourBuilder_.build();
                    }
                }
                if (remoteNodeResponseTypeCase_ == 4) {
                    if (renewNeighbourBuilder_ == null) {
                        result.remoteNodeResponseType_ = remoteNodeResponseType_;
                    } else {
                        result.remoteNodeResponseType_ = renewNeighbourBuilder_.build();
                    }
                }
                if (remoteNodeResponseTypeCase_ == 5) {
                    if (getNodeCountBuilder_ == null) {
                        result.remoteNodeResponseType_ = remoteNodeResponseType_;
                    } else {
                        result.remoteNodeResponseType_ = getNodeCountBuilder_.build();
                    }
                }
                if (remoteNodeResponseTypeCase_ == 6) {
                    if (getRandomNodesBuilder_ == null) {
                        result.remoteNodeResponseType_ = remoteNodeResponseType_;
                    } else {
                        result.remoteNodeResponseType_ = getRandomNodesBuilder_.build();
                    }
                }
                if (remoteNodeResponseTypeCase_ == 7) {
                    if (getClosestNodesBuilder_ == null) {
                        result.remoteNodeResponseType_ = remoteNodeResponseType_;
                    } else {
                        result.remoteNodeResponseType_ = getClosestNodesBuilder_.build();
                    }
                }
                if (remoteNodeResponseTypeCase_ == 8) {
                    if (getNodeInfoBuilder_ == null) {
                        result.remoteNodeResponseType_ = remoteNodeResponseType_;
                    } else {
                        result.remoteNodeResponseType_ = getNodeInfoBuilder_.build();
                    }
                }
                result.remoteNodeResponseTypeCase_ = remoteNodeResponseTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse.getDefaultInstance())
                    return this;
                switch (other.getRemoteNodeResponseTypeCase()) {
                    case ACCEPT_COLLEAGUE: {
                        mergeAcceptColleague(other.getAcceptColleague());
                        break;
                    }
                    case RENEW_COLLEAGUE: {
                        mergeRenewColleague(other.getRenewColleague());
                        break;
                    }
                    case ACCEPT_NEIGHBOUR: {
                        mergeAcceptNeighbour(other.getAcceptNeighbour());
                        break;
                    }
                    case RENEW_NEIGHBOUR: {
                        mergeRenewNeighbour(other.getRenewNeighbour());
                        break;
                    }
                    case GET_NODE_COUNT: {
                        mergeGetNodeCount(other.getGetNodeCount());
                        break;
                    }
                    case GET_RANDOM_NODES: {
                        mergeGetRandomNodes(other.getGetRandomNodes());
                        break;
                    }
                    case GET_CLOSEST_NODES: {
                        mergeGetClosestNodes(other.getGetClosestNodes());
                        break;
                    }
                    case GET_NODE_INFO: {
                        mergeGetNodeInfo(other.getGetNodeInfo());
                        break;
                    }
                    case REMOTENODERESPONSETYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int remoteNodeResponseTypeCase_ = 0;
            private java.lang.Object remoteNodeResponseType_;

            public RemoteNodeResponseTypeCase
            getRemoteNodeResponseTypeCase() {
                return RemoteNodeResponseTypeCase.forNumber(
                        remoteNodeResponseTypeCase_);
            }

            public Builder clearRemoteNodeResponseType() {
                remoteNodeResponseTypeCase_ = 0;
                remoteNodeResponseType_ = null;
                onChanged();
                return this;
            }


            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder> acceptColleagueBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getAcceptColleague() {
                if (acceptColleagueBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                } else {
                    if (remoteNodeResponseTypeCase_ == 1) {
                        return acceptColleagueBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
             */
            public Builder setAcceptColleague(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse value) {
                if (acceptColleagueBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeResponseType_ = value;
                    onChanged();
                } else {
                    acceptColleagueBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
             */
            public Builder setAcceptColleague(
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder builderForValue) {
                if (acceptColleagueBuilder_ == null) {
                    remoteNodeResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    acceptColleagueBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeResponseTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
             */
            public Builder mergeAcceptColleague(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse value) {
                if (acceptColleagueBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 1 &&
                            remoteNodeResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance()) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeResponseTypeCase_ == 1) {
                        acceptColleagueBuilder_.mergeFrom(value);
                    }
                    acceptColleagueBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
             */
            public Builder clearAcceptColleague() {
                if (acceptColleagueBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 1) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeResponseTypeCase_ == 1) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                    }
                    acceptColleagueBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder getAcceptColleagueBuilder() {
                return getAcceptColleagueFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getAcceptColleagueOrBuilder() {
                if ((remoteNodeResponseTypeCase_ == 1) && (acceptColleagueBuilder_ != null)) {
                    return acceptColleagueBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeResponseTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_colleague = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder>
            getAcceptColleagueFieldBuilder() {
                if (acceptColleagueBuilder_ == null) {
                    if (!(remoteNodeResponseTypeCase_ == 1)) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                    }
                    acceptColleagueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeResponseType_ = null;
                }
                remoteNodeResponseTypeCase_ = 1;
                onChanged();
                ;
                return acceptColleagueBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder> renewColleagueBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getRenewColleague() {
                if (renewColleagueBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                } else {
                    if (remoteNodeResponseTypeCase_ == 2) {
                        return renewColleagueBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
             */
            public Builder setRenewColleague(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse value) {
                if (renewColleagueBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeResponseType_ = value;
                    onChanged();
                } else {
                    renewColleagueBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
             */
            public Builder setRenewColleague(
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder builderForValue) {
                if (renewColleagueBuilder_ == null) {
                    remoteNodeResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    renewColleagueBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeResponseTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
             */
            public Builder mergeRenewColleague(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse value) {
                if (renewColleagueBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 2 &&
                            remoteNodeResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance()) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeResponseTypeCase_ == 2) {
                        renewColleagueBuilder_.mergeFrom(value);
                    }
                    renewColleagueBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
             */
            public Builder clearRenewColleague() {
                if (renewColleagueBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 2) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeResponseTypeCase_ == 2) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                    }
                    renewColleagueBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder getRenewColleagueBuilder() {
                return getRenewColleagueFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getRenewColleagueOrBuilder() {
                if ((remoteNodeResponseTypeCase_ == 2) && (renewColleagueBuilder_ != null)) {
                    return renewColleagueBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeResponseTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_colleague = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder>
            getRenewColleagueFieldBuilder() {
                if (renewColleagueBuilder_ == null) {
                    if (!(remoteNodeResponseTypeCase_ == 2)) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                    }
                    renewColleagueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeResponseType_ = null;
                }
                remoteNodeResponseTypeCase_ = 2;
                onChanged();
                ;
                return renewColleagueBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder> acceptNeighbourBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getAcceptNeighbour() {
                if (acceptNeighbourBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                } else {
                    if (remoteNodeResponseTypeCase_ == 3) {
                        return acceptNeighbourBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
             */
            public Builder setAcceptNeighbour(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse value) {
                if (acceptNeighbourBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeResponseType_ = value;
                    onChanged();
                } else {
                    acceptNeighbourBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
             */
            public Builder setAcceptNeighbour(
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder builderForValue) {
                if (acceptNeighbourBuilder_ == null) {
                    remoteNodeResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    acceptNeighbourBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeResponseTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
             */
            public Builder mergeAcceptNeighbour(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse value) {
                if (acceptNeighbourBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 3 &&
                            remoteNodeResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance()) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeResponseTypeCase_ == 3) {
                        acceptNeighbourBuilder_.mergeFrom(value);
                    }
                    acceptNeighbourBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
             */
            public Builder clearAcceptNeighbour() {
                if (acceptNeighbourBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 3) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeResponseTypeCase_ == 3) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                    }
                    acceptNeighbourBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder getAcceptNeighbourBuilder() {
                return getAcceptNeighbourFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getAcceptNeighbourOrBuilder() {
                if ((remoteNodeResponseTypeCase_ == 3) && (acceptNeighbourBuilder_ != null)) {
                    return acceptNeighbourBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeResponseTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse accept_neighbour = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder>
            getAcceptNeighbourFieldBuilder() {
                if (acceptNeighbourBuilder_ == null) {
                    if (!(remoteNodeResponseTypeCase_ == 3)) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                    }
                    acceptNeighbourBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeResponseType_ = null;
                }
                remoteNodeResponseTypeCase_ = 3;
                onChanged();
                ;
                return acceptNeighbourBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder> renewNeighbourBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getRenewNeighbour() {
                if (renewNeighbourBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                } else {
                    if (remoteNodeResponseTypeCase_ == 4) {
                        return renewNeighbourBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
             */
            public Builder setRenewNeighbour(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse value) {
                if (renewNeighbourBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeResponseType_ = value;
                    onChanged();
                } else {
                    renewNeighbourBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
             */
            public Builder setRenewNeighbour(
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder builderForValue) {
                if (renewNeighbourBuilder_ == null) {
                    remoteNodeResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    renewNeighbourBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeResponseTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
             */
            public Builder mergeRenewNeighbour(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse value) {
                if (renewNeighbourBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 4 &&
                            remoteNodeResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance()) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeResponseTypeCase_ == 4) {
                        renewNeighbourBuilder_.mergeFrom(value);
                    }
                    renewNeighbourBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
             */
            public Builder clearRenewNeighbour() {
                if (renewNeighbourBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 4) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeResponseTypeCase_ == 4) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                    }
                    renewNeighbourBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder getRenewNeighbourBuilder() {
                return getRenewNeighbourFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder getRenewNeighbourOrBuilder() {
                if ((remoteNodeResponseTypeCase_ == 4) && (renewNeighbourBuilder_ != null)) {
                    return renewNeighbourBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeResponseTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.BuildNetworkResponse renew_neighbour = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder>
            getRenewNeighbourFieldBuilder() {
                if (renewNeighbourBuilder_ == null) {
                    if (!(remoteNodeResponseTypeCase_ == 4)) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
                    }
                    renewNeighbourBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) remoteNodeResponseType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeResponseType_ = null;
                }
                remoteNodeResponseTypeCase_ = 4;
                onChanged();
                ;
                return renewNeighbourBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponseOrBuilder> getNodeCountBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse getGetNodeCount() {
                if (getNodeCountBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.getDefaultInstance();
                } else {
                    if (remoteNodeResponseTypeCase_ == 5) {
                        return getNodeCountBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
             */
            public Builder setGetNodeCount(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse value) {
                if (getNodeCountBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeResponseType_ = value;
                    onChanged();
                } else {
                    getNodeCountBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
             */
            public Builder setGetNodeCount(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.Builder builderForValue) {
                if (getNodeCountBuilder_ == null) {
                    remoteNodeResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNodeCountBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeResponseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
             */
            public Builder mergeGetNodeCount(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse value) {
                if (getNodeCountBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 5 &&
                            remoteNodeResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.getDefaultInstance()) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeResponseTypeCase_ == 5) {
                        getNodeCountBuilder_.mergeFrom(value);
                    }
                    getNodeCountBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
             */
            public Builder clearGetNodeCount() {
                if (getNodeCountBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 5) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeResponseTypeCase_ == 5) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                    }
                    getNodeCountBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.Builder getGetNodeCountBuilder() {
                return getGetNodeCountFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponseOrBuilder getGetNodeCountOrBuilder() {
                if ((remoteNodeResponseTypeCase_ == 5) && (getNodeCountBuilder_ != null)) {
                    return getNodeCountBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeResponseTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeCountResponse get_node_count = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponseOrBuilder>
            getGetNodeCountFieldBuilder() {
                if (getNodeCountBuilder_ == null) {
                    if (!(remoteNodeResponseTypeCase_ == 5)) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.getDefaultInstance();
                    }
                    getNodeCountBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) remoteNodeResponseType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeResponseType_ = null;
                }
                remoteNodeResponseTypeCase_ = 5;
                onChanged();
                ;
                return getNodeCountBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder> getRandomNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse getGetRandomNodes() {
                if (getRandomNodesBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 6) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
                } else {
                    if (remoteNodeResponseTypeCase_ == 6) {
                        return getRandomNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
             */
            public Builder setGetRandomNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse value) {
                if (getRandomNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeResponseType_ = value;
                    onChanged();
                } else {
                    getRandomNodesBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 6;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
             */
            public Builder setGetRandomNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder builderForValue) {
                if (getRandomNodesBuilder_ == null) {
                    remoteNodeResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getRandomNodesBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeResponseTypeCase_ = 6;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
             */
            public Builder mergeGetRandomNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse value) {
                if (getRandomNodesBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 6 &&
                            remoteNodeResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance()) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeResponseTypeCase_ == 6) {
                        getRandomNodesBuilder_.mergeFrom(value);
                    }
                    getRandomNodesBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 6;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
             */
            public Builder clearGetRandomNodes() {
                if (getRandomNodesBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 6) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeResponseTypeCase_ == 6) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                    }
                    getRandomNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder getGetRandomNodesBuilder() {
                return getGetRandomNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder getGetRandomNodesOrBuilder() {
                if ((remoteNodeResponseTypeCase_ == 6) && (getRandomNodesBuilder_ != null)) {
                    return getRandomNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeResponseTypeCase_ == 6) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 6;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder>
            getGetRandomNodesFieldBuilder() {
                if (getRandomNodesBuilder_ == null) {
                    if (!(remoteNodeResponseTypeCase_ == 6)) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
                    }
                    getRandomNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) remoteNodeResponseType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeResponseType_ = null;
                }
                remoteNodeResponseTypeCase_ = 6;
                onChanged();
                ;
                return getRandomNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder> getClosestNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse getGetClosestNodes() {
                if (getClosestNodesBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 7) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
                } else {
                    if (remoteNodeResponseTypeCase_ == 7) {
                        return getClosestNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
             */
            public Builder setGetClosestNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse value) {
                if (getClosestNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeResponseType_ = value;
                    onChanged();
                } else {
                    getClosestNodesBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 7;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
             */
            public Builder setGetClosestNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder builderForValue) {
                if (getClosestNodesBuilder_ == null) {
                    remoteNodeResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getClosestNodesBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeResponseTypeCase_ = 7;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
             */
            public Builder mergeGetClosestNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse value) {
                if (getClosestNodesBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 7 &&
                            remoteNodeResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance()) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeResponseTypeCase_ == 7) {
                        getClosestNodesBuilder_.mergeFrom(value);
                    }
                    getClosestNodesBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 7;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
             */
            public Builder clearGetClosestNodes() {
                if (getClosestNodesBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 7) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeResponseTypeCase_ == 7) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                    }
                    getClosestNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder getGetClosestNodesBuilder() {
                return getGetClosestNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder getGetClosestNodesOrBuilder() {
                if ((remoteNodeResponseTypeCase_ == 7) && (getClosestNodesBuilder_ != null)) {
                    return getClosestNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeResponseTypeCase_ == 7) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 7;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder>
            getGetClosestNodesFieldBuilder() {
                if (getClosestNodesBuilder_ == null) {
                    if (!(remoteNodeResponseTypeCase_ == 7)) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
                    }
                    getClosestNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) remoteNodeResponseType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeResponseType_ = null;
                }
                remoteNodeResponseTypeCase_ = 7;
                onChanged();
                ;
                return getClosestNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder> getNodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 8) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                } else {
                    if (remoteNodeResponseTypeCase_ == 8) {
                        return getNodeInfoBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
             */
            public Builder setGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse value) {
                if (getNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    remoteNodeResponseType_ = value;
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 8;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
             */
            public Builder setGetNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder builderForValue) {
                if (getNodeInfoBuilder_ == null) {
                    remoteNodeResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(builderForValue.build());
                }
                remoteNodeResponseTypeCase_ = 8;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
             */
            public Builder mergeGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse value) {
                if (getNodeInfoBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 8 &&
                            remoteNodeResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance()) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        remoteNodeResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (remoteNodeResponseTypeCase_ == 8) {
                        getNodeInfoBuilder_.mergeFrom(value);
                    }
                    getNodeInfoBuilder_.setMessage(value);
                }
                remoteNodeResponseTypeCase_ = 8;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
             */
            public Builder clearGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (remoteNodeResponseTypeCase_ == 8) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (remoteNodeResponseTypeCase_ == 8) {
                        remoteNodeResponseTypeCase_ = 0;
                        remoteNodeResponseType_ = null;
                    }
                    getNodeInfoBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder getGetNodeInfoBuilder() {
                return getGetNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder getGetNodeInfoOrBuilder() {
                if ((remoteNodeResponseTypeCase_ == 8) && (getNodeInfoBuilder_ != null)) {
                    return getNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    if (remoteNodeResponseTypeCase_ == 8) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 8;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder>
            getGetNodeInfoFieldBuilder() {
                if (getNodeInfoBuilder_ == null) {
                    if (!(remoteNodeResponseTypeCase_ == 8)) {
                        remoteNodeResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                    }
                    getNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) remoteNodeResponseType_,
                            getParentForChildren(),
                            isClean());
                    remoteNodeResponseType_ = null;
                }
                remoteNodeResponseTypeCase_ = 8;
                onChanged();
                ;
                return getNodeInfoBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.RemoteNodeResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.RemoteNodeResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<RemoteNodeResponse>
                PARSER = new com.google.protobuf.AbstractParser<RemoteNodeResponse>() {
            public RemoteNodeResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new RemoteNodeResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<RemoteNodeResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<RemoteNodeResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.RemoteNodeResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface BuildNetworkRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.BuildNetworkRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
         */
        boolean hasRequestorNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getRequestorNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getRequestorNodeInfoOrBuilder();
    }

    /**
     * <pre>
     * Initiate/Renew a colleage/neighbour relationship between nodes.
     * The requestor node sends its own node information to the other node in the request.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.BuildNetworkRequest}
     */
    public static final class BuildNetworkRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.BuildNetworkRequest)
            BuildNetworkRequestOrBuilder {
        // Use BuildNetworkRequest.newBuilder() to construct.
        private BuildNetworkRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private BuildNetworkRequest() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private BuildNetworkRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder subBuilder = null;
                            if (requestorNodeInfo_ != null) {
                                subBuilder = requestorNodeInfo_.toBuilder();
                            }
                            requestorNodeInfo_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(requestorNodeInfo_);
                                requestorNodeInfo_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder.class);
        }

        public static final int REQUESTOR_NODE_INFO_FIELD_NUMBER = 1;
        private org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo requestorNodeInfo_;

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
         */
        public boolean hasRequestorNodeInfo() {
            return requestorNodeInfo_ != null;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getRequestorNodeInfo() {
            return requestorNodeInfo_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance() : requestorNodeInfo_;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getRequestorNodeInfoOrBuilder() {
            return getRequestorNodeInfo();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (requestorNodeInfo_ != null) {
                output.writeMessage(1, getRequestorNodeInfo());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (requestorNodeInfo_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getRequestorNodeInfo());
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) obj;

            boolean result = true;
            result = result && (hasRequestorNodeInfo() == other.hasRequestorNodeInfo());
            if (hasRequestorNodeInfo()) {
                result = result && getRequestorNodeInfo()
                        .equals(other.getRequestorNodeInfo());
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasRequestorNodeInfo()) {
                hash = (37 * hash) + REQUESTOR_NODE_INFO_FIELD_NUMBER;
                hash = (53 * hash) + getRequestorNodeInfo().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Initiate/Renew a colleage/neighbour relationship between nodes.
         * The requestor node sends its own node information to the other node in the request.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.BuildNetworkRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.BuildNetworkRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                if (requestorNodeInfoBuilder_ == null) {
                    requestorNodeInfo_ = null;
                } else {
                    requestorNodeInfo_ = null;
                    requestorNodeInfoBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest(this);
                if (requestorNodeInfoBuilder_ == null) {
                    result.requestorNodeInfo_ = requestorNodeInfo_;
                } else {
                    result.requestorNodeInfo_ = requestorNodeInfoBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest.getDefaultInstance())
                    return this;
                if (other.hasRequestorNodeInfo()) {
                    mergeRequestorNodeInfo(other.getRequestorNodeInfo());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo requestorNodeInfo_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder> requestorNodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
             */
            public boolean hasRequestorNodeInfo() {
                return requestorNodeInfoBuilder_ != null || requestorNodeInfo_ != null;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getRequestorNodeInfo() {
                if (requestorNodeInfoBuilder_ == null) {
                    return requestorNodeInfo_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance() : requestorNodeInfo_;
                } else {
                    return requestorNodeInfoBuilder_.getMessage();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
             */
            public Builder setRequestorNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (requestorNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    requestorNodeInfo_ = value;
                    onChanged();
                } else {
                    requestorNodeInfoBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
             */
            public Builder setRequestorNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (requestorNodeInfoBuilder_ == null) {
                    requestorNodeInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    requestorNodeInfoBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
             */
            public Builder mergeRequestorNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (requestorNodeInfoBuilder_ == null) {
                    if (requestorNodeInfo_ != null) {
                        requestorNodeInfo_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.newBuilder(requestorNodeInfo_).mergeFrom(value).buildPartial();
                    } else {
                        requestorNodeInfo_ = value;
                    }
                    onChanged();
                } else {
                    requestorNodeInfoBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
             */
            public Builder clearRequestorNodeInfo() {
                if (requestorNodeInfoBuilder_ == null) {
                    requestorNodeInfo_ = null;
                    onChanged();
                } else {
                    requestorNodeInfo_ = null;
                    requestorNodeInfoBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder getRequestorNodeInfoBuilder() {

                onChanged();
                return getRequestorNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getRequestorNodeInfoOrBuilder() {
                if (requestorNodeInfoBuilder_ != null) {
                    return requestorNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    return requestorNodeInfo_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance() : requestorNodeInfo_;
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo requestor_node_info = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getRequestorNodeInfoFieldBuilder() {
                if (requestorNodeInfoBuilder_ == null) {
                    requestorNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>(
                            getRequestorNodeInfo(),
                            getParentForChildren(),
                            isClean());
                    requestorNodeInfo_ = null;
                }
                return requestorNodeInfoBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.BuildNetworkRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.BuildNetworkRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<BuildNetworkRequest>
                PARSER = new com.google.protobuf.AbstractParser<BuildNetworkRequest>() {
            public BuildNetworkRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new BuildNetworkRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<BuildNetworkRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<BuildNetworkRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface BuildNetworkResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.BuildNetworkResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Whether the remote node agreed to create/renew the requested relation.
         * </pre>
         * <p>
         * <code>bool accepted = 1;</code>
         */
        boolean getAccepted();

        /**
         * <pre>
         * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
         */
        boolean hasAcceptorNodeInfo();

        /**
         * <pre>
         * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getAcceptorNodeInfo();

        /**
         * <pre>
         * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getAcceptorNodeInfoOrBuilder();

        /**
         * <pre>
         * The remote external IP address of the initiator node as detected by the addressed (i.e. this) node. Useful for autodetection of the external IP address and its changes.
         * </pre>
         * <p>
         * <code>bytes remote_ip_address = 3;</code>
         */
        com.google.protobuf.ByteString getRemoteIpAddress();
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.BuildNetworkResponse}
     */
    public static final class BuildNetworkResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.BuildNetworkResponse)
            BuildNetworkResponseOrBuilder {
        // Use BuildNetworkResponse.newBuilder() to construct.
        private BuildNetworkResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private BuildNetworkResponse() {
            accepted_ = false;
            remoteIpAddress_ = com.google.protobuf.ByteString.EMPTY;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private BuildNetworkResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            accepted_ = input.readBool();
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder subBuilder = null;
                            if (acceptorNodeInfo_ != null) {
                                subBuilder = acceptorNodeInfo_.toBuilder();
                            }
                            acceptorNodeInfo_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(acceptorNodeInfo_);
                                acceptorNodeInfo_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 26: {

                            remoteIpAddress_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder.class);
        }

        public static final int ACCEPTED_FIELD_NUMBER = 1;
        private boolean accepted_;

        /**
         * <pre>
         * Whether the remote node agreed to create/renew the requested relation.
         * </pre>
         * <p>
         * <code>bool accepted = 1;</code>
         */
        public boolean getAccepted() {
            return accepted_;
        }

        public static final int ACCEPTOR_NODE_INFO_FIELD_NUMBER = 2;
        private org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo acceptorNodeInfo_;

        /**
         * <pre>
         * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
         */
        public boolean hasAcceptorNodeInfo() {
            return acceptorNodeInfo_ != null;
        }

        /**
         * <pre>
         * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getAcceptorNodeInfo() {
            return acceptorNodeInfo_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance() : acceptorNodeInfo_;
        }

        /**
         * <pre>
         * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
         * </pre>
         * <p>
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getAcceptorNodeInfoOrBuilder() {
            return getAcceptorNodeInfo();
        }

        public static final int REMOTE_IP_ADDRESS_FIELD_NUMBER = 3;
        private com.google.protobuf.ByteString remoteIpAddress_;

        /**
         * <pre>
         * The remote external IP address of the initiator node as detected by the addressed (i.e. this) node. Useful for autodetection of the external IP address and its changes.
         * </pre>
         * <p>
         * <code>bytes remote_ip_address = 3;</code>
         */
        public com.google.protobuf.ByteString getRemoteIpAddress() {
            return remoteIpAddress_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (accepted_ != false) {
                output.writeBool(1, accepted_);
            }
            if (acceptorNodeInfo_ != null) {
                output.writeMessage(2, getAcceptorNodeInfo());
            }
            if (!remoteIpAddress_.isEmpty()) {
                output.writeBytes(3, remoteIpAddress_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (accepted_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(1, accepted_);
            }
            if (acceptorNodeInfo_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, getAcceptorNodeInfo());
            }
            if (!remoteIpAddress_.isEmpty()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(3, remoteIpAddress_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) obj;

            boolean result = true;
            result = result && (getAccepted()
                    == other.getAccepted());
            result = result && (hasAcceptorNodeInfo() == other.hasAcceptorNodeInfo());
            if (hasAcceptorNodeInfo()) {
                result = result && getAcceptorNodeInfo()
                        .equals(other.getAcceptorNodeInfo());
            }
            result = result && getRemoteIpAddress()
                    .equals(other.getRemoteIpAddress());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ACCEPTED_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getAccepted());
            if (hasAcceptorNodeInfo()) {
                hash = (37 * hash) + ACCEPTOR_NODE_INFO_FIELD_NUMBER;
                hash = (53 * hash) + getAcceptorNodeInfo().hashCode();
            }
            hash = (37 * hash) + REMOTE_IP_ADDRESS_FIELD_NUMBER;
            hash = (53 * hash) + getRemoteIpAddress().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.BuildNetworkResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.BuildNetworkResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                accepted_ = false;

                if (acceptorNodeInfoBuilder_ == null) {
                    acceptorNodeInfo_ = null;
                } else {
                    acceptorNodeInfo_ = null;
                    acceptorNodeInfoBuilder_ = null;
                }
                remoteIpAddress_ = com.google.protobuf.ByteString.EMPTY;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse(this);
                result.accepted_ = accepted_;
                if (acceptorNodeInfoBuilder_ == null) {
                    result.acceptorNodeInfo_ = acceptorNodeInfo_;
                } else {
                    result.acceptorNodeInfo_ = acceptorNodeInfoBuilder_.build();
                }
                result.remoteIpAddress_ = remoteIpAddress_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse.getDefaultInstance())
                    return this;
                if (other.getAccepted() != false) {
                    setAccepted(other.getAccepted());
                }
                if (other.hasAcceptorNodeInfo()) {
                    mergeAcceptorNodeInfo(other.getAcceptorNodeInfo());
                }
                if (other.getRemoteIpAddress() != com.google.protobuf.ByteString.EMPTY) {
                    setRemoteIpAddress(other.getRemoteIpAddress());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private boolean accepted_;

            /**
             * <pre>
             * Whether the remote node agreed to create/renew the requested relation.
             * </pre>
             * <p>
             * <code>bool accepted = 1;</code>
             */
            public boolean getAccepted() {
                return accepted_;
            }

            /**
             * <pre>
             * Whether the remote node agreed to create/renew the requested relation.
             * </pre>
             * <p>
             * <code>bool accepted = 1;</code>
             */
            public Builder setAccepted(boolean value) {

                accepted_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Whether the remote node agreed to create/renew the requested relation.
             * </pre>
             * <p>
             * <code>bool accepted = 1;</code>
             */
            public Builder clearAccepted() {

                accepted_ = false;
                onChanged();
                return this;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo acceptorNodeInfo_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder> acceptorNodeInfoBuilder_;

            /**
             * <pre>
             * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
             */
            public boolean hasAcceptorNodeInfo() {
                return acceptorNodeInfoBuilder_ != null || acceptorNodeInfo_ != null;
            }

            /**
             * <pre>
             * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getAcceptorNodeInfo() {
                if (acceptorNodeInfoBuilder_ == null) {
                    return acceptorNodeInfo_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance() : acceptorNodeInfo_;
                } else {
                    return acceptorNodeInfoBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
             */
            public Builder setAcceptorNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (acceptorNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    acceptorNodeInfo_ = value;
                    onChanged();
                } else {
                    acceptorNodeInfoBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
             */
            public Builder setAcceptorNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (acceptorNodeInfoBuilder_ == null) {
                    acceptorNodeInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    acceptorNodeInfoBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
             */
            public Builder mergeAcceptorNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (acceptorNodeInfoBuilder_ == null) {
                    if (acceptorNodeInfo_ != null) {
                        acceptorNodeInfo_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.newBuilder(acceptorNodeInfo_).mergeFrom(value).buildPartial();
                    } else {
                        acceptorNodeInfo_ = value;
                    }
                    onChanged();
                } else {
                    acceptorNodeInfoBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
             */
            public Builder clearAcceptorNodeInfo() {
                if (acceptorNodeInfoBuilder_ == null) {
                    acceptorNodeInfo_ = null;
                    onChanged();
                } else {
                    acceptorNodeInfo_ = null;
                    acceptorNodeInfoBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder getAcceptorNodeInfoBuilder() {

                onChanged();
                return getAcceptorNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getAcceptorNodeInfoOrBuilder() {
                if (acceptorNodeInfoBuilder_ != null) {
                    return acceptorNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    return acceptorNodeInfo_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance() : acceptorNodeInfo_;
                }
            }

            /**
             * <pre>
             * If the remote node accepted the request, it returns its latest node information to make sure that no outdated external Ip address or location is stored.
             * </pre>
             * <p>
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo acceptor_node_info = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getAcceptorNodeInfoFieldBuilder() {
                if (acceptorNodeInfoBuilder_ == null) {
                    acceptorNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>(
                            getAcceptorNodeInfo(),
                            getParentForChildren(),
                            isClean());
                    acceptorNodeInfo_ = null;
                }
                return acceptorNodeInfoBuilder_;
            }

            private com.google.protobuf.ByteString remoteIpAddress_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <pre>
             * The remote external IP address of the initiator node as detected by the addressed (i.e. this) node. Useful for autodetection of the external IP address and its changes.
             * </pre>
             * <p>
             * <code>bytes remote_ip_address = 3;</code>
             */
            public com.google.protobuf.ByteString getRemoteIpAddress() {
                return remoteIpAddress_;
            }

            /**
             * <pre>
             * The remote external IP address of the initiator node as detected by the addressed (i.e. this) node. Useful for autodetection of the external IP address and its changes.
             * </pre>
             * <p>
             * <code>bytes remote_ip_address = 3;</code>
             */
            public Builder setRemoteIpAddress(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                remoteIpAddress_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The remote external IP address of the initiator node as detected by the addressed (i.e. this) node. Useful for autodetection of the external IP address and its changes.
             * </pre>
             * <p>
             * <code>bytes remote_ip_address = 3;</code>
             */
            public Builder clearRemoteIpAddress() {

                remoteIpAddress_ = getDefaultInstance().getRemoteIpAddress();
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.BuildNetworkResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.BuildNetworkResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<BuildNetworkResponse>
                PARSER = new com.google.protobuf.AbstractParser<BuildNetworkResponse>() {
            public BuildNetworkResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new BuildNetworkResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<BuildNetworkResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<BuildNetworkResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.BuildNetworkResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetNodeCountRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetNodeCountRequest)
            com.google.protobuf.MessageOrBuilder {
    }

    /**
     * <pre>
     * Get the total count of network nodes known by the remote node.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNodeCountRequest}
     */
    public static final class GetNodeCountRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetNodeCountRequest)
            GetNodeCountRequestOrBuilder {
        // Use GetNodeCountRequest.newBuilder() to construct.
        private GetNodeCountRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetNodeCountRequest() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetNodeCountRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.Builder.class);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) obj;

            boolean result = true;
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Get the total count of network nodes known by the remote node.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNodeCountRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetNodeCountRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest(this);
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest.getDefaultInstance())
                    return this;
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetNodeCountRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetNodeCountRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetNodeCountRequest>
                PARSER = new com.google.protobuf.AbstractParser<GetNodeCountRequest>() {
            public GetNodeCountRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetNodeCountRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetNodeCountRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetNodeCountRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetNodeCountResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetNodeCountResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>uint32 node_count = 1;</code>
         */
        int getNodeCount();
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNodeCountResponse}
     */
    public static final class GetNodeCountResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetNodeCountResponse)
            GetNodeCountResponseOrBuilder {
        // Use GetNodeCountResponse.newBuilder() to construct.
        private GetNodeCountResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetNodeCountResponse() {
            nodeCount_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetNodeCountResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            nodeCount_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.Builder.class);
        }

        public static final int NODE_COUNT_FIELD_NUMBER = 1;
        private int nodeCount_;

        /**
         * <code>uint32 node_count = 1;</code>
         */
        public int getNodeCount() {
            return nodeCount_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (nodeCount_ != 0) {
                output.writeUInt32(1, nodeCount_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (nodeCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, nodeCount_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) obj;

            boolean result = true;
            result = result && (getNodeCount()
                    == other.getNodeCount());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + NODE_COUNT_FIELD_NUMBER;
            hash = (53 * hash) + getNodeCount();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNodeCountResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetNodeCountResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                nodeCount_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse(this);
                result.nodeCount_ = nodeCount_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse.getDefaultInstance())
                    return this;
                if (other.getNodeCount() != 0) {
                    setNodeCount(other.getNodeCount());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int nodeCount_;

            /**
             * <code>uint32 node_count = 1;</code>
             */
            public int getNodeCount() {
                return nodeCount_;
            }

            /**
             * <code>uint32 node_count = 1;</code>
             */
            public Builder setNodeCount(int value) {

                nodeCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>uint32 node_count = 1;</code>
             */
            public Builder clearNodeCount() {

                nodeCount_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetNodeCountResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetNodeCountResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetNodeCountResponse>
                PARSER = new com.google.protobuf.AbstractParser<GetNodeCountResponse>() {
            public GetNodeCountResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetNodeCountResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetNodeCountResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetNodeCountResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeCountResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetRandomNodesRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetRandomNodesRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>uint32 max_node_count = 1;</code>
         */
        int getMaxNodeCount();

        /**
         * <code>bool include_neighbours = 2;</code>
         */
        boolean getIncludeNeighbours();
    }

    /**
     * <pre>
     * Request for a list of random nodes.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetRandomNodesRequest}
     */
    public static final class GetRandomNodesRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetRandomNodesRequest)
            GetRandomNodesRequestOrBuilder {
        // Use GetRandomNodesRequest.newBuilder() to construct.
        private GetRandomNodesRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetRandomNodesRequest() {
            maxNodeCount_ = 0;
            includeNeighbours_ = false;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetRandomNodesRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            maxNodeCount_ = input.readUInt32();
                            break;
                        }
                        case 16: {

                            includeNeighbours_ = input.readBool();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder.class);
        }

        public static final int MAX_NODE_COUNT_FIELD_NUMBER = 1;
        private int maxNodeCount_;

        /**
         * <code>uint32 max_node_count = 1;</code>
         */
        public int getMaxNodeCount() {
            return maxNodeCount_;
        }

        public static final int INCLUDE_NEIGHBOURS_FIELD_NUMBER = 2;
        private boolean includeNeighbours_;

        /**
         * <code>bool include_neighbours = 2;</code>
         */
        public boolean getIncludeNeighbours() {
            return includeNeighbours_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (maxNodeCount_ != 0) {
                output.writeUInt32(1, maxNodeCount_);
            }
            if (includeNeighbours_ != false) {
                output.writeBool(2, includeNeighbours_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (maxNodeCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, maxNodeCount_);
            }
            if (includeNeighbours_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(2, includeNeighbours_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) obj;

            boolean result = true;
            result = result && (getMaxNodeCount()
                    == other.getMaxNodeCount());
            result = result && (getIncludeNeighbours()
                    == other.getIncludeNeighbours());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + MAX_NODE_COUNT_FIELD_NUMBER;
            hash = (53 * hash) + getMaxNodeCount();
            hash = (37 * hash) + INCLUDE_NEIGHBOURS_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getIncludeNeighbours());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Request for a list of random nodes.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetRandomNodesRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetRandomNodesRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                maxNodeCount_ = 0;

                includeNeighbours_ = false;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest(this);
                result.maxNodeCount_ = maxNodeCount_;
                result.includeNeighbours_ = includeNeighbours_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance())
                    return this;
                if (other.getMaxNodeCount() != 0) {
                    setMaxNodeCount(other.getMaxNodeCount());
                }
                if (other.getIncludeNeighbours() != false) {
                    setIncludeNeighbours(other.getIncludeNeighbours());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int maxNodeCount_;

            /**
             * <code>uint32 max_node_count = 1;</code>
             */
            public int getMaxNodeCount() {
                return maxNodeCount_;
            }

            /**
             * <code>uint32 max_node_count = 1;</code>
             */
            public Builder setMaxNodeCount(int value) {

                maxNodeCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>uint32 max_node_count = 1;</code>
             */
            public Builder clearMaxNodeCount() {

                maxNodeCount_ = 0;
                onChanged();
                return this;
            }

            private boolean includeNeighbours_;

            /**
             * <code>bool include_neighbours = 2;</code>
             */
            public boolean getIncludeNeighbours() {
                return includeNeighbours_;
            }

            /**
             * <code>bool include_neighbours = 2;</code>
             */
            public Builder setIncludeNeighbours(boolean value) {

                includeNeighbours_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bool include_neighbours = 2;</code>
             */
            public Builder clearIncludeNeighbours() {

                includeNeighbours_ = false;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetRandomNodesRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetRandomNodesRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetRandomNodesRequest>
                PARSER = new com.google.protobuf.AbstractParser<GetRandomNodesRequest>() {
            public GetRandomNodesRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetRandomNodesRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetRandomNodesRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetRandomNodesRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetRandomNodesResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetRandomNodesResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>
        getNodesList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodes(int index);

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        int getNodesCount();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
        getNodesOrBuilderList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodesOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetRandomNodesResponse}
     */
    public static final class GetRandomNodesResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetRandomNodesResponse)
            GetRandomNodesResponseOrBuilder {
        // Use GetRandomNodesResponse.newBuilder() to construct.
        private GetRandomNodesResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetRandomNodesResponse() {
            nodes_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetRandomNodesResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                nodes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            nodes_.add(
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.parser(), extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    nodes_ = java.util.Collections.unmodifiableList(nodes_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder.class);
        }

        public static final int NODES_FIELD_NUMBER = 1;
        private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> nodes_;

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> getNodesList() {
            return nodes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
        getNodesOrBuilderList() {
            return nodes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public int getNodesCount() {
            return nodes_.size();
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodes(int index) {
            return nodes_.get(index);
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodesOrBuilder(
                int index) {
            return nodes_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < nodes_.size(); i++) {
                output.writeMessage(1, nodes_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < nodes_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, nodes_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) obj;

            boolean result = true;
            result = result && getNodesList()
                    .equals(other.getNodesList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getNodesCount() > 0) {
                hash = (37 * hash) + NODES_FIELD_NUMBER;
                hash = (53 * hash) + getNodesList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetRandomNodesResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetRandomNodesResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getNodesFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (nodesBuilder_ == null) {
                    nodes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    nodesBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse(this);
                int from_bitField0_ = bitField0_;
                if (nodesBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        nodes_ = java.util.Collections.unmodifiableList(nodes_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.nodes_ = nodes_;
                } else {
                    result.nodes_ = nodesBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance())
                    return this;
                if (nodesBuilder_ == null) {
                    if (!other.nodes_.isEmpty()) {
                        if (nodes_.isEmpty()) {
                            nodes_ = other.nodes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureNodesIsMutable();
                            nodes_.addAll(other.nodes_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.nodes_.isEmpty()) {
                        if (nodesBuilder_.isEmpty()) {
                            nodesBuilder_.dispose();
                            nodesBuilder_ = null;
                            nodes_ = other.nodes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            nodesBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getNodesFieldBuilder() : null;
                        } else {
                            nodesBuilder_.addAllMessages(other.nodes_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> nodes_ =
                    java.util.Collections.emptyList();

            private void ensureNodesIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    nodes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>(nodes_);
                    bitField0_ |= 0x00000001;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder> nodesBuilder_;

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> getNodesList() {
                if (nodesBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(nodes_);
                } else {
                    return nodesBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public int getNodesCount() {
                if (nodesBuilder_ == null) {
                    return nodes_.size();
                } else {
                    return nodesBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodes(int index) {
                if (nodesBuilder_ == null) {
                    return nodes_.get(index);
                } else {
                    return nodesBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder setNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNodesIsMutable();
                    nodes_.set(index, value);
                    onChanged();
                } else {
                    nodesBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder setNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    nodesBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNodesIsMutable();
                    nodes_.add(value);
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNodesIsMutable();
                    nodes_.add(index, value);
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.add(builderForValue.build());
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addAllNodes(
                    java.lang.Iterable<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> values) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, nodes_);
                    onChanged();
                } else {
                    nodesBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder clearNodes() {
                if (nodesBuilder_ == null) {
                    nodes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    nodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder removeNodes(int index) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.remove(index);
                    onChanged();
                } else {
                    nodesBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder getNodesBuilder(
                    int index) {
                return getNodesFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodesOrBuilder(
                    int index) {
                if (nodesBuilder_ == null) {
                    return nodes_.get(index);
                } else {
                    return nodesBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getNodesOrBuilderList() {
                if (nodesBuilder_ != null) {
                    return nodesBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(nodes_);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder addNodesBuilder() {
                return getNodesFieldBuilder().addBuilder(
                        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder addNodesBuilder(
                    int index) {
                return getNodesFieldBuilder().addBuilder(
                        index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder>
            getNodesBuilderList() {
                return getNodesFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getNodesFieldBuilder() {
                if (nodesBuilder_ == null) {
                    nodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>(
                            nodes_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    nodes_ = null;
                }
                return nodesBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetRandomNodesResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetRandomNodesResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetRandomNodesResponse>
                PARSER = new com.google.protobuf.AbstractParser<GetRandomNodesResponse>() {
            public GetRandomNodesResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetRandomNodesResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetRandomNodesResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetRandomNodesResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetClosestNodesByDistanceRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        boolean hasLocation();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder();

        /**
         * <code>float max_radius_km = 2;</code>
         */
        float getMaxRadiusKm();

        /**
         * <code>uint32 max_node_count = 3;</code>
         */
        int getMaxNodeCount();

        /**
         * <code>bool include_neighbours = 4;</code>
         */
        boolean getIncludeNeighbours();
    }

    /**
     * <pre>
     * List the nodes that are closest to a specific location, useful for exploring the map.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest}
     */
    public static final class GetClosestNodesByDistanceRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest)
            GetClosestNodesByDistanceRequestOrBuilder {
        // Use GetClosestNodesByDistanceRequest.newBuilder() to construct.
        private GetClosestNodesByDistanceRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetClosestNodesByDistanceRequest() {
            maxRadiusKm_ = 0F;
            maxNodeCount_ = 0;
            includeNeighbours_ = false;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetClosestNodesByDistanceRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder subBuilder = null;
                            if (location_ != null) {
                                subBuilder = location_.toBuilder();
                            }
                            location_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(location_);
                                location_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 21: {

                            maxRadiusKm_ = input.readFloat();
                            break;
                        }
                        case 24: {

                            maxNodeCount_ = input.readUInt32();
                            break;
                        }
                        case 32: {

                            includeNeighbours_ = input.readBool();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder.class);
        }

        public static final int LOCATION_FIELD_NUMBER = 1;
        private org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation location_;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        public boolean hasLocation() {
            return location_ != null;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation() {
            return location_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder() {
            return getLocation();
        }

        public static final int MAX_RADIUS_KM_FIELD_NUMBER = 2;
        private float maxRadiusKm_;

        /**
         * <code>float max_radius_km = 2;</code>
         */
        public float getMaxRadiusKm() {
            return maxRadiusKm_;
        }

        public static final int MAX_NODE_COUNT_FIELD_NUMBER = 3;
        private int maxNodeCount_;

        /**
         * <code>uint32 max_node_count = 3;</code>
         */
        public int getMaxNodeCount() {
            return maxNodeCount_;
        }

        public static final int INCLUDE_NEIGHBOURS_FIELD_NUMBER = 4;
        private boolean includeNeighbours_;

        /**
         * <code>bool include_neighbours = 4;</code>
         */
        public boolean getIncludeNeighbours() {
            return includeNeighbours_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (location_ != null) {
                output.writeMessage(1, getLocation());
            }
            if (maxRadiusKm_ != 0F) {
                output.writeFloat(2, maxRadiusKm_);
            }
            if (maxNodeCount_ != 0) {
                output.writeUInt32(3, maxNodeCount_);
            }
            if (includeNeighbours_ != false) {
                output.writeBool(4, includeNeighbours_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (location_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getLocation());
            }
            if (maxRadiusKm_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(2, maxRadiusKm_);
            }
            if (maxNodeCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, maxNodeCount_);
            }
            if (includeNeighbours_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(4, includeNeighbours_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) obj;

            boolean result = true;
            result = result && (hasLocation() == other.hasLocation());
            if (hasLocation()) {
                result = result && getLocation()
                        .equals(other.getLocation());
            }
            result = result && (
                    java.lang.Float.floatToIntBits(getMaxRadiusKm())
                            == java.lang.Float.floatToIntBits(
                            other.getMaxRadiusKm()));
            result = result && (getMaxNodeCount()
                    == other.getMaxNodeCount());
            result = result && (getIncludeNeighbours()
                    == other.getIncludeNeighbours());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasLocation()) {
                hash = (37 * hash) + LOCATION_FIELD_NUMBER;
                hash = (53 * hash) + getLocation().hashCode();
            }
            hash = (37 * hash) + MAX_RADIUS_KM_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getMaxRadiusKm());
            hash = (37 * hash) + MAX_NODE_COUNT_FIELD_NUMBER;
            hash = (53 * hash) + getMaxNodeCount();
            hash = (37 * hash) + INCLUDE_NEIGHBOURS_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getIncludeNeighbours());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * List the nodes that are closest to a specific location, useful for exploring the map.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                if (locationBuilder_ == null) {
                    location_ = null;
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }
                maxRadiusKm_ = 0F;

                maxNodeCount_ = 0;

                includeNeighbours_ = false;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest(this);
                if (locationBuilder_ == null) {
                    result.location_ = location_;
                } else {
                    result.location_ = locationBuilder_.build();
                }
                result.maxRadiusKm_ = maxRadiusKm_;
                result.maxNodeCount_ = maxNodeCount_;
                result.includeNeighbours_ = includeNeighbours_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance())
                    return this;
                if (other.hasLocation()) {
                    mergeLocation(other.getLocation());
                }
                if (other.getMaxRadiusKm() != 0F) {
                    setMaxRadiusKm(other.getMaxRadiusKm());
                }
                if (other.getMaxNodeCount() != 0) {
                    setMaxNodeCount(other.getMaxNodeCount());
                }
                if (other.getIncludeNeighbours() != false) {
                    setIncludeNeighbours(other.getIncludeNeighbours());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation location_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder> locationBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public boolean hasLocation() {
                return locationBuilder_ != null || location_ != null;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation() {
                if (locationBuilder_ == null) {
                    return location_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
                } else {
                    return locationBuilder_.getMessage();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder setLocation(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation value) {
                if (locationBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    location_ = value;
                    onChanged();
                } else {
                    locationBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder setLocation(
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder builderForValue) {
                if (locationBuilder_ == null) {
                    location_ = builderForValue.build();
                    onChanged();
                } else {
                    locationBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder mergeLocation(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation value) {
                if (locationBuilder_ == null) {
                    if (location_ != null) {
                        location_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.newBuilder(location_).mergeFrom(value).buildPartial();
                    } else {
                        location_ = value;
                    }
                    onChanged();
                } else {
                    locationBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder clearLocation() {
                if (locationBuilder_ == null) {
                    location_ = null;
                    onChanged();
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder getLocationBuilder() {

                onChanged();
                return getLocationFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder() {
                if (locationBuilder_ != null) {
                    return locationBuilder_.getMessageOrBuilder();
                } else {
                    return location_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder>
            getLocationFieldBuilder() {
                if (locationBuilder_ == null) {
                    locationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder>(
                            getLocation(),
                            getParentForChildren(),
                            isClean());
                    location_ = null;
                }
                return locationBuilder_;
            }

            private float maxRadiusKm_;

            /**
             * <code>float max_radius_km = 2;</code>
             */
            public float getMaxRadiusKm() {
                return maxRadiusKm_;
            }

            /**
             * <code>float max_radius_km = 2;</code>
             */
            public Builder setMaxRadiusKm(float value) {

                maxRadiusKm_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>float max_radius_km = 2;</code>
             */
            public Builder clearMaxRadiusKm() {

                maxRadiusKm_ = 0F;
                onChanged();
                return this;
            }

            private int maxNodeCount_;

            /**
             * <code>uint32 max_node_count = 3;</code>
             */
            public int getMaxNodeCount() {
                return maxNodeCount_;
            }

            /**
             * <code>uint32 max_node_count = 3;</code>
             */
            public Builder setMaxNodeCount(int value) {

                maxNodeCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>uint32 max_node_count = 3;</code>
             */
            public Builder clearMaxNodeCount() {

                maxNodeCount_ = 0;
                onChanged();
                return this;
            }

            private boolean includeNeighbours_;

            /**
             * <code>bool include_neighbours = 4;</code>
             */
            public boolean getIncludeNeighbours() {
                return includeNeighbours_;
            }

            /**
             * <code>bool include_neighbours = 4;</code>
             */
            public Builder setIncludeNeighbours(boolean value) {

                includeNeighbours_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bool include_neighbours = 4;</code>
             */
            public Builder clearIncludeNeighbours() {

                includeNeighbours_ = false;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetClosestNodesByDistanceRequest>
                PARSER = new com.google.protobuf.AbstractParser<GetClosestNodesByDistanceRequest>() {
            public GetClosestNodesByDistanceRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetClosestNodesByDistanceRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetClosestNodesByDistanceRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetClosestNodesByDistanceRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetClosestNodesByDistanceResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>
        getNodesList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodes(int index);

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        int getNodesCount();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
        getNodesOrBuilderList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodesOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse}
     */
    public static final class GetClosestNodesByDistanceResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse)
            GetClosestNodesByDistanceResponseOrBuilder {
        // Use GetClosestNodesByDistanceResponse.newBuilder() to construct.
        private GetClosestNodesByDistanceResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetClosestNodesByDistanceResponse() {
            nodes_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetClosestNodesByDistanceResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                nodes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            nodes_.add(
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.parser(), extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    nodes_ = java.util.Collections.unmodifiableList(nodes_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder.class);
        }

        public static final int NODES_FIELD_NUMBER = 1;
        private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> nodes_;

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> getNodesList() {
            return nodes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
        getNodesOrBuilderList() {
            return nodes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public int getNodesCount() {
            return nodes_.size();
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodes(int index) {
            return nodes_.get(index);
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodesOrBuilder(
                int index) {
            return nodes_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < nodes_.size(); i++) {
                output.writeMessage(1, nodes_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < nodes_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, nodes_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) obj;

            boolean result = true;
            result = result && getNodesList()
                    .equals(other.getNodesList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getNodesCount() > 0) {
                hash = (37 * hash) + NODES_FIELD_NUMBER;
                hash = (53 * hash) + getNodesList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getNodesFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (nodesBuilder_ == null) {
                    nodes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    nodesBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse(this);
                int from_bitField0_ = bitField0_;
                if (nodesBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        nodes_ = java.util.Collections.unmodifiableList(nodes_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.nodes_ = nodes_;
                } else {
                    result.nodes_ = nodesBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance())
                    return this;
                if (nodesBuilder_ == null) {
                    if (!other.nodes_.isEmpty()) {
                        if (nodes_.isEmpty()) {
                            nodes_ = other.nodes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureNodesIsMutable();
                            nodes_.addAll(other.nodes_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.nodes_.isEmpty()) {
                        if (nodesBuilder_.isEmpty()) {
                            nodesBuilder_.dispose();
                            nodesBuilder_ = null;
                            nodes_ = other.nodes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            nodesBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getNodesFieldBuilder() : null;
                        } else {
                            nodesBuilder_.addAllMessages(other.nodes_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> nodes_ =
                    java.util.Collections.emptyList();

            private void ensureNodesIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    nodes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>(nodes_);
                    bitField0_ |= 0x00000001;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder> nodesBuilder_;

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> getNodesList() {
                if (nodesBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(nodes_);
                } else {
                    return nodesBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public int getNodesCount() {
                if (nodesBuilder_ == null) {
                    return nodes_.size();
                } else {
                    return nodesBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodes(int index) {
                if (nodesBuilder_ == null) {
                    return nodes_.get(index);
                } else {
                    return nodesBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder setNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNodesIsMutable();
                    nodes_.set(index, value);
                    onChanged();
                } else {
                    nodesBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder setNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    nodesBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNodesIsMutable();
                    nodes_.add(value);
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNodesIsMutable();
                    nodes_.add(index, value);
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.add(builderForValue.build());
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    nodesBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder addAllNodes(
                    java.lang.Iterable<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> values) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, nodes_);
                    onChanged();
                } else {
                    nodesBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder clearNodes() {
                if (nodesBuilder_ == null) {
                    nodes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    nodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public Builder removeNodes(int index) {
                if (nodesBuilder_ == null) {
                    ensureNodesIsMutable();
                    nodes_.remove(index);
                    onChanged();
                } else {
                    nodesBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder getNodesBuilder(
                    int index) {
                return getNodesFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodesOrBuilder(
                    int index) {
                if (nodesBuilder_ == null) {
                    return nodes_.get(index);
                } else {
                    return nodesBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getNodesOrBuilderList() {
                if (nodesBuilder_ != null) {
                    return nodesBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(nodes_);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder addNodesBuilder() {
                return getNodesFieldBuilder().addBuilder(
                        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder addNodesBuilder(
                    int index) {
                return getNodesFieldBuilder().addBuilder(
                        index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo nodes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder>
            getNodesBuilderList() {
                return getNodesFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getNodesFieldBuilder() {
                if (nodesBuilder_ == null) {
                    nodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>(
                            nodes_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    nodes_ = null;
                }
                return nodesBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetClosestNodesByDistanceResponse>
                PARSER = new com.google.protobuf.AbstractParser<GetClosestNodesByDistanceResponse>() {
            public GetClosestNodesByDistanceResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetClosestNodesByDistanceResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetClosestNodesByDistanceResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetClosestNodesByDistanceResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface ClientRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.ClientRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getGetNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder getGetNodeInfoOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest getGetNeighbourNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequestOrBuilder getGetNeighbourNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest getGetClosestNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder getGetClosestNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest getExploreNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequestOrBuilder getExploreNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest getGetRandomNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder getGetRandomNodesOrBuilder();

        public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.ClientRequestTypeCase getClientRequestTypeCase();
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.ClientRequest}
     */
    public static final class ClientRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.ClientRequest)
            ClientRequestOrBuilder {
        // Use ClientRequest.newBuilder() to construct.
        private ClientRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private ClientRequest() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private ClientRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder subBuilder = null;
                            if (clientRequestTypeCase_ == 1) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_).toBuilder();
                            }
                            clientRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_);
                                clientRequestType_ = subBuilder.buildPartial();
                            }
                            clientRequestTypeCase_ = 1;
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.Builder subBuilder = null;
                            if (clientRequestTypeCase_ == 2) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_).toBuilder();
                            }
                            clientRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_);
                                clientRequestType_ = subBuilder.buildPartial();
                            }
                            clientRequestTypeCase_ = 2;
                            break;
                        }
                        case 26: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder subBuilder = null;
                            if (clientRequestTypeCase_ == 3) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_).toBuilder();
                            }
                            clientRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_);
                                clientRequestType_ = subBuilder.buildPartial();
                            }
                            clientRequestTypeCase_ = 3;
                            break;
                        }
                        case 34: {
                            org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.Builder subBuilder = null;
                            if (clientRequestTypeCase_ == 4) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_).toBuilder();
                            }
                            clientRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_);
                                clientRequestType_ = subBuilder.buildPartial();
                            }
                            clientRequestTypeCase_ = 4;
                            break;
                        }
                        case 42: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder subBuilder = null;
                            if (clientRequestTypeCase_ == 5) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_).toBuilder();
                            }
                            clientRequestType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_);
                                clientRequestType_ = subBuilder.buildPartial();
                            }
                            clientRequestTypeCase_ = 5;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.Builder.class);
        }

        private int clientRequestTypeCase_ = 0;
        private java.lang.Object clientRequestType_;

        public enum ClientRequestTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            GET_NODE_INFO(1),
            GET_NEIGHBOUR_NODES(2),
            GET_CLOSEST_NODES(3),
            EXPLORE_NODES(4),
            GET_RANDOM_NODES(5),
            CLIENTREQUESTTYPE_NOT_SET(0);
            private final int value;

            private ClientRequestTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static ClientRequestTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static ClientRequestTypeCase forNumber(int value) {
                switch (value) {
                    case 1:
                        return GET_NODE_INFO;
                    case 2:
                        return GET_NEIGHBOUR_NODES;
                    case 3:
                        return GET_CLOSEST_NODES;
                    case 4:
                        return EXPLORE_NODES;
                    case 5:
                        return GET_RANDOM_NODES;
                    case 0:
                        return CLIENTREQUESTTYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public ClientRequestTypeCase
        getClientRequestTypeCase() {
            return ClientRequestTypeCase.forNumber(
                    clientRequestTypeCase_);
        }

        public static final int GET_NODE_INFO_FIELD_NUMBER = 1;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getGetNodeInfo() {
            if (clientRequestTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder getGetNodeInfoOrBuilder() {
            if (clientRequestTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
        }

        public static final int GET_NEIGHBOUR_NODES_FIELD_NUMBER = 2;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest getGetNeighbourNodes() {
            if (clientRequestTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequestOrBuilder getGetNeighbourNodesOrBuilder() {
            if (clientRequestTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.getDefaultInstance();
        }

        public static final int GET_CLOSEST_NODES_FIELD_NUMBER = 3;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest getGetClosestNodes() {
            if (clientRequestTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder getGetClosestNodesOrBuilder() {
            if (clientRequestTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
        }

        public static final int EXPLORE_NODES_FIELD_NUMBER = 4;

        /**
         * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest getExploreNodes() {
            if (clientRequestTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequestOrBuilder getExploreNodesOrBuilder() {
            if (clientRequestTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.getDefaultInstance();
        }

        public static final int GET_RANDOM_NODES_FIELD_NUMBER = 5;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest getGetRandomNodes() {
            if (clientRequestTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder getGetRandomNodesOrBuilder() {
            if (clientRequestTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (clientRequestTypeCase_ == 1) {
                output.writeMessage(1, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_);
            }
            if (clientRequestTypeCase_ == 2) {
                output.writeMessage(2, (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_);
            }
            if (clientRequestTypeCase_ == 3) {
                output.writeMessage(3, (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_);
            }
            if (clientRequestTypeCase_ == 4) {
                output.writeMessage(4, (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_);
            }
            if (clientRequestTypeCase_ == 5) {
                output.writeMessage(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (clientRequestTypeCase_ == 1) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_);
            }
            if (clientRequestTypeCase_ == 2) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_);
            }
            if (clientRequestTypeCase_ == 3) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_);
            }
            if (clientRequestTypeCase_ == 4) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_);
            }
            if (clientRequestTypeCase_ == 5) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) obj;

            boolean result = true;
            result = result && getClientRequestTypeCase().equals(
                    other.getClientRequestTypeCase());
            if (!result) return false;
            switch (clientRequestTypeCase_) {
                case 1:
                    result = result && getGetNodeInfo()
                            .equals(other.getGetNodeInfo());
                    break;
                case 2:
                    result = result && getGetNeighbourNodes()
                            .equals(other.getGetNeighbourNodes());
                    break;
                case 3:
                    result = result && getGetClosestNodes()
                            .equals(other.getGetClosestNodes());
                    break;
                case 4:
                    result = result && getExploreNodes()
                            .equals(other.getExploreNodes());
                    break;
                case 5:
                    result = result && getGetRandomNodes()
                            .equals(other.getGetRandomNodes());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            switch (clientRequestTypeCase_) {
                case 1:
                    hash = (37 * hash) + GET_NODE_INFO_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNodeInfo().hashCode();
                    break;
                case 2:
                    hash = (37 * hash) + GET_NEIGHBOUR_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNeighbourNodes().hashCode();
                    break;
                case 3:
                    hash = (37 * hash) + GET_CLOSEST_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetClosestNodes().hashCode();
                    break;
                case 4:
                    hash = (37 * hash) + EXPLORE_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getExploreNodes().hashCode();
                    break;
                case 5:
                    hash = (37 * hash) + GET_RANDOM_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetRandomNodes().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.ClientRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.ClientRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.ClientRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                clientRequestTypeCase_ = 0;
                clientRequestType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest(this);
                if (clientRequestTypeCase_ == 1) {
                    if (getNodeInfoBuilder_ == null) {
                        result.clientRequestType_ = clientRequestType_;
                    } else {
                        result.clientRequestType_ = getNodeInfoBuilder_.build();
                    }
                }
                if (clientRequestTypeCase_ == 2) {
                    if (getNeighbourNodesBuilder_ == null) {
                        result.clientRequestType_ = clientRequestType_;
                    } else {
                        result.clientRequestType_ = getNeighbourNodesBuilder_.build();
                    }
                }
                if (clientRequestTypeCase_ == 3) {
                    if (getClosestNodesBuilder_ == null) {
                        result.clientRequestType_ = clientRequestType_;
                    } else {
                        result.clientRequestType_ = getClosestNodesBuilder_.build();
                    }
                }
                if (clientRequestTypeCase_ == 4) {
                    if (exploreNodesBuilder_ == null) {
                        result.clientRequestType_ = clientRequestType_;
                    } else {
                        result.clientRequestType_ = exploreNodesBuilder_.build();
                    }
                }
                if (clientRequestTypeCase_ == 5) {
                    if (getRandomNodesBuilder_ == null) {
                        result.clientRequestType_ = clientRequestType_;
                    } else {
                        result.clientRequestType_ = getRandomNodesBuilder_.build();
                    }
                }
                result.clientRequestTypeCase_ = clientRequestTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest.getDefaultInstance())
                    return this;
                switch (other.getClientRequestTypeCase()) {
                    case GET_NODE_INFO: {
                        mergeGetNodeInfo(other.getGetNodeInfo());
                        break;
                    }
                    case GET_NEIGHBOUR_NODES: {
                        mergeGetNeighbourNodes(other.getGetNeighbourNodes());
                        break;
                    }
                    case GET_CLOSEST_NODES: {
                        mergeGetClosestNodes(other.getGetClosestNodes());
                        break;
                    }
                    case EXPLORE_NODES: {
                        mergeExploreNodes(other.getExploreNodes());
                        break;
                    }
                    case GET_RANDOM_NODES: {
                        mergeGetRandomNodes(other.getGetRandomNodes());
                        break;
                    }
                    case CLIENTREQUESTTYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int clientRequestTypeCase_ = 0;
            private java.lang.Object clientRequestType_;

            public ClientRequestTypeCase
            getClientRequestTypeCase() {
                return ClientRequestTypeCase.forNumber(
                        clientRequestTypeCase_);
            }

            public Builder clearClientRequestType() {
                clientRequestTypeCase_ = 0;
                clientRequestType_ = null;
                onChanged();
                return this;
            }


            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder> getNodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (clientRequestTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                } else {
                    if (clientRequestTypeCase_ == 1) {
                        return getNodeInfoBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
             */
            public Builder setGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest value) {
                if (getNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientRequestType_ = value;
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
             */
            public Builder setGetNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder builderForValue) {
                if (getNodeInfoBuilder_ == null) {
                    clientRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(builderForValue.build());
                }
                clientRequestTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
             */
            public Builder mergeGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest value) {
                if (getNodeInfoBuilder_ == null) {
                    if (clientRequestTypeCase_ == 1 &&
                            clientRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance()) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientRequestTypeCase_ == 1) {
                        getNodeInfoBuilder_.mergeFrom(value);
                    }
                    getNodeInfoBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
             */
            public Builder clearGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (clientRequestTypeCase_ == 1) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientRequestTypeCase_ == 1) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                    }
                    getNodeInfoBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder getGetNodeInfoBuilder() {
                return getGetNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder getGetNodeInfoOrBuilder() {
                if ((clientRequestTypeCase_ == 1) && (getNodeInfoBuilder_ != null)) {
                    return getNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    if (clientRequestTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoRequest get_node_info = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder>
            getGetNodeInfoFieldBuilder() {
                if (getNodeInfoBuilder_ == null) {
                    if (!(clientRequestTypeCase_ == 1)) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
                    }
                    getNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) clientRequestType_,
                            getParentForChildren(),
                            isClean());
                    clientRequestType_ = null;
                }
                clientRequestTypeCase_ = 1;
                onChanged();
                ;
                return getNodeInfoBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequestOrBuilder> getNeighbourNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest getGetNeighbourNodes() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.getDefaultInstance();
                } else {
                    if (clientRequestTypeCase_ == 2) {
                        return getNeighbourNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
             */
            public Builder setGetNeighbourNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest value) {
                if (getNeighbourNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientRequestType_ = value;
                    onChanged();
                } else {
                    getNeighbourNodesBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
             */
            public Builder setGetNeighbourNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.Builder builderForValue) {
                if (getNeighbourNodesBuilder_ == null) {
                    clientRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNeighbourNodesBuilder_.setMessage(builderForValue.build());
                }
                clientRequestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
             */
            public Builder mergeGetNeighbourNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest value) {
                if (getNeighbourNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 2 &&
                            clientRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.getDefaultInstance()) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientRequestTypeCase_ == 2) {
                        getNeighbourNodesBuilder_.mergeFrom(value);
                    }
                    getNeighbourNodesBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
             */
            public Builder clearGetNeighbourNodes() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 2) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientRequestTypeCase_ == 2) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                    }
                    getNeighbourNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.Builder getGetNeighbourNodesBuilder() {
                return getGetNeighbourNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequestOrBuilder getGetNeighbourNodesOrBuilder() {
                if ((clientRequestTypeCase_ == 2) && (getNeighbourNodesBuilder_ != null)) {
                    return getNeighbourNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (clientRequestTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest get_neighbour_nodes = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequestOrBuilder>
            getGetNeighbourNodesFieldBuilder() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (!(clientRequestTypeCase_ == 2)) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.getDefaultInstance();
                    }
                    getNeighbourNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) clientRequestType_,
                            getParentForChildren(),
                            isClean());
                    clientRequestType_ = null;
                }
                clientRequestTypeCase_ = 2;
                onChanged();
                ;
                return getNeighbourNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder> getClosestNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest getGetClosestNodes() {
                if (getClosestNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
                } else {
                    if (clientRequestTypeCase_ == 3) {
                        return getClosestNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
             */
            public Builder setGetClosestNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest value) {
                if (getClosestNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientRequestType_ = value;
                    onChanged();
                } else {
                    getClosestNodesBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
             */
            public Builder setGetClosestNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder builderForValue) {
                if (getClosestNodesBuilder_ == null) {
                    clientRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getClosestNodesBuilder_.setMessage(builderForValue.build());
                }
                clientRequestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
             */
            public Builder mergeGetClosestNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest value) {
                if (getClosestNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 3 &&
                            clientRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance()) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientRequestTypeCase_ == 3) {
                        getClosestNodesBuilder_.mergeFrom(value);
                    }
                    getClosestNodesBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
             */
            public Builder clearGetClosestNodes() {
                if (getClosestNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 3) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientRequestTypeCase_ == 3) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                    }
                    getClosestNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder getGetClosestNodesBuilder() {
                return getGetClosestNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder getGetClosestNodesOrBuilder() {
                if ((clientRequestTypeCase_ == 3) && (getClosestNodesBuilder_ != null)) {
                    return getClosestNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (clientRequestTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceRequest get_closest_nodes = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder>
            getGetClosestNodesFieldBuilder() {
                if (getClosestNodesBuilder_ == null) {
                    if (!(clientRequestTypeCase_ == 3)) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.getDefaultInstance();
                    }
                    getClosestNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceRequest) clientRequestType_,
                            getParentForChildren(),
                            isClean());
                    clientRequestType_ = null;
                }
                clientRequestTypeCase_ = 3;
                onChanged();
                ;
                return getClosestNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequestOrBuilder> exploreNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest getExploreNodes() {
                if (exploreNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.getDefaultInstance();
                } else {
                    if (clientRequestTypeCase_ == 4) {
                        return exploreNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
             */
            public Builder setExploreNodes(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest value) {
                if (exploreNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientRequestType_ = value;
                    onChanged();
                } else {
                    exploreNodesBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
             */
            public Builder setExploreNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.Builder builderForValue) {
                if (exploreNodesBuilder_ == null) {
                    clientRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    exploreNodesBuilder_.setMessage(builderForValue.build());
                }
                clientRequestTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
             */
            public Builder mergeExploreNodes(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest value) {
                if (exploreNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 4 &&
                            clientRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.getDefaultInstance()) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientRequestTypeCase_ == 4) {
                        exploreNodesBuilder_.mergeFrom(value);
                    }
                    exploreNodesBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
             */
            public Builder clearExploreNodes() {
                if (exploreNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 4) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientRequestTypeCase_ == 4) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                    }
                    exploreNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.Builder getExploreNodesBuilder() {
                return getExploreNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequestOrBuilder getExploreNodesOrBuilder() {
                if ((clientRequestTypeCase_ == 4) && (exploreNodesBuilder_ != null)) {
                    return exploreNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (clientRequestTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest explore_nodes = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequestOrBuilder>
            getExploreNodesFieldBuilder() {
                if (exploreNodesBuilder_ == null) {
                    if (!(clientRequestTypeCase_ == 4)) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.getDefaultInstance();
                    }
                    exploreNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) clientRequestType_,
                            getParentForChildren(),
                            isClean());
                    clientRequestType_ = null;
                }
                clientRequestTypeCase_ = 4;
                onChanged();
                ;
                return exploreNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder> getRandomNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest getGetRandomNodes() {
                if (getRandomNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
                } else {
                    if (clientRequestTypeCase_ == 5) {
                        return getRandomNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
             */
            public Builder setGetRandomNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest value) {
                if (getRandomNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientRequestType_ = value;
                    onChanged();
                } else {
                    getRandomNodesBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
             */
            public Builder setGetRandomNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder builderForValue) {
                if (getRandomNodesBuilder_ == null) {
                    clientRequestType_ = builderForValue.build();
                    onChanged();
                } else {
                    getRandomNodesBuilder_.setMessage(builderForValue.build());
                }
                clientRequestTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
             */
            public Builder mergeGetRandomNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest value) {
                if (getRandomNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 5 &&
                            clientRequestType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance()) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientRequestType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientRequestTypeCase_ == 5) {
                        getRandomNodesBuilder_.mergeFrom(value);
                    }
                    getRandomNodesBuilder_.setMessage(value);
                }
                clientRequestTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
             */
            public Builder clearGetRandomNodes() {
                if (getRandomNodesBuilder_ == null) {
                    if (clientRequestTypeCase_ == 5) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientRequestTypeCase_ == 5) {
                        clientRequestTypeCase_ = 0;
                        clientRequestType_ = null;
                    }
                    getRandomNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder getGetRandomNodesBuilder() {
                return getGetRandomNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder getGetRandomNodesOrBuilder() {
                if ((clientRequestTypeCase_ == 5) && (getRandomNodesBuilder_ != null)) {
                    return getRandomNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (clientRequestTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesRequest get_random_nodes = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder>
            getGetRandomNodesFieldBuilder() {
                if (getRandomNodesBuilder_ == null) {
                    if (!(clientRequestTypeCase_ == 5)) {
                        clientRequestType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.getDefaultInstance();
                    }
                    getRandomNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequestOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesRequest) clientRequestType_,
                            getParentForChildren(),
                            isClean());
                    clientRequestType_ = null;
                }
                clientRequestTypeCase_ = 5;
                onChanged();
                ;
                return getRandomNodesBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.ClientRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.ClientRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ClientRequest>
                PARSER = new com.google.protobuf.AbstractParser<ClientRequest>() {
            public ClientRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new ClientRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<ClientRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ClientRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.ClientRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface ClientResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.ClientResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getGetNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder getGetNodeInfoOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse getGetNeighbourNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder getGetNeighbourNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse getGetClosestNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder getGetClosestNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse getExploreNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponseOrBuilder getExploreNodesOrBuilder();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse getGetRandomNodes();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder getGetRandomNodesOrBuilder();

        public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.ClientResponseTypeCase getClientResponseTypeCase();
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.ClientResponse}
     */
    public static final class ClientResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.ClientResponse)
            ClientResponseOrBuilder {
        // Use ClientResponse.newBuilder() to construct.
        private ClientResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private ClientResponse() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private ClientResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder subBuilder = null;
                            if (clientResponseTypeCase_ == 1) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_).toBuilder();
                            }
                            clientResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_);
                                clientResponseType_ = subBuilder.buildPartial();
                            }
                            clientResponseTypeCase_ = 1;
                            break;
                        }
                        case 18: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder subBuilder = null;
                            if (clientResponseTypeCase_ == 2) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_).toBuilder();
                            }
                            clientResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_);
                                clientResponseType_ = subBuilder.buildPartial();
                            }
                            clientResponseTypeCase_ = 2;
                            break;
                        }
                        case 26: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder subBuilder = null;
                            if (clientResponseTypeCase_ == 3) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_).toBuilder();
                            }
                            clientResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_);
                                clientResponseType_ = subBuilder.buildPartial();
                            }
                            clientResponseTypeCase_ = 3;
                            break;
                        }
                        case 34: {
                            org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.Builder subBuilder = null;
                            if (clientResponseTypeCase_ == 4) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_).toBuilder();
                            }
                            clientResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_);
                                clientResponseType_ = subBuilder.buildPartial();
                            }
                            clientResponseTypeCase_ = 4;
                            break;
                        }
                        case 42: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder subBuilder = null;
                            if (clientResponseTypeCase_ == 5) {
                                subBuilder = ((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_).toBuilder();
                            }
                            clientResponseType_ =
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_);
                                clientResponseType_ = subBuilder.buildPartial();
                            }
                            clientResponseTypeCase_ = 5;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.Builder.class);
        }

        private int clientResponseTypeCase_ = 0;
        private java.lang.Object clientResponseType_;

        public enum ClientResponseTypeCase
                implements com.google.protobuf.Internal.EnumLite {
            GET_NODE_INFO(1),
            GET_NEIGHBOUR_NODES(2),
            GET_CLOSEST_NODES(3),
            EXPLORE_NODES(4),
            GET_RANDOM_NODES(5),
            CLIENTRESPONSETYPE_NOT_SET(0);
            private final int value;

            private ClientResponseTypeCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static ClientResponseTypeCase valueOf(int value) {
                return forNumber(value);
            }

            public static ClientResponseTypeCase forNumber(int value) {
                switch (value) {
                    case 1:
                        return GET_NODE_INFO;
                    case 2:
                        return GET_NEIGHBOUR_NODES;
                    case 3:
                        return GET_CLOSEST_NODES;
                    case 4:
                        return EXPLORE_NODES;
                    case 5:
                        return GET_RANDOM_NODES;
                    case 0:
                        return CLIENTRESPONSETYPE_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public ClientResponseTypeCase
        getClientResponseTypeCase() {
            return ClientResponseTypeCase.forNumber(
                    clientResponseTypeCase_);
        }

        public static final int GET_NODE_INFO_FIELD_NUMBER = 1;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getGetNodeInfo() {
            if (clientResponseTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder getGetNodeInfoOrBuilder() {
            if (clientResponseTypeCase_ == 1) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
        }

        public static final int GET_NEIGHBOUR_NODES_FIELD_NUMBER = 2;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse getGetNeighbourNodes() {
            if (clientResponseTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder getGetNeighbourNodesOrBuilder() {
            if (clientResponseTypeCase_ == 2) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
        }

        public static final int GET_CLOSEST_NODES_FIELD_NUMBER = 3;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse getGetClosestNodes() {
            if (clientResponseTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder getGetClosestNodesOrBuilder() {
            if (clientResponseTypeCase_ == 3) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
        }

        public static final int EXPLORE_NODES_FIELD_NUMBER = 4;

        /**
         * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse getExploreNodes() {
            if (clientResponseTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponseOrBuilder getExploreNodesOrBuilder() {
            if (clientResponseTypeCase_ == 4) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.getDefaultInstance();
        }

        public static final int GET_RANDOM_NODES_FIELD_NUMBER = 5;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse getGetRandomNodes() {
            if (clientResponseTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder getGetRandomNodesOrBuilder() {
            if (clientResponseTypeCase_ == 5) {
                return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_;
            }
            return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (clientResponseTypeCase_ == 1) {
                output.writeMessage(1, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_);
            }
            if (clientResponseTypeCase_ == 2) {
                output.writeMessage(2, (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_);
            }
            if (clientResponseTypeCase_ == 3) {
                output.writeMessage(3, (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_);
            }
            if (clientResponseTypeCase_ == 4) {
                output.writeMessage(4, (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_);
            }
            if (clientResponseTypeCase_ == 5) {
                output.writeMessage(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (clientResponseTypeCase_ == 1) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_);
            }
            if (clientResponseTypeCase_ == 2) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_);
            }
            if (clientResponseTypeCase_ == 3) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_);
            }
            if (clientResponseTypeCase_ == 4) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_);
            }
            if (clientResponseTypeCase_ == 5) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) obj;

            boolean result = true;
            result = result && getClientResponseTypeCase().equals(
                    other.getClientResponseTypeCase());
            if (!result) return false;
            switch (clientResponseTypeCase_) {
                case 1:
                    result = result && getGetNodeInfo()
                            .equals(other.getGetNodeInfo());
                    break;
                case 2:
                    result = result && getGetNeighbourNodes()
                            .equals(other.getGetNeighbourNodes());
                    break;
                case 3:
                    result = result && getGetClosestNodes()
                            .equals(other.getGetClosestNodes());
                    break;
                case 4:
                    result = result && getExploreNodes()
                            .equals(other.getExploreNodes());
                    break;
                case 5:
                    result = result && getGetRandomNodes()
                            .equals(other.getGetRandomNodes());
                    break;
                case 0:
                default:
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            switch (clientResponseTypeCase_) {
                case 1:
                    hash = (37 * hash) + GET_NODE_INFO_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNodeInfo().hashCode();
                    break;
                case 2:
                    hash = (37 * hash) + GET_NEIGHBOUR_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetNeighbourNodes().hashCode();
                    break;
                case 3:
                    hash = (37 * hash) + GET_CLOSEST_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetClosestNodes().hashCode();
                    break;
                case 4:
                    hash = (37 * hash) + EXPLORE_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getExploreNodes().hashCode();
                    break;
                case 5:
                    hash = (37 * hash) + GET_RANDOM_NODES_FIELD_NUMBER;
                    hash = (53 * hash) + getGetRandomNodes().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.ClientResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.ClientResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.ClientResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                clientResponseTypeCase_ = 0;
                clientResponseType_ = null;
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ClientResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse(this);
                if (clientResponseTypeCase_ == 1) {
                    if (getNodeInfoBuilder_ == null) {
                        result.clientResponseType_ = clientResponseType_;
                    } else {
                        result.clientResponseType_ = getNodeInfoBuilder_.build();
                    }
                }
                if (clientResponseTypeCase_ == 2) {
                    if (getNeighbourNodesBuilder_ == null) {
                        result.clientResponseType_ = clientResponseType_;
                    } else {
                        result.clientResponseType_ = getNeighbourNodesBuilder_.build();
                    }
                }
                if (clientResponseTypeCase_ == 3) {
                    if (getClosestNodesBuilder_ == null) {
                        result.clientResponseType_ = clientResponseType_;
                    } else {
                        result.clientResponseType_ = getClosestNodesBuilder_.build();
                    }
                }
                if (clientResponseTypeCase_ == 4) {
                    if (exploreNodesBuilder_ == null) {
                        result.clientResponseType_ = clientResponseType_;
                    } else {
                        result.clientResponseType_ = exploreNodesBuilder_.build();
                    }
                }
                if (clientResponseTypeCase_ == 5) {
                    if (getRandomNodesBuilder_ == null) {
                        result.clientResponseType_ = clientResponseType_;
                    } else {
                        result.clientResponseType_ = getRandomNodesBuilder_.build();
                    }
                }
                result.clientResponseTypeCase_ = clientResponseTypeCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse.getDefaultInstance())
                    return this;
                switch (other.getClientResponseTypeCase()) {
                    case GET_NODE_INFO: {
                        mergeGetNodeInfo(other.getGetNodeInfo());
                        break;
                    }
                    case GET_NEIGHBOUR_NODES: {
                        mergeGetNeighbourNodes(other.getGetNeighbourNodes());
                        break;
                    }
                    case GET_CLOSEST_NODES: {
                        mergeGetClosestNodes(other.getGetClosestNodes());
                        break;
                    }
                    case EXPLORE_NODES: {
                        mergeExploreNodes(other.getExploreNodes());
                        break;
                    }
                    case GET_RANDOM_NODES: {
                        mergeGetRandomNodes(other.getGetRandomNodes());
                        break;
                    }
                    case CLIENTRESPONSETYPE_NOT_SET: {
                        break;
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int clientResponseTypeCase_ = 0;
            private java.lang.Object clientResponseType_;

            public ClientResponseTypeCase
            getClientResponseTypeCase() {
                return ClientResponseTypeCase.forNumber(
                        clientResponseTypeCase_);
            }

            public Builder clearClientResponseType() {
                clientResponseTypeCase_ = 0;
                clientResponseType_ = null;
                onChanged();
                return this;
            }


            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder> getNodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (clientResponseTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                } else {
                    if (clientResponseTypeCase_ == 1) {
                        return getNodeInfoBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
             */
            public Builder setGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse value) {
                if (getNodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientResponseType_ = value;
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
             */
            public Builder setGetNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder builderForValue) {
                if (getNodeInfoBuilder_ == null) {
                    clientResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNodeInfoBuilder_.setMessage(builderForValue.build());
                }
                clientResponseTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
             */
            public Builder mergeGetNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse value) {
                if (getNodeInfoBuilder_ == null) {
                    if (clientResponseTypeCase_ == 1 &&
                            clientResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance()) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientResponseTypeCase_ == 1) {
                        getNodeInfoBuilder_.mergeFrom(value);
                    }
                    getNodeInfoBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 1;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
             */
            public Builder clearGetNodeInfo() {
                if (getNodeInfoBuilder_ == null) {
                    if (clientResponseTypeCase_ == 1) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientResponseTypeCase_ == 1) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                    }
                    getNodeInfoBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder getGetNodeInfoBuilder() {
                return getGetNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder getGetNodeInfoOrBuilder() {
                if ((clientResponseTypeCase_ == 1) && (getNodeInfoBuilder_ != null)) {
                    return getNodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    if (clientResponseTypeCase_ == 1) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNodeInfoResponse get_node_info = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder>
            getGetNodeInfoFieldBuilder() {
                if (getNodeInfoBuilder_ == null) {
                    if (!(clientResponseTypeCase_ == 1)) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
                    }
                    getNodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) clientResponseType_,
                            getParentForChildren(),
                            isClean());
                    clientResponseType_ = null;
                }
                clientResponseTypeCase_ = 1;
                onChanged();
                ;
                return getNodeInfoBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder> getNeighbourNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse getGetNeighbourNodes() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
                } else {
                    if (clientResponseTypeCase_ == 2) {
                        return getNeighbourNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
             */
            public Builder setGetNeighbourNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse value) {
                if (getNeighbourNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientResponseType_ = value;
                    onChanged();
                } else {
                    getNeighbourNodesBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
             */
            public Builder setGetNeighbourNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder builderForValue) {
                if (getNeighbourNodesBuilder_ == null) {
                    clientResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getNeighbourNodesBuilder_.setMessage(builderForValue.build());
                }
                clientResponseTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
             */
            public Builder mergeGetNeighbourNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse value) {
                if (getNeighbourNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 2 &&
                            clientResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance()) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientResponseTypeCase_ == 2) {
                        getNeighbourNodesBuilder_.mergeFrom(value);
                    }
                    getNeighbourNodesBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 2;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
             */
            public Builder clearGetNeighbourNodes() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 2) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientResponseTypeCase_ == 2) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                    }
                    getNeighbourNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder getGetNeighbourNodesBuilder() {
                return getGetNeighbourNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder getGetNeighbourNodesOrBuilder() {
                if ((clientResponseTypeCase_ == 2) && (getNeighbourNodesBuilder_ != null)) {
                    return getNeighbourNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (clientResponseTypeCase_ == 2) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceResponse get_neighbour_nodes = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder>
            getGetNeighbourNodesFieldBuilder() {
                if (getNeighbourNodesBuilder_ == null) {
                    if (!(clientResponseTypeCase_ == 2)) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.getDefaultInstance();
                    }
                    getNeighbourNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceResponse) clientResponseType_,
                            getParentForChildren(),
                            isClean());
                    clientResponseType_ = null;
                }
                clientResponseTypeCase_ = 2;
                onChanged();
                ;
                return getNeighbourNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder> getClosestNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse getGetClosestNodes() {
                if (getClosestNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
                } else {
                    if (clientResponseTypeCase_ == 3) {
                        return getClosestNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
             */
            public Builder setGetClosestNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse value) {
                if (getClosestNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientResponseType_ = value;
                    onChanged();
                } else {
                    getClosestNodesBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
             */
            public Builder setGetClosestNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder builderForValue) {
                if (getClosestNodesBuilder_ == null) {
                    clientResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getClosestNodesBuilder_.setMessage(builderForValue.build());
                }
                clientResponseTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
             */
            public Builder mergeGetClosestNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse value) {
                if (getClosestNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 3 &&
                            clientResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance()) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientResponseTypeCase_ == 3) {
                        getClosestNodesBuilder_.mergeFrom(value);
                    }
                    getClosestNodesBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 3;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
             */
            public Builder clearGetClosestNodes() {
                if (getClosestNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 3) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientResponseTypeCase_ == 3) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                    }
                    getClosestNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder getGetClosestNodesBuilder() {
                return getGetClosestNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder getGetClosestNodesOrBuilder() {
                if ((clientResponseTypeCase_ == 3) && (getClosestNodesBuilder_ != null)) {
                    return getClosestNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (clientResponseTypeCase_ == 3) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetClosestNodesByDistanceResponse get_closest_nodes = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder>
            getGetClosestNodesFieldBuilder() {
                if (getClosestNodesBuilder_ == null) {
                    if (!(clientResponseTypeCase_ == 3)) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.getDefaultInstance();
                    }
                    getClosestNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetClosestNodesByDistanceResponse) clientResponseType_,
                            getParentForChildren(),
                            isClean());
                    clientResponseType_ = null;
                }
                clientResponseTypeCase_ = 3;
                onChanged();
                ;
                return getClosestNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponseOrBuilder> exploreNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse getExploreNodes() {
                if (exploreNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.getDefaultInstance();
                } else {
                    if (clientResponseTypeCase_ == 4) {
                        return exploreNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
             */
            public Builder setExploreNodes(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse value) {
                if (exploreNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientResponseType_ = value;
                    onChanged();
                } else {
                    exploreNodesBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
             */
            public Builder setExploreNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.Builder builderForValue) {
                if (exploreNodesBuilder_ == null) {
                    clientResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    exploreNodesBuilder_.setMessage(builderForValue.build());
                }
                clientResponseTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
             */
            public Builder mergeExploreNodes(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse value) {
                if (exploreNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 4 &&
                            clientResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.getDefaultInstance()) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientResponseTypeCase_ == 4) {
                        exploreNodesBuilder_.mergeFrom(value);
                    }
                    exploreNodesBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 4;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
             */
            public Builder clearExploreNodes() {
                if (exploreNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 4) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientResponseTypeCase_ == 4) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                    }
                    exploreNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.Builder getExploreNodesBuilder() {
                return getExploreNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponseOrBuilder getExploreNodesOrBuilder() {
                if ((clientResponseTypeCase_ == 4) && (exploreNodesBuilder_ != null)) {
                    return exploreNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (clientResponseTypeCase_ == 4) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse explore_nodes = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponseOrBuilder>
            getExploreNodesFieldBuilder() {
                if (exploreNodesBuilder_ == null) {
                    if (!(clientResponseTypeCase_ == 4)) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.getDefaultInstance();
                    }
                    exploreNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) clientResponseType_,
                            getParentForChildren(),
                            isClean());
                    clientResponseType_ = null;
                }
                clientResponseTypeCase_ = 4;
                onChanged();
                ;
                return exploreNodesBuilder_;
            }

            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder> getRandomNodesBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse getGetRandomNodes() {
                if (getRandomNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
                } else {
                    if (clientResponseTypeCase_ == 5) {
                        return getRandomNodesBuilder_.getMessage();
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
             */
            public Builder setGetRandomNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse value) {
                if (getRandomNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    clientResponseType_ = value;
                    onChanged();
                } else {
                    getRandomNodesBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
             */
            public Builder setGetRandomNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder builderForValue) {
                if (getRandomNodesBuilder_ == null) {
                    clientResponseType_ = builderForValue.build();
                    onChanged();
                } else {
                    getRandomNodesBuilder_.setMessage(builderForValue.build());
                }
                clientResponseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
             */
            public Builder mergeGetRandomNodes(org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse value) {
                if (getRandomNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 5 &&
                            clientResponseType_ != org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance()) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.newBuilder((org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_)
                                .mergeFrom(value).buildPartial();
                    } else {
                        clientResponseType_ = value;
                    }
                    onChanged();
                } else {
                    if (clientResponseTypeCase_ == 5) {
                        getRandomNodesBuilder_.mergeFrom(value);
                    }
                    getRandomNodesBuilder_.setMessage(value);
                }
                clientResponseTypeCase_ = 5;
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
             */
            public Builder clearGetRandomNodes() {
                if (getRandomNodesBuilder_ == null) {
                    if (clientResponseTypeCase_ == 5) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                        onChanged();
                    }
                } else {
                    if (clientResponseTypeCase_ == 5) {
                        clientResponseTypeCase_ = 0;
                        clientResponseType_ = null;
                    }
                    getRandomNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder getGetRandomNodesBuilder() {
                return getGetRandomNodesFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder getGetRandomNodesOrBuilder() {
                if ((clientResponseTypeCase_ == 5) && (getRandomNodesBuilder_ != null)) {
                    return getRandomNodesBuilder_.getMessageOrBuilder();
                } else {
                    if (clientResponseTypeCase_ == 5) {
                        return (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_;
                    }
                    return org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GetRandomNodesResponse get_random_nodes = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder>
            getGetRandomNodesFieldBuilder() {
                if (getRandomNodesBuilder_ == null) {
                    if (!(clientResponseTypeCase_ == 5)) {
                        clientResponseType_ = org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.getDefaultInstance();
                    }
                    getRandomNodesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponseOrBuilder>(
                            (org.libertaria.world.locnet.protocol.IopLocNet.GetRandomNodesResponse) clientResponseType_,
                            getParentForChildren(),
                            isClean());
                    clientResponseType_ = null;
                }
                clientResponseTypeCase_ = 5;
                onChanged();
                ;
                return getRandomNodesBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.ClientResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.ClientResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ClientResponse>
                PARSER = new com.google.protobuf.AbstractParser<ClientResponse>() {
            public ClientResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new ClientResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<ClientResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ClientResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.ClientResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetNodeInfoRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetNodeInfoRequest)
            com.google.protobuf.MessageOrBuilder {
    }

    /**
     * <pre>
     * List the list of other Internet of People services that are accessible for clients on the same node.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNodeInfoRequest}
     */
    public static final class GetNodeInfoRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetNodeInfoRequest)
            GetNodeInfoRequestOrBuilder {
        // Use GetNodeInfoRequest.newBuilder() to construct.
        private GetNodeInfoRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetNodeInfoRequest() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetNodeInfoRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder.class);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) obj;

            boolean result = true;
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * List the list of other Internet of People services that are accessible for clients on the same node.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNodeInfoRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetNodeInfoRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest(this);
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest.getDefaultInstance())
                    return this;
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetNodeInfoRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetNodeInfoRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetNodeInfoRequest>
                PARSER = new com.google.protobuf.AbstractParser<GetNodeInfoRequest>() {
            public GetNodeInfoRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetNodeInfoRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetNodeInfoRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetNodeInfoRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetNodeInfoResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetNodeInfoResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
         */
        boolean hasNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodeInfo();

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodeInfoOrBuilder();
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNodeInfoResponse}
     */
    public static final class GetNodeInfoResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetNodeInfoResponse)
            GetNodeInfoResponseOrBuilder {
        // Use GetNodeInfoResponse.newBuilder() to construct.
        private GetNodeInfoResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetNodeInfoResponse() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetNodeInfoResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder subBuilder = null;
                            if (nodeInfo_ != null) {
                                subBuilder = nodeInfo_.toBuilder();
                            }
                            nodeInfo_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(nodeInfo_);
                                nodeInfo_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder.class);
        }

        public static final int NODE_INFO_FIELD_NUMBER = 1;
        private org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo nodeInfo_;

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
         */
        public boolean hasNodeInfo() {
            return nodeInfo_ != null;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodeInfo() {
            return nodeInfo_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance() : nodeInfo_;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodeInfoOrBuilder() {
            return getNodeInfo();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (nodeInfo_ != null) {
                output.writeMessage(1, getNodeInfo());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (nodeInfo_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getNodeInfo());
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) obj;

            boolean result = true;
            result = result && (hasNodeInfo() == other.hasNodeInfo());
            if (hasNodeInfo()) {
                result = result && getNodeInfo()
                        .equals(other.getNodeInfo());
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasNodeInfo()) {
                hash = (37 * hash) + NODE_INFO_FIELD_NUMBER;
                hash = (53 * hash) + getNodeInfo().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNodeInfoResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetNodeInfoResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                if (nodeInfoBuilder_ == null) {
                    nodeInfo_ = null;
                } else {
                    nodeInfo_ = null;
                    nodeInfoBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse(this);
                if (nodeInfoBuilder_ == null) {
                    result.nodeInfo_ = nodeInfo_;
                } else {
                    result.nodeInfo_ = nodeInfoBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse.getDefaultInstance())
                    return this;
                if (other.hasNodeInfo()) {
                    mergeNodeInfo(other.getNodeInfo());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo nodeInfo_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder> nodeInfoBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
             */
            public boolean hasNodeInfo() {
                return nodeInfoBuilder_ != null || nodeInfo_ != null;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getNodeInfo() {
                if (nodeInfoBuilder_ == null) {
                    return nodeInfo_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance() : nodeInfo_;
                } else {
                    return nodeInfoBuilder_.getMessage();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
             */
            public Builder setNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodeInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    nodeInfo_ = value;
                    onChanged();
                } else {
                    nodeInfoBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
             */
            public Builder setNodeInfo(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (nodeInfoBuilder_ == null) {
                    nodeInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    nodeInfoBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
             */
            public Builder mergeNodeInfo(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (nodeInfoBuilder_ == null) {
                    if (nodeInfo_ != null) {
                        nodeInfo_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.newBuilder(nodeInfo_).mergeFrom(value).buildPartial();
                    } else {
                        nodeInfo_ = value;
                    }
                    onChanged();
                } else {
                    nodeInfoBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
             */
            public Builder clearNodeInfo() {
                if (nodeInfoBuilder_ == null) {
                    nodeInfo_ = null;
                    onChanged();
                } else {
                    nodeInfo_ = null;
                    nodeInfoBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder getNodeInfoBuilder() {

                onChanged();
                return getNodeInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getNodeInfoOrBuilder() {
                if (nodeInfoBuilder_ != null) {
                    return nodeInfoBuilder_.getMessageOrBuilder();
                } else {
                    return nodeInfo_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance() : nodeInfo_;
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.NodeInfo node_info = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getNodeInfoFieldBuilder() {
                if (nodeInfoBuilder_ == null) {
                    nodeInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>(
                            getNodeInfo(),
                            getParentForChildren(),
                            isClean());
                    nodeInfo_ = null;
                }
                return nodeInfoBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetNodeInfoResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetNodeInfoResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetNodeInfoResponse>
                PARSER = new com.google.protobuf.AbstractParser<GetNodeInfoResponse>() {
            public GetNodeInfoResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetNodeInfoResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetNodeInfoResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetNodeInfoResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetNodeInfoResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface GetNeighbourNodesByDistanceClientRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest)
            com.google.protobuf.MessageOrBuilder {
    }

    /**
     * <pre>
     * Requests for the same service as provided on the Local Service interface.
     * It's a different request type only because clients are not allowed
     * to keep the connection alive and wait for neighbourhood notication changes.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest}
     */
    public static final class GetNeighbourNodesByDistanceClientRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest)
            GetNeighbourNodesByDistanceClientRequestOrBuilder {
        // Use GetNeighbourNodesByDistanceClientRequest.newBuilder() to construct.
        private GetNeighbourNodesByDistanceClientRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GetNeighbourNodesByDistanceClientRequest() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private GetNeighbourNodesByDistanceClientRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.Builder.class);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) obj;

            boolean result = true;
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Requests for the same service as provided on the Local Service interface.
         * It's a different request type only because clients are not allowed
         * to keep the connection alive and wait for neighbourhood notication changes.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest(this);
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest.getDefaultInstance())
                    return this;
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.GetNeighbourNodesByDistanceClientRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<GetNeighbourNodesByDistanceClientRequest>
                PARSER = new com.google.protobuf.AbstractParser<GetNeighbourNodesByDistanceClientRequest>() {
            public GetNeighbourNodesByDistanceClientRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GetNeighbourNodesByDistanceClientRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<GetNeighbourNodesByDistanceClientRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GetNeighbourNodesByDistanceClientRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.GetNeighbourNodesByDistanceClientRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface ExploreNetworkNodesByDistanceRequestOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        boolean hasLocation();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation();

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder();

        /**
         * <code>uint32 target_node_count = 2;</code>
         */
        int getTargetNodeCount();

        /**
         * <code>uint32 max_node_hops = 3;</code>
         */
        int getMaxNodeHops();
    }

    /**
     * <pre>
     * Explore the closest nodes around the specified location.
     * While GetClosestNodesByDistanceResponse queries information only from this single node,
     * this call requests the node to contact also other nodes which might know the location better
     * so as the mobile client doesn't have to drain too much battery for such network communication.
     * </pre>
     * <p>
     * Protobuf type {@code org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest}
     */
    public static final class ExploreNetworkNodesByDistanceRequest extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest)
            ExploreNetworkNodesByDistanceRequestOrBuilder {
        // Use ExploreNetworkNodesByDistanceRequest.newBuilder() to construct.
        private ExploreNetworkNodesByDistanceRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private ExploreNetworkNodesByDistanceRequest() {
            targetNodeCount_ = 0;
            maxNodeHops_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private ExploreNetworkNodesByDistanceRequest(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder subBuilder = null;
                            if (location_ != null) {
                                subBuilder = location_.toBuilder();
                            }
                            location_ = input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(location_);
                                location_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 16: {

                            targetNodeCount_ = input.readUInt32();
                            break;
                        }
                        case 24: {

                            maxNodeHops_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.Builder.class);
        }

        public static final int LOCATION_FIELD_NUMBER = 1;
        private org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation location_;

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        public boolean hasLocation() {
            return location_ != null;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation() {
            return location_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
        }

        /**
         * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder() {
            return getLocation();
        }

        public static final int TARGET_NODE_COUNT_FIELD_NUMBER = 2;
        private int targetNodeCount_;

        /**
         * <code>uint32 target_node_count = 2;</code>
         */
        public int getTargetNodeCount() {
            return targetNodeCount_;
        }

        public static final int MAX_NODE_HOPS_FIELD_NUMBER = 3;
        private int maxNodeHops_;

        /**
         * <code>uint32 max_node_hops = 3;</code>
         */
        public int getMaxNodeHops() {
            return maxNodeHops_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (location_ != null) {
                output.writeMessage(1, getLocation());
            }
            if (targetNodeCount_ != 0) {
                output.writeUInt32(2, targetNodeCount_);
            }
            if (maxNodeHops_ != 0) {
                output.writeUInt32(3, maxNodeHops_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (location_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getLocation());
            }
            if (targetNodeCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, targetNodeCount_);
            }
            if (maxNodeHops_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, maxNodeHops_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest other = (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) obj;

            boolean result = true;
            result = result && (hasLocation() == other.hasLocation());
            if (hasLocation()) {
                result = result && getLocation()
                        .equals(other.getLocation());
            }
            result = result && (getTargetNodeCount()
                    == other.getTargetNodeCount());
            result = result && (getMaxNodeHops()
                    == other.getMaxNodeHops());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasLocation()) {
                hash = (37 * hash) + LOCATION_FIELD_NUMBER;
                hash = (53 * hash) + getLocation().hashCode();
            }
            hash = (37 * hash) + TARGET_NODE_COUNT_FIELD_NUMBER;
            hash = (53 * hash) + getTargetNodeCount();
            hash = (37 * hash) + MAX_NODE_HOPS_FIELD_NUMBER;
            hash = (53 * hash) + getMaxNodeHops();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Explore the closest nodes around the specified location.
         * While GetClosestNodesByDistanceResponse queries information only from this single node,
         * this call requests the node to contact also other nodes which might know the location better
         * so as the mobile client doesn't have to drain too much battery for such network communication.
         * </pre>
         * <p>
         * Protobuf type {@code org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest)
                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequestOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.class, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                if (locationBuilder_ == null) {
                    location_ = null;
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }
                targetNodeCount_ = 0;

                maxNodeHops_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest build() {
                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest result = new org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest(this);
                if (locationBuilder_ == null) {
                    result.location_ = location_;
                } else {
                    result.location_ = locationBuilder_.build();
                }
                result.targetNodeCount_ = targetNodeCount_;
                result.maxNodeHops_ = maxNodeHops_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest.getDefaultInstance())
                    return this;
                if (other.hasLocation()) {
                    mergeLocation(other.getLocation());
                }
                if (other.getTargetNodeCount() != 0) {
                    setTargetNodeCount(other.getTargetNodeCount());
                }
                if (other.getMaxNodeHops() != 0) {
                    setMaxNodeHops(other.getMaxNodeHops());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation location_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder> locationBuilder_;

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public boolean hasLocation() {
                return locationBuilder_ != null || location_ != null;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation getLocation() {
                if (locationBuilder_ == null) {
                    return location_ == null ? org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
                } else {
                    return locationBuilder_.getMessage();
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder setLocation(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation value) {
                if (locationBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    location_ = value;
                    onChanged();
                } else {
                    locationBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder setLocation(
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder builderForValue) {
                if (locationBuilder_ == null) {
                    location_ = builderForValue.build();
                    onChanged();
                } else {
                    locationBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder mergeLocation(org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation value) {
                if (locationBuilder_ == null) {
                    if (location_ != null) {
                        location_ =
                                org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.newBuilder(location_).mergeFrom(value).buildPartial();
                    } else {
                        location_ = value;
                    }
                    onChanged();
                } else {
                    locationBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public Builder clearLocation() {
                if (locationBuilder_ == null) {
                    location_ = null;
                    onChanged();
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder getLocationBuilder() {

                onChanged();
                return getLocationFieldBuilder().getBuilder();
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder getLocationOrBuilder() {
                if (locationBuilder_ != null) {
                    return locationBuilder_.getMessageOrBuilder();
                } else {
                    return location_ == null ?
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.getDefaultInstance() : location_;
                }
            }

            /**
             * <code>.org.libertaria.world.locnet.protocol.GpsLocation location = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder>
            getLocationFieldBuilder() {
                if (locationBuilder_ == null) {
                    locationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocation.Builder, org.libertaria.world.locnet.protocol.IopLocNet.GpsLocationOrBuilder>(
                            getLocation(),
                            getParentForChildren(),
                            isClean());
                    location_ = null;
                }
                return locationBuilder_;
            }

            private int targetNodeCount_;

            /**
             * <code>uint32 target_node_count = 2;</code>
             */
            public int getTargetNodeCount() {
                return targetNodeCount_;
            }

            /**
             * <code>uint32 target_node_count = 2;</code>
             */
            public Builder setTargetNodeCount(int value) {

                targetNodeCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>uint32 target_node_count = 2;</code>
             */
            public Builder clearTargetNodeCount() {

                targetNodeCount_ = 0;
                onChanged();
                return this;
            }

            private int maxNodeHops_;

            /**
             * <code>uint32 max_node_hops = 3;</code>
             */
            public int getMaxNodeHops() {
                return maxNodeHops_;
            }

            /**
             * <code>uint32 max_node_hops = 3;</code>
             */
            public Builder setMaxNodeHops(int value) {

                maxNodeHops_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>uint32 max_node_hops = 3;</code>
             */
            public Builder clearMaxNodeHops() {

                maxNodeHops_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceRequest)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ExploreNetworkNodesByDistanceRequest>
                PARSER = new com.google.protobuf.AbstractParser<ExploreNetworkNodesByDistanceRequest>() {
            public ExploreNetworkNodesByDistanceRequest parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new ExploreNetworkNodesByDistanceRequest(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<ExploreNetworkNodesByDistanceRequest> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ExploreNetworkNodesByDistanceRequest> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface ExploreNetworkNodesByDistanceResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>
        getClosestNodesList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getClosestNodes(int index);

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        int getClosestNodesCount();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
        getClosestNodesOrBuilderList();

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getClosestNodesOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse}
     */
    public static final class ExploreNetworkNodesByDistanceResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse)
            ExploreNetworkNodesByDistanceResponseOrBuilder {
        // Use ExploreNetworkNodesByDistanceResponse.newBuilder() to construct.
        private ExploreNetworkNodesByDistanceResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private ExploreNetworkNodesByDistanceResponse() {
            closestNodes_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private ExploreNetworkNodesByDistanceResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                closestNodes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            closestNodes_.add(
                                    input.readMessage(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.parser(), extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    closestNodes_ = java.util.Collections.unmodifiableList(closestNodes_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.Builder.class);
        }

        public static final int CLOSEST_NODES_FIELD_NUMBER = 1;
        private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> closestNodes_;

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> getClosestNodesList() {
            return closestNodes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
        getClosestNodesOrBuilderList() {
            return closestNodes_;
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        public int getClosestNodesCount() {
            return closestNodes_.size();
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getClosestNodes(int index) {
            return closestNodes_.get(index);
        }

        /**
         * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
         */
        public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getClosestNodesOrBuilder(
                int index) {
            return closestNodes_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < closestNodes_.size(); i++) {
                output.writeMessage(1, closestNodes_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < closestNodes_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, closestNodes_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse)) {
                return super.equals(obj);
            }
            org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse other = (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) obj;

            boolean result = true;
            result = result && getClosestNodesList()
                    .equals(other.getClosestNodesList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getClosestNodesCount() > 0) {
                hash = (37 * hash) + CLOSEST_NODES_FIELD_NUMBER;
                hash = (53 * hash) + getClosestNodesList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse)
                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.class, org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.Builder.class);
            }

            // Construct using org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getClosestNodesFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (closestNodesBuilder_ == null) {
                    closestNodes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    closestNodesBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_descriptor;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse getDefaultInstanceForType() {
                return org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.getDefaultInstance();
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse build() {
                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse buildPartial() {
                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse result = new org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse(this);
                int from_bitField0_ = bitField0_;
                if (closestNodesBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        closestNodes_ = java.util.Collections.unmodifiableList(closestNodes_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.closestNodes_ = closestNodes_;
                } else {
                    result.closestNodes_ = closestNodesBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) {
                    return mergeFrom((org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse other) {
                if (other == org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse.getDefaultInstance())
                    return this;
                if (closestNodesBuilder_ == null) {
                    if (!other.closestNodes_.isEmpty()) {
                        if (closestNodes_.isEmpty()) {
                            closestNodes_ = other.closestNodes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureClosestNodesIsMutable();
                            closestNodes_.addAll(other.closestNodes_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.closestNodes_.isEmpty()) {
                        if (closestNodesBuilder_.isEmpty()) {
                            closestNodesBuilder_.dispose();
                            closestNodesBuilder_ = null;
                            closestNodes_ = other.closestNodes_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            closestNodesBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getClosestNodesFieldBuilder() : null;
                        } else {
                            closestNodesBuilder_.addAllMessages(other.closestNodes_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> closestNodes_ =
                    java.util.Collections.emptyList();

            private void ensureClosestNodesIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    closestNodes_ = new java.util.ArrayList<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo>(closestNodes_);
                    bitField0_ |= 0x00000001;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder> closestNodesBuilder_;

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> getClosestNodesList() {
                if (closestNodesBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(closestNodes_);
                } else {
                    return closestNodesBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public int getClosestNodesCount() {
                if (closestNodesBuilder_ == null) {
                    return closestNodes_.size();
                } else {
                    return closestNodesBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo getClosestNodes(int index) {
                if (closestNodesBuilder_ == null) {
                    return closestNodes_.get(index);
                } else {
                    return closestNodesBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public Builder setClosestNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (closestNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureClosestNodesIsMutable();
                    closestNodes_.set(index, value);
                    onChanged();
                } else {
                    closestNodesBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public Builder setClosestNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (closestNodesBuilder_ == null) {
                    ensureClosestNodesIsMutable();
                    closestNodes_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    closestNodesBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public Builder addClosestNodes(org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (closestNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureClosestNodesIsMutable();
                    closestNodes_.add(value);
                    onChanged();
                } else {
                    closestNodesBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public Builder addClosestNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo value) {
                if (closestNodesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureClosestNodesIsMutable();
                    closestNodes_.add(index, value);
                    onChanged();
                } else {
                    closestNodesBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public Builder addClosestNodes(
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (closestNodesBuilder_ == null) {
                    ensureClosestNodesIsMutable();
                    closestNodes_.add(builderForValue.build());
                    onChanged();
                } else {
                    closestNodesBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public Builder addClosestNodes(
                    int index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder builderForValue) {
                if (closestNodesBuilder_ == null) {
                    ensureClosestNodesIsMutable();
                    closestNodes_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    closestNodesBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public Builder addAllClosestNodes(
                    java.lang.Iterable<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo> values) {
                if (closestNodesBuilder_ == null) {
                    ensureClosestNodesIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, closestNodes_);
                    onChanged();
                } else {
                    closestNodesBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public Builder clearClosestNodes() {
                if (closestNodesBuilder_ == null) {
                    closestNodes_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    closestNodesBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public Builder removeClosestNodes(int index) {
                if (closestNodesBuilder_ == null) {
                    ensureClosestNodesIsMutable();
                    closestNodes_.remove(index);
                    onChanged();
                } else {
                    closestNodesBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder getClosestNodesBuilder(
                    int index) {
                return getClosestNodesFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder getClosestNodesOrBuilder(
                    int index) {
                if (closestNodesBuilder_ == null) {
                    return closestNodes_.get(index);
                } else {
                    return closestNodesBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public java.util.List<? extends org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getClosestNodesOrBuilderList() {
                if (closestNodesBuilder_ != null) {
                    return closestNodesBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(closestNodes_);
                }
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder addClosestNodesBuilder() {
                return getClosestNodesFieldBuilder().addBuilder(
                        org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder addClosestNodesBuilder(
                    int index) {
                return getClosestNodesFieldBuilder().addBuilder(
                        index, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.getDefaultInstance());
            }

            /**
             * <code>repeated .org.libertaria.world.locnet.protocol.NodeInfo closest_nodes = 1;</code>
             */
            public java.util.List<org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder>
            getClosestNodesBuilderList() {
                return getClosestNodesFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>
            getClosestNodesFieldBuilder() {
                if (closestNodesBuilder_ == null) {
                    closestNodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfo.Builder, org.libertaria.world.locnet.protocol.IopLocNet.NodeInfoOrBuilder>(
                            closestNodes_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    closestNodes_ = null;
                }
                return closestNodesBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse)
        }

        // @@protoc_insertion_point(class_scope:org.libertaria.world.locnet.protocol.ExploreNetworkNodesByDistanceResponse)
        private static final org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse();
        }

        public static org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<ExploreNetworkNodesByDistanceResponse>
                PARSER = new com.google.protobuf.AbstractParser<ExploreNetworkNodesByDistanceResponse>() {
            public ExploreNetworkNodesByDistanceResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new ExploreNetworkNodesByDistanceResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<ExploreNetworkNodesByDistanceResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ExploreNetworkNodesByDistanceResponse> getParserForType() {
            return PARSER;
        }

        public org.libertaria.world.locnet.protocol.IopLocNet.ExploreNetworkNodesByDistanceResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GpsLocation_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GpsLocation_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_NodeContact_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_NodeContact_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_NodeInfo_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_NodeInfo_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_Message_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_Message_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_Request_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_Request_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_Response_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_Response_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_ClientRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_ClientRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_ClientResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_ClientResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\017IopLocNet.proto\022$org.libertaria.world." +
                        "locnet.protocol\"?\n\013ServiceInfo\022\014\n\004type\030\001" +
                        " \001(\t\022\014\n\004port\030\002 \001(\r\022\024\n\014service_data\030\003 \001(\014" +
                        "\"2\n\013GpsLocation\022\020\n\010latitude\030\001 \001(\017\022\021\n\tlon" +
                        "gitude\030\002 \001(\017\"I\n\013NodeContact\022\022\n\nip_addres" +
                        "s\030\001 \001(\014\022\021\n\tnode_port\030\002 \001(\r\022\023\n\013client_por" +
                        "t\030\003 \001(\r\"\351\001\n\010NodeInfo\022\017\n\007node_id\030\001 \001(\014\022B\n" +
                        "\007contact\030\002 \001(\01321.org.libertaria.world.lo" +
                        "cnet.protocol.NodeContact\022C\n\010location\030\003 " +
                        "\001(\01321.org.libertaria.world.locnet.protoc",
                "ol.GpsLocation\022C\n\010services\030  \003(\01321.org.l" +
                        "ibertaria.world.locnet.protocol.ServiceI" +
                        "nfo\"`\n\021MessageWithHeader\022\016\n\006header\030\001 \001(\007" +
                        "\022;\n\004body\030\002 \001(\0132-.org.libertaria.world.lo" +
                        "cnet.protocol.Message\"\252\001\n\007Message\022\n\n\002id\030" +
                        "\001 \001(\r\022@\n\007request\030\002 \001(\0132-.org.libertaria." +
                        "world.locnet.protocol.RequestH\000\022B\n\010respo" +
                        "nse\030\003 \001(\0132..org.libertaria.world.locnet." +
                        "protocol.ResponseH\000B\r\n\013MessageType\"\224\002\n\007R" +
                        "equest\022\017\n\007version\030\001 \001(\014\022R\n\rlocal_service",
                "\030\002 \001(\01329.org.libertaria.world.locnet.pro" +
                        "tocol.LocalServiceRequestH\000\022N\n\013remote_no" +
                        "de\030\003 \001(\01327.org.libertaria.world.locnet.p" +
                        "rotocol.RemoteNodeRequestH\000\022E\n\006client\030\004 " +
                        "\001(\01323.org.libertaria.world.locnet.protoc" +
                        "ol.ClientRequestH\000B\r\n\013RequestType\"\352\002\n\010Re" +
                        "sponse\022<\n\006status\030\001 \001(\0162,.org.libertaria." +
                        "world.locnet.protocol.Status\022\021\n\ttimestam" +
                        "p\030\002 \001(\022\022\017\n\007details\030\003 \001(\t\022S\n\rlocal_servic" +
                        "e\030\004 \001(\0132:.org.libertaria.world.locnet.pr",
                "otocol.LocalServiceResponseH\000\022O\n\013remote_" +
                        "node\030\005 \001(\01328.org.libertaria.world.locnet" +
                        ".protocol.RemoteNodeResponseH\000\022F\n\006client" +
                        "\030\006 \001(\01324.org.libertaria.world.locnet.pro" +
                        "tocol.ClientResponseH\000B\016\n\014ResponseType\"\231" +
                        "\004\n\023LocalServiceRequest\022X\n\020register_servi" +
                        "ce\030\001 \001(\0132<.org.libertaria.world.locnet.p" +
                        "rotocol.RegisterServiceRequestH\000\022\\\n\022dere" +
                        "gister_service\030\002 \001(\0132>.org.libertaria.wo" +
                        "rld.locnet.protocol.DeregisterServiceReq",
                "uestH\000\022l\n\023get_neighbour_nodes\030\003 \001(\0132M.or" +
                        "g.libertaria.world.locnet.protocol.GetNe" +
                        "ighbourNodesByDistanceLocalRequestH\000\022n\n\025" +
                        "neighbourhood_changed\030\004 \001(\0132M.org.libert" +
                        "aria.world.locnet.protocol.Neighbourhood" +
                        "ChangedNotificationRequestH\000\022Q\n\rget_node" +
                        "_info\030\005 \001(\01328.org.libertaria.world.locne" +
                        "t.protocol.GetNodeInfoRequestH\000B\031\n\027Local" +
                        "ServiceRequestType\"\233\004\n\024LocalServiceRespo" +
                        "nse\022Y\n\020register_service\030\001 \001(\0132=.org.libe",
                "rtaria.world.locnet.protocol.RegisterSer" +
                        "viceResponseH\000\022]\n\022deregister_service\030\002 \001" +
                        "(\0132?.org.libertaria.world.locnet.protoco" +
                        "l.DeregisterServiceResponseH\000\022h\n\023get_nei" +
                        "ghbour_nodes\030\003 \001(\0132I.org.libertaria.worl" +
                        "d.locnet.protocol.GetNeighbourNodesByDis" +
                        "tanceResponseH\000\022o\n\025neighbourhood_updated" +
                        "\030\004 \001(\0132N.org.libertaria.world.locnet.pro" +
                        "tocol.NeighbourhoodChangedNotificationRe" +
                        "sponseH\000\022R\n\rget_node_info\030\005 \001(\01329.org.li",
                "bertaria.world.locnet.protocol.GetNodeIn" +
                        "foResponseH\000B\032\n\030LocalServiceResponseType" +
                        "\"\\\n\026RegisterServiceRequest\022B\n\007service\030\001 " +
                        "\001(\01321.org.libertaria.world.locnet.protoc" +
                        "ol.ServiceInfo\"^\n\027RegisterServiceRespons" +
                        "e\022C\n\010location\030\001 \001(\01321.org.libertaria.wor" +
                        "ld.locnet.protocol.GpsLocation\"0\n\030Deregi" +
                        "sterServiceRequest\022\024\n\014service_type\030\001 \001(\t" +
                        "\"\033\n\031DeregisterServiceResponse\"N\n\'GetNeig" +
                        "hbourNodesByDistanceLocalRequest\022#\n\033keep",
                "_alive_and_send_updates\030\001 \001(\010\"d\n#GetNeig" +
                        "hbourNodesByDistanceResponse\022=\n\005nodes\030\001 " +
                        "\003(\0132..org.libertaria.world.locnet.protoc" +
                        "ol.NodeInfo\"\326\001\n\023NeighbourhoodChange\022I\n\017a" +
                        "dded_node_info\030\001 \001(\0132..org.libertaria.wo" +
                        "rld.locnet.protocol.NodeInfoH\000\022K\n\021update" +
                        "d_node_info\030\002 \001(\0132..org.libertaria.world" +
                        ".locnet.protocol.NodeInfoH\000\022\031\n\017removed_n" +
                        "ode_id\030\003 \001(\014H\000B\014\n\nChangeType\"u\n\'Neighbou" +
                        "rhoodChangedNotificationRequest\022J\n\007chang",
                "es\030\001 \003(\01329.org.libertaria.world.locnet.p" +
                        "rotocol.NeighbourhoodChange\"*\n(Neighbour" +
                        "hoodChangedNotificationResponse\"\354\005\n\021Remo" +
                        "teNodeRequest\022U\n\020accept_colleague\030\001 \001(\0132" +
                        "9.org.libertaria.world.locnet.protocol.B" +
                        "uildNetworkRequestH\000\022T\n\017renew_colleague\030" +
                        "\002 \001(\01329.org.libertaria.world.locnet.prot" +
                        "ocol.BuildNetworkRequestH\000\022U\n\020accept_nei" +
                        "ghbour\030\003 \001(\01329.org.libertaria.world.locn" +
                        "et.protocol.BuildNetworkRequestH\000\022T\n\017ren",
                "ew_neighbour\030\004 \001(\01329.org.libertaria.worl" +
                        "d.locnet.protocol.BuildNetworkRequestH\000\022" +
                        "S\n\016get_node_count\030\005 \001(\01329.org.libertaria" +
                        ".world.locnet.protocol.GetNodeCountReque" +
                        "stH\000\022W\n\020get_random_nodes\030\006 \001(\0132;.org.lib" +
                        "ertaria.world.locnet.protocol.GetRandomN" +
                        "odesRequestH\000\022c\n\021get_closest_nodes\030\007 \001(\013" +
                        "2F.org.libertaria.world.locnet.protocol." +
                        "GetClosestNodesByDistanceRequestH\000\022Q\n\rge" +
                        "t_node_info\030\010 \001(\01328.org.libertaria.world",
                ".locnet.protocol.GetNodeInfoRequestH\000B\027\n" +
                        "\025RemoteNodeRequestType\"\366\005\n\022RemoteNodeRes" +
                        "ponse\022V\n\020accept_colleague\030\001 \001(\0132:.org.li" +
                        "bertaria.world.locnet.protocol.BuildNetw" +
                        "orkResponseH\000\022U\n\017renew_colleague\030\002 \001(\0132:" +
                        ".org.libertaria.world.locnet.protocol.Bu" +
                        "ildNetworkResponseH\000\022V\n\020accept_neighbour" +
                        "\030\003 \001(\0132:.org.libertaria.world.locnet.pro" +
                        "tocol.BuildNetworkResponseH\000\022U\n\017renew_ne" +
                        "ighbour\030\004 \001(\0132:.org.libertaria.world.loc",
                "net.protocol.BuildNetworkResponseH\000\022T\n\016g" +
                        "et_node_count\030\005 \001(\0132:.org.libertaria.wor" +
                        "ld.locnet.protocol.GetNodeCountResponseH" +
                        "\000\022X\n\020get_random_nodes\030\006 \001(\0132<.org.libert" +
                        "aria.world.locnet.protocol.GetRandomNode" +
                        "sResponseH\000\022d\n\021get_closest_nodes\030\007 \001(\0132G" +
                        ".org.libertaria.world.locnet.protocol.Ge" +
                        "tClosestNodesByDistanceResponseH\000\022R\n\rget" +
                        "_node_info\030\010 \001(\01329.org.libertaria.world." +
                        "locnet.protocol.GetNodeInfoResponseH\000B\030\n",
                "\026RemoteNodeResponseType\"b\n\023BuildNetworkR" +
                        "equest\022K\n\023requestor_node_info\030\001 \001(\0132..or" +
                        "g.libertaria.world.locnet.protocol.NodeI" +
                        "nfo\"\217\001\n\024BuildNetworkResponse\022\020\n\010accepted" +
                        "\030\001 \001(\010\022J\n\022acceptor_node_info\030\002 \001(\0132..org" +
                        ".libertaria.world.locnet.protocol.NodeIn" +
                        "fo\022\031\n\021remote_ip_address\030\003 \001(\014\"\025\n\023GetNode" +
                        "CountRequest\"*\n\024GetNodeCountResponse\022\022\n\n" +
                        "node_count\030\001 \001(\r\"K\n\025GetRandomNodesReques" +
                        "t\022\026\n\016max_node_count\030\001 \001(\r\022\032\n\022include_nei",
                "ghbours\030\002 \001(\010\"W\n\026GetRandomNodesResponse\022" +
                        "=\n\005nodes\030\001 \003(\0132..org.libertaria.world.lo" +
                        "cnet.protocol.NodeInfo\"\262\001\n GetClosestNod" +
                        "esByDistanceRequest\022C\n\010location\030\001 \001(\01321." +
                        "org.libertaria.world.locnet.protocol.Gps" +
                        "Location\022\025\n\rmax_radius_km\030\002 \001(\002\022\026\n\016max_n" +
                        "ode_count\030\003 \001(\r\022\032\n\022include_neighbours\030\004 " +
                        "\001(\010\"b\n!GetClosestNodesByDistanceResponse" +
                        "\022=\n\005nodes\030\001 \003(\0132..org.libertaria.world.l" +
                        "ocnet.protocol.NodeInfo\"\211\004\n\rClientReques",
                "t\022Q\n\rget_node_info\030\001 \001(\01328.org.libertari" +
                        "a.world.locnet.protocol.GetNodeInfoReque" +
                        "stH\000\022m\n\023get_neighbour_nodes\030\002 \001(\0132N.org." +
                        "libertaria.world.locnet.protocol.GetNeig" +
                        "hbourNodesByDistanceClientRequestH\000\022c\n\021g" +
                        "et_closest_nodes\030\003 \001(\0132F.org.libertaria." +
                        "world.locnet.protocol.GetClosestNodesByD" +
                        "istanceRequestH\000\022c\n\rexplore_nodes\030\004 \001(\0132" +
                        "J.org.libertaria.world.locnet.protocol.E" +
                        "xploreNetworkNodesByDistanceRequestH\000\022W\n",
                "\020get_random_nodes\030\005 \001(\0132;.org.libertaria" +
                        ".world.locnet.protocol.GetRandomNodesReq" +
                        "uestH\000B\023\n\021ClientRequestType\"\212\004\n\016ClientRe" +
                        "sponse\022R\n\rget_node_info\030\001 \001(\01329.org.libe" +
                        "rtaria.world.locnet.protocol.GetNodeInfo" +
                        "ResponseH\000\022h\n\023get_neighbour_nodes\030\002 \001(\0132" +
                        "I.org.libertaria.world.locnet.protocol.G" +
                        "etNeighbourNodesByDistanceResponseH\000\022d\n\021" +
                        "get_closest_nodes\030\003 \001(\0132G.org.libertaria" +
                        ".world.locnet.protocol.GetClosestNodesBy",
                "DistanceResponseH\000\022d\n\rexplore_nodes\030\004 \001(" +
                        "\0132K.org.libertaria.world.locnet.protocol" +
                        ".ExploreNetworkNodesByDistanceResponseH\000" +
                        "\022X\n\020get_random_nodes\030\005 \001(\0132<.org.liberta" +
                        "ria.world.locnet.protocol.GetRandomNodes" +
                        "ResponseH\000B\024\n\022ClientResponseType\"\024\n\022GetN" +
                        "odeInfoRequest\"X\n\023GetNodeInfoResponse\022A\n" +
                        "\tnode_info\030\001 \001(\0132..org.libertaria.world." +
                        "locnet.protocol.NodeInfo\"*\n(GetNeighbour" +
                        "NodesByDistanceClientRequest\"\235\001\n$Explore",
                "NetworkNodesByDistanceRequest\022C\n\010locatio" +
                        "n\030\001 \001(\01321.org.libertaria.world.locnet.pr" +
                        "otocol.GpsLocation\022\031\n\021target_node_count\030" +
                        "\002 \001(\r\022\025\n\rmax_node_hops\030\003 \001(\r\"n\n%ExploreN" +
                        "etworkNodesByDistanceResponse\022E\n\rclosest" +
                        "_nodes\030\001 \003(\0132..org.libertaria.world.locn" +
                        "et.protocol.NodeInfo*y\n\006Status\022\r\n\tSTATUS" +
                        "_OK\020\000\022\034\n\030ERROR_PROTOCOL_VIOLATION\020\001\022\025\n\021E" +
                        "RROR_UNSUPPORTED\020\002\022\022\n\016ERROR_INTERNAL\020\010\022\027" +
                        "\n\023ERROR_INVALID_VALUE\0206b\006proto3"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
        internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_ServiceInfo_descriptor,
                new java.lang.String[]{"Type", "Port", "ServiceData",});
        internal_static_org_libertaria_world_locnet_protocol_GpsLocation_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_org_libertaria_world_locnet_protocol_GpsLocation_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GpsLocation_descriptor,
                new java.lang.String[]{"Latitude", "Longitude",});
        internal_static_org_libertaria_world_locnet_protocol_NodeContact_descriptor =
                getDescriptor().getMessageTypes().get(2);
        internal_static_org_libertaria_world_locnet_protocol_NodeContact_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_NodeContact_descriptor,
                new java.lang.String[]{"IpAddress", "NodePort", "ClientPort",});
        internal_static_org_libertaria_world_locnet_protocol_NodeInfo_descriptor =
                getDescriptor().getMessageTypes().get(3);
        internal_static_org_libertaria_world_locnet_protocol_NodeInfo_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_NodeInfo_descriptor,
                new java.lang.String[]{"NodeId", "Contact", "Location", "Services",});
        internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_descriptor =
                getDescriptor().getMessageTypes().get(4);
        internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_MessageWithHeader_descriptor,
                new java.lang.String[]{"Header", "Body",});
        internal_static_org_libertaria_world_locnet_protocol_Message_descriptor =
                getDescriptor().getMessageTypes().get(5);
        internal_static_org_libertaria_world_locnet_protocol_Message_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_Message_descriptor,
                new java.lang.String[]{"Id", "Request", "Response", "MessageType",});
        internal_static_org_libertaria_world_locnet_protocol_Request_descriptor =
                getDescriptor().getMessageTypes().get(6);
        internal_static_org_libertaria_world_locnet_protocol_Request_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_Request_descriptor,
                new java.lang.String[]{"Version", "LocalService", "RemoteNode", "Client", "RequestType",});
        internal_static_org_libertaria_world_locnet_protocol_Response_descriptor =
                getDescriptor().getMessageTypes().get(7);
        internal_static_org_libertaria_world_locnet_protocol_Response_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_Response_descriptor,
                new java.lang.String[]{"Status", "Timestamp", "Details", "LocalService", "RemoteNode", "Client", "ResponseType",});
        internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_descriptor =
                getDescriptor().getMessageTypes().get(8);
        internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_LocalServiceRequest_descriptor,
                new java.lang.String[]{"RegisterService", "DeregisterService", "GetNeighbourNodes", "NeighbourhoodChanged", "GetNodeInfo", "LocalServiceRequestType",});
        internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_descriptor =
                getDescriptor().getMessageTypes().get(9);
        internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_LocalServiceResponse_descriptor,
                new java.lang.String[]{"RegisterService", "DeregisterService", "GetNeighbourNodes", "NeighbourhoodUpdated", "GetNodeInfo", "LocalServiceResponseType",});
        internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_descriptor =
                getDescriptor().getMessageTypes().get(10);
        internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_RegisterServiceRequest_descriptor,
                new java.lang.String[]{"Service",});
        internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_descriptor =
                getDescriptor().getMessageTypes().get(11);
        internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_RegisterServiceResponse_descriptor,
                new java.lang.String[]{"Location",});
        internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_descriptor =
                getDescriptor().getMessageTypes().get(12);
        internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceRequest_descriptor,
                new java.lang.String[]{"ServiceType",});
        internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_descriptor =
                getDescriptor().getMessageTypes().get(13);
        internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_DeregisterServiceResponse_descriptor,
                new java.lang.String[]{});
        internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_descriptor =
                getDescriptor().getMessageTypes().get(14);
        internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceLocalRequest_descriptor,
                new java.lang.String[]{"KeepAliveAndSendUpdates",});
        internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_descriptor =
                getDescriptor().getMessageTypes().get(15);
        internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceResponse_descriptor,
                new java.lang.String[]{"Nodes",});
        internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_descriptor =
                getDescriptor().getMessageTypes().get(16);
        internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChange_descriptor,
                new java.lang.String[]{"AddedNodeInfo", "UpdatedNodeInfo", "RemovedNodeId", "ChangeType",});
        internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_descriptor =
                getDescriptor().getMessageTypes().get(17);
        internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationRequest_descriptor,
                new java.lang.String[]{"Changes",});
        internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_descriptor =
                getDescriptor().getMessageTypes().get(18);
        internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_NeighbourhoodChangedNotificationResponse_descriptor,
                new java.lang.String[]{});
        internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_descriptor =
                getDescriptor().getMessageTypes().get(19);
        internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_RemoteNodeRequest_descriptor,
                new java.lang.String[]{"AcceptColleague", "RenewColleague", "AcceptNeighbour", "RenewNeighbour", "GetNodeCount", "GetRandomNodes", "GetClosestNodes", "GetNodeInfo", "RemoteNodeRequestType",});
        internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_descriptor =
                getDescriptor().getMessageTypes().get(20);
        internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_RemoteNodeResponse_descriptor,
                new java.lang.String[]{"AcceptColleague", "RenewColleague", "AcceptNeighbour", "RenewNeighbour", "GetNodeCount", "GetRandomNodes", "GetClosestNodes", "GetNodeInfo", "RemoteNodeResponseType",});
        internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_descriptor =
                getDescriptor().getMessageTypes().get(21);
        internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_BuildNetworkRequest_descriptor,
                new java.lang.String[]{"RequestorNodeInfo",});
        internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_descriptor =
                getDescriptor().getMessageTypes().get(22);
        internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_BuildNetworkResponse_descriptor,
                new java.lang.String[]{"Accepted", "AcceptorNodeInfo", "RemoteIpAddress",});
        internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_descriptor =
                getDescriptor().getMessageTypes().get(23);
        internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetNodeCountRequest_descriptor,
                new java.lang.String[]{});
        internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_descriptor =
                getDescriptor().getMessageTypes().get(24);
        internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetNodeCountResponse_descriptor,
                new java.lang.String[]{"NodeCount",});
        internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_descriptor =
                getDescriptor().getMessageTypes().get(25);
        internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesRequest_descriptor,
                new java.lang.String[]{"MaxNodeCount", "IncludeNeighbours",});
        internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_descriptor =
                getDescriptor().getMessageTypes().get(26);
        internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetRandomNodesResponse_descriptor,
                new java.lang.String[]{"Nodes",});
        internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_descriptor =
                getDescriptor().getMessageTypes().get(27);
        internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceRequest_descriptor,
                new java.lang.String[]{"Location", "MaxRadiusKm", "MaxNodeCount", "IncludeNeighbours",});
        internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_descriptor =
                getDescriptor().getMessageTypes().get(28);
        internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetClosestNodesByDistanceResponse_descriptor,
                new java.lang.String[]{"Nodes",});
        internal_static_org_libertaria_world_locnet_protocol_ClientRequest_descriptor =
                getDescriptor().getMessageTypes().get(29);
        internal_static_org_libertaria_world_locnet_protocol_ClientRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_ClientRequest_descriptor,
                new java.lang.String[]{"GetNodeInfo", "GetNeighbourNodes", "GetClosestNodes", "ExploreNodes", "GetRandomNodes", "ClientRequestType",});
        internal_static_org_libertaria_world_locnet_protocol_ClientResponse_descriptor =
                getDescriptor().getMessageTypes().get(30);
        internal_static_org_libertaria_world_locnet_protocol_ClientResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_ClientResponse_descriptor,
                new java.lang.String[]{"GetNodeInfo", "GetNeighbourNodes", "GetClosestNodes", "ExploreNodes", "GetRandomNodes", "ClientResponseType",});
        internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_descriptor =
                getDescriptor().getMessageTypes().get(31);
        internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoRequest_descriptor,
                new java.lang.String[]{});
        internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_descriptor =
                getDescriptor().getMessageTypes().get(32);
        internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetNodeInfoResponse_descriptor,
                new java.lang.String[]{"NodeInfo",});
        internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_descriptor =
                getDescriptor().getMessageTypes().get(33);
        internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_GetNeighbourNodesByDistanceClientRequest_descriptor,
                new java.lang.String[]{});
        internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_descriptor =
                getDescriptor().getMessageTypes().get(34);
        internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceRequest_descriptor,
                new java.lang.String[]{"Location", "TargetNodeCount", "MaxNodeHops",});
        internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_descriptor =
                getDescriptor().getMessageTypes().get(35);
        internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_libertaria_world_locnet_protocol_ExploreNetworkNodesByDistanceResponse_descriptor,
                new java.lang.String[]{"ClosestNodes",});
    }

    // @@protoc_insertion_point(outer_class_scope)
}