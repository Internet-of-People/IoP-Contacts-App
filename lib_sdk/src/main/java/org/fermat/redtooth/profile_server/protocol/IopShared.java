// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopShared.proto

package org.fermat.redtooth.profile_server.protocol;


public final class IopShared {
  private IopShared() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Return codes to requests that inform requestor about whether the operation completed successfully or which error occurred.
   * </pre>
   *
   * Protobuf enum {@code Status}
   */
  public enum Status
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * General codes that can be returned to any message.
     * </pre>
     *
     * <code>STATUS_OK = 0;</code>
     */
    STATUS_OK(0),
    /**
     * <pre>
     * The incoming request does not follow the protocol.
     * </pre>
     *
     * <code>ERROR_PROTOCOL_VIOLATION = 1;</code>
     */
    ERROR_PROTOCOL_VIOLATION(1),
    /**
     * <pre>
     * The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
     * </pre>
     *
     * <code>ERROR_UNSUPPORTED = 2;</code>
     */
    ERROR_UNSUPPORTED(2),
    /**
     * <pre>
     * The peer will not process the request bacause the requestor is on the blacklist. Information about the blacklist entry expiration is provided in 'Response.timestamp'.
     * </pre>
     *
     * <code>ERROR_BANNED = 3;</code>
     */
    ERROR_BANNED(3),
    /**
     * <pre>
     * The peer will not process the request because it is too busy. The requestor can try later.
     * </pre>
     *
     * <code>ERROR_BUSY = 4;</code>
     */
    ERROR_BUSY(4),
    /**
     * <pre>
     * Within conversation, some server roles require authorization of the peer before certain requests are allowed.
     * </pre>
     *
     * <code>ERROR_UNAUTHORIZED = 5;</code>
     */
    ERROR_UNAUTHORIZED(5),
    /**
     * <pre>
     * If a request is sent to a port that does not handle the specific role, this error is returned.
     * </pre>
     *
     * <code>ERROR_BAD_ROLE = 6;</code>
     */
    ERROR_BAD_ROLE(6),
    /**
     * <pre>
     * The conversation status is different from what the message requires.
     * </pre>
     *
     * <code>ERROR_BAD_CONVERSATION_STATUS = 7;</code>
     */
    ERROR_BAD_CONVERSATION_STATUS(7),
    /**
     * <pre>
     * Internal error occurred while processing the message.
     * </pre>
     *
     * <code>ERROR_INTERNAL = 8;</code>
     */
    ERROR_INTERNAL(8),
    /**
     * <pre>
     * Return codes specific to a request.
     * </pre>
     *
     * <code>ERROR_QUOTA_EXCEEDED = 51;</code>
     */
    ERROR_QUOTA_EXCEEDED(51),
    /**
     * <pre>
     * The signature provided be the peer does not correspond to the peer's key or the message being signed.
     * </pre>
     *
     * <code>ERROR_INVALID_SIGNATURE = 52;</code>
     */
    ERROR_INVALID_SIGNATURE(52),
    /**
     * <pre>
     * A referenced object was not found.
     * </pre>
     *
     * <code>ERROR_NOT_FOUND = 53;</code>
     */
    ERROR_NOT_FOUND(53),
    /**
     * <pre>
     * One of the values provided is invalid.
     * </pre>
     *
     * <code>ERROR_INVALID_VALUE = 54;</code>
     */
    ERROR_INVALID_VALUE(54),
    /**
     * <pre>
     * An object with the same identifier already exists.
     * </pre>
     *
     * <code>ERROR_ALREADY_EXISTS = 55;</code>
     */
    ERROR_ALREADY_EXISTS(55),
    /**
     * <pre>
     * A request object is not available.
     * </pre>
     *
     * <code>ERROR_NOT_AVAILABLE = 56;</code>
     */
    ERROR_NOT_AVAILABLE(56),
    /**
     * <pre>
     * A third party rejected the requested action.
     * </pre>
     *
     * <code>ERROR_REJECTED = 57;</code>
     */
    ERROR_REJECTED(57),
    /**
     * <pre>
     * The requested object can not be obtained, queried or used as it is not initialized.
     * </pre>
     *
     * <code>ERROR_UNINITIALIZED = 58;</code>
     */
    ERROR_UNINITIALIZED(58),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * General codes that can be returned to any message.
     * </pre>
     *
     * <code>STATUS_OK = 0;</code>
     */
    public static final int STATUS_OK_VALUE = 0;
    /**
     * <pre>
     * The incoming request does not follow the protocol.
     * </pre>
     *
     * <code>ERROR_PROTOCOL_VIOLATION = 1;</code>
     */
    public static final int ERROR_PROTOCOL_VIOLATION_VALUE = 1;
    /**
     * <pre>
     * The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
     * </pre>
     *
     * <code>ERROR_UNSUPPORTED = 2;</code>
     */
    public static final int ERROR_UNSUPPORTED_VALUE = 2;
    /**
     * <pre>
     * The peer will not process the request bacause the requestor is on the blacklist. Information about the blacklist entry expiration is provided in 'Response.timestamp'.
     * </pre>
     *
     * <code>ERROR_BANNED = 3;</code>
     */
    public static final int ERROR_BANNED_VALUE = 3;
    /**
     * <pre>
     * The peer will not process the request because it is too busy. The requestor can try later.
     * </pre>
     *
     * <code>ERROR_BUSY = 4;</code>
     */
    public static final int ERROR_BUSY_VALUE = 4;
    /**
     * <pre>
     * Within conversation, some server roles require authorization of the peer before certain requests are allowed.
     * </pre>
     *
     * <code>ERROR_UNAUTHORIZED = 5;</code>
     */
    public static final int ERROR_UNAUTHORIZED_VALUE = 5;
    /**
     * <pre>
     * If a request is sent to a port that does not handle the specific role, this error is returned.
     * </pre>
     *
     * <code>ERROR_BAD_ROLE = 6;</code>
     */
    public static final int ERROR_BAD_ROLE_VALUE = 6;
    /**
     * <pre>
     * The conversation status is different from what the message requires.
     * </pre>
     *
     * <code>ERROR_BAD_CONVERSATION_STATUS = 7;</code>
     */
    public static final int ERROR_BAD_CONVERSATION_STATUS_VALUE = 7;
    /**
     * <pre>
     * Internal error occurred while processing the message.
     * </pre>
     *
     * <code>ERROR_INTERNAL = 8;</code>
     */
    public static final int ERROR_INTERNAL_VALUE = 8;
    /**
     * <pre>
     * Return codes specific to a request.
     * </pre>
     *
     * <code>ERROR_QUOTA_EXCEEDED = 51;</code>
     */
    public static final int ERROR_QUOTA_EXCEEDED_VALUE = 51;
    /**
     * <pre>
     * The signature provided be the peer does not correspond to the peer's key or the message being signed.
     * </pre>
     *
     * <code>ERROR_INVALID_SIGNATURE = 52;</code>
     */
    public static final int ERROR_INVALID_SIGNATURE_VALUE = 52;
    /**
     * <pre>
     * A referenced object was not found.
     * </pre>
     *
     * <code>ERROR_NOT_FOUND = 53;</code>
     */
    public static final int ERROR_NOT_FOUND_VALUE = 53;
    /**
     * <pre>
     * One of the values provided is invalid.
     * </pre>
     *
     * <code>ERROR_INVALID_VALUE = 54;</code>
     */
    public static final int ERROR_INVALID_VALUE_VALUE = 54;
    /**
     * <pre>
     * An object with the same identifier already exists.
     * </pre>
     *
     * <code>ERROR_ALREADY_EXISTS = 55;</code>
     */
    public static final int ERROR_ALREADY_EXISTS_VALUE = 55;
    /**
     * <pre>
     * A request object is not available.
     * </pre>
     *
     * <code>ERROR_NOT_AVAILABLE = 56;</code>
     */
    public static final int ERROR_NOT_AVAILABLE_VALUE = 56;
    /**
     * <pre>
     * A third party rejected the requested action.
     * </pre>
     *
     * <code>ERROR_REJECTED = 57;</code>
     */
    public static final int ERROR_REJECTED_VALUE = 57;
    /**
     * <pre>
     * The requested object can not be obtained, queried or used as it is not initialized.
     * </pre>
     *
     * <code>ERROR_UNINITIALIZED = 58;</code>
     */
    public static final int ERROR_UNINITIALIZED_VALUE = 58;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Status valueOf(int value) {
      return forNumber(value);
    }

    public static Status forNumber(int value) {
      switch (value) {
        case 0: return STATUS_OK;
        case 1: return ERROR_PROTOCOL_VIOLATION;
        case 2: return ERROR_UNSUPPORTED;
        case 3: return ERROR_BANNED;
        case 4: return ERROR_BUSY;
        case 5: return ERROR_UNAUTHORIZED;
        case 6: return ERROR_BAD_ROLE;
        case 7: return ERROR_BAD_CONVERSATION_STATUS;
        case 8: return ERROR_INTERNAL;
        case 51: return ERROR_QUOTA_EXCEEDED;
        case 52: return ERROR_INVALID_SIGNATURE;
        case 53: return ERROR_NOT_FOUND;
        case 54: return ERROR_INVALID_VALUE;
        case 55: return ERROR_ALREADY_EXISTS;
        case 56: return ERROR_NOT_AVAILABLE;
        case 57: return ERROR_REJECTED;
        case 58: return ERROR_UNINITIALIZED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Status>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Status> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Status>() {
            public Status findValueByNumber(int number) {
              return Status.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return IopShared.getDescriptor().getEnumTypes().get(0);
    }

    private static final Status[] VALUES = values();

    public static Status valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Status(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Status)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017IopShared.proto*\226\003\n\006Status\022\r\n\tSTATUS_O" +
      "K\020\000\022\034\n\030ERROR_PROTOCOL_VIOLATION\020\001\022\025\n\021ERR" +
      "OR_UNSUPPORTED\020\002\022\020\n\014ERROR_BANNED\020\003\022\016\n\nER" +
      "ROR_BUSY\020\004\022\026\n\022ERROR_UNAUTHORIZED\020\005\022\022\n\016ER" +
      "ROR_BAD_ROLE\020\006\022!\n\035ERROR_BAD_CONVERSATION" +
      "_STATUS\020\007\022\022\n\016ERROR_INTERNAL\020\010\022\030\n\024ERROR_Q" +
      "UOTA_EXCEEDED\0203\022\033\n\027ERROR_INVALID_SIGNATU" +
      "RE\0204\022\023\n\017ERROR_NOT_FOUND\0205\022\027\n\023ERROR_INVAL" +
      "ID_VALUE\0206\022\030\n\024ERROR_ALREADY_EXISTS\0207\022\027\n\023" +
      "ERROR_NOT_AVAILABLE\0208\022\022\n\016ERROR_REJECTED\020",
      "9\022\027\n\023ERROR_UNINITIALIZED\020:b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
